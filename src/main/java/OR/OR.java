/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OR;

import A.Func;
import static A.A.*;
import com.google.common.base.Stopwatch;
import java.awt.Cursor;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Duration;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
/**
 *
 * @author Oleg.Spozito
 */
public class OR extends javax.swing.JInternalFrame {
    /**
     * Creates new form OR
     */
    public OR() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSITES = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DV1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DV2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLOG = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        btnRun = new javax.swing.JButton();
        btnLog = new javax.swing.JButton();
        btnSave_Opt = new javax.swing.JButton();
        lblSITES13 = new javax.swing.JLabel();
        lblSITES14 = new javax.swing.JLabel();
        cmbEnv = new javax.swing.JComboBox<>();
        cmbApp = new javax.swing.JComboBox<>();
        txtMobile_ID = new javax.swing.JTextField();
        txtMobile_PW = new javax.swing.JTextField();
        lblSITES6 = new javax.swing.JLabel();
        lblSITES4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        DV3 = new javax.swing.JTable();
        lblMenus = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        DV4 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        DV5 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        DV6 = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);
        setIconifiable(true);
        setTitle("Place Order >>> loading, please wait ... ... ... ...");
        setMinimumSize(new java.awt.Dimension(860, 532));
        setName("WO"); // NOI18N
        setNormalBounds(new java.awt.Rectangle(0, 0, 104, 0));
        setPreferredSize(new java.awt.Dimension(860, 532));
        setVisible(true);
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSITES.setText("Sites");
        lblSITES.setAlignmentX(0.5F);
        getContentPane().add(lblSITES, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 4, 360, -1));

        DV1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        DV1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV1.setCellSelectionEnabled(true);
        DV1.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV1.setName("DV1"); // NOI18N
        DV1.setRowHeight(18);
        DV1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV1.getTableHeader().setReorderingAllowed(false);
        DV1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(DV1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 22, 428, 276));

        DV2.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV2.setCellSelectionEnabled(true);
        DV2.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV2.setName("DV2"); // NOI18N
        DV2.setOpaque(false);
        DV2.setRowHeight(18);
        DV2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV2.getTableHeader().setReorderingAllowed(false);
        DV2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(DV2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 298, 428, 120));

        txtLOG.setEditable(false);
        txtLOG.setColumns(20);
        txtLOG.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtLOG.setRows(5);
        txtLOG.setText("Start >");
        txtLOG.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtLOG.setMinimumSize(new java.awt.Dimension(50, 19));
        jScrollPane1.setViewportView(txtLOG);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 420, 428, 84));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRun.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnRun.setForeground(new java.awt.Color(204, 0, 0));
        btnRun.setText("Place Order");
        btnRun.setEnabled(false);
        btnRun.setName("btnRun"); // NOI18N
        btnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRunMouseClicked(evt);
            }
        });
        jPanel3.add(btnRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(312, 56, 100, 22));

        btnLog.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnLog.setText(" < Log");
        btnLog.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogMouseClicked(evt);
            }
        });
        jPanel3.add(btnLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 56, 52, 22));

        btnSave_Opt.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnSave_Opt.setText("Save Setup");
        btnSave_Opt.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSave_Opt.setName("btnSAVE"); // NOI18N
        btnSave_Opt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSave_OptMouseClicked(evt);
            }
        });
        jPanel3.add(btnSave_Opt, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 56, 76, 22));

        lblSITES13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES13.setText("Environment:");
        lblSITES13.setAlignmentX(0.5F);
        jPanel3.add(lblSITES13, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 4, 92, 16));

        lblSITES14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES14.setText("Application:");
        lblSITES14.setAlignmentX(0.5F);
        jPanel3.add(lblSITES14, new org.netbeans.lib.awtextra.AbsoluteConstraints(312, 4, 92, 16));

        cmbEnv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbEnv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEnvItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbEnv, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 20, 132, 20));

        cmbApp.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbApp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAppItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(312, 20, 100, 20));

        txtMobile_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtMobile_ID.setText("App_User@?.?");
        jPanel3.add(txtMobile_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 20, 167, 20));

        txtMobile_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtMobile_PW.setText("password");
        jPanel3.add(txtMobile_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 59, 164, 20));

        lblSITES6.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES6.setText("App User Password");
        lblSITES6.setAlignmentX(0.5F);
        jPanel3.add(lblSITES6, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 44, -1, -1));

        lblSITES4.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES4.setText("App User E-mail:");
        lblSITES4.setToolTipText("");
        lblSITES4.setAlignmentX(0.5F);
        jPanel3.add(lblSITES4, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 4, 120, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 420, 418, 83));

        DV3.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV3.setCellSelectionEnabled(true);
        DV3.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV3.setName("DV3"); // NOI18N
        DV3.setOpaque(false);
        DV3.setRowHeight(18);
        DV3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV3.getTableHeader().setReorderingAllowed(false);
        DV3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV3MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(DV3);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 20, 418, 80));

        lblMenus.setText("Click Brand to get Menu(s) ...");
        lblMenus.setAlignmentX(0.5F);
        getContentPane().add(lblMenus, new org.netbeans.lib.awtextra.AbsoluteConstraints(442, 4, 360, -1));

        DV4.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV4.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV4.setCellSelectionEnabled(true);
        DV4.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV4.setName("DV4"); // NOI18N
        DV4.setOpaque(false);
        DV4.setRowHeight(18);
        DV4.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV4.getTableHeader().setReorderingAllowed(false);
        DV4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV4MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(DV4);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 100, 418, 76));

        DV5.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV5.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV5.setCellSelectionEnabled(true);
        DV5.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV5.setName("DV5"); // NOI18N
        DV5.setOpaque(false);
        DV5.setRowHeight(18);
        DV5.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV5.getTableHeader().setReorderingAllowed(false);
        DV5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV5MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(DV5);

        getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 176, 418, 120));

        DV6.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV6.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV6.setCellSelectionEnabled(true);
        DV6.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV6.setName("DV6"); // NOI18N
        DV6.setOpaque(false);
        DV6.setRowHeight(18);
        DV6.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV6.getTableHeader().setReorderingAllowed(false);
        DV6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV6MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(DV6);

        getContentPane().add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 296, 418, 120));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DV1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV1MouseClicked
        if (d1LastRow == DV1.getSelectedRow()) {
           return;
        }
        SITE = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 0));
        SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
                
        GetBrands(); // ================================
        d1LastRow = DV1.getSelectedRow();  
    }//GEN-LAST:event_DV1MouseClicked

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        F_COUNT--;
    }//GEN-LAST:event_formInternalFrameClosed

    private void DV2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV2MouseClicked
        BRAND = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 0));
//        lblMenus.setText(BRAND + " - loading Menu(s), please wait ... ... ...");
//        lblMenus.repaint();
        BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
        GetMenus(); // ===================================
        d2LastRow = DV2.getSelectedRow();   

    }//GEN-LAST:event_DV2MouseClicked

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        jPanel3.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent arg0) {
                Load_Form();
            }
            @Override
            public void componentMoved(ComponentEvent arg0) {
                //System.err.println("componentMoved");
            }
            @Override
            public void componentShown(ComponentEvent arg0) {
                //System.err.println("componentShown");
            }
            @Override
            public void componentHidden(ComponentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }//GEN-LAST:event_formAncestorAdded

    private void btnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRunMouseClicked
        btnRun.setEnabled(false);
        EX = "";
        F = "";
        t_calls = 0;
        t_min =  0;
        t_avg = 0;
        t_max =  0;
        p_50 = 0;
        p_90 = 0;
        _t = 0; // Total
        _p = 0; // Passed
        _f = 0; // Failed
        _w = 0; // Warn
        r_time = "";

        if(DV1.getRowCount() > 0) {
            SITE = DV1.getValueAt(DV1.getSelectedRow(), 0).toString();
            platform = DV1.getValueAt(DV1.getSelectedRow(), 1).toString(); // platform
            CAN = DV1.getValueAt(DV1.getSelectedRow(), 2).toString();
        }
        if(DV2.getRowCount() > 0) {
            BRAND = DV2.getValueAt(DV2.getSelectedRow(), 0).toString();
        }


        r_type = "ad-hoc";
        // ================================== To Do ===================
    }//GEN-LAST:event_btnRunMouseClicked

    private void btnLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogMouseClicked
        String R = Func.SHOW_FILE(txtLOG.getText(), "txt");
        if(!R.equals("OK")){
            txtLOG.append(R);
        }
    }//GEN-LAST:event_btnLogMouseClicked

    private void btnSave_OptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSave_OptMouseClicked
        SAVE_CONFIG();
    }//GEN-LAST:event_btnSave_OptMouseClicked

    private void cmbEnvItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEnvItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            cmbEnv.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            LOAD_ENV();
            cmbEnv.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        }
        this.setTitle("Place Order");
    }//GEN-LAST:event_cmbEnvItemStateChanged

    private void cmbAppItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAppItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            cmbApp.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            app = cmbApp.getSelectedItem().toString();
            GetSites();
            cmbApp.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_cmbAppItemStateChanged

    private void DV3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_DV3MouseClicked

    private void DV4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_DV4MouseClicked

    private void DV5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV5MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_DV5MouseClicked

    private void DV6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_DV6MouseClicked

    private void Load_Form(){
        Load = true;
        cmbApp.addItem("Boost");
        cmbApp.addItem("Canteen");
        cmbApp.addItem("JJKitchen");
        cmbApp.addItem("Rogers");
        cmbApp.addItem("Tacit");
        cmbApp.addItem("Thrive");
        
        cmbEnv.addItem("Staging");
        cmbEnv.addItem("Development");
        cmbEnv.addItem("Production");         
        cmbEnv.setSelectedIndex(0); // Staging
        
        cmbApp.setSelectedIndex(5);
        
        MENU_IDS = new ArrayList<>();
        
        Load = false;
        LOAD_ENV();
        app = cmbApp.getSelectedItem().toString();
        CONFIG = false;   
        this.setTitle("Place Order");
    }

    private void LOAD_ENV(){
        if(cmbEnv.getSelectedItem().toString().contains("Staging")){
            BaseAPI = "https://api.compassdigital.org/staging";
            env = "ST";
            url = "https://dev.thriveapp.io/"; 
        } else if (cmbEnv.getSelectedItem().toString().contains("Dev")){
            BaseAPI = "https://api.compassdigital.org/dev";
            env = "DE";
            url = "https://dev.thriveapp.io/";
        } else{
            BaseAPI = "https://api.compassdigital.org/v1";
            env = "PR";
            url = "https://dev.thriveapp.io/";
        }
        Get_WO_TKN();
        LOAD_CONFIG();
        if (CONFIG) {
            Load = true;
            cmbApp.setSelectedItem(app);
            Load = false;
        }
        app = cmbApp.getSelectedItem().toString();
        GetSites();       
    }
    private void Get_WO_TKN(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));       
        try {
            try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
                ResultSet rs = conn.createStatement().executeQuery("SELECT [ap_token] FROM[dbo].[env] WHERE [DESCRIPTION] = '" + cmbEnv.getSelectedItem() + "'");
                rs.next();
                WO_TKN = rs.getString(1);
            }
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== WO_TKN > ERROR: " + ex.getMessage());
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetSites() {   
        d1LastRow = -1;
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Sites ...");
        sw1.start();
        try {
            try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
                ResultSet rs = conn.createStatement().executeQuery("SELECT [id] FROM[dbo].[p2_app] WHERE [app] = '" + cmbApp.getSelectedItem() +
                        "' AND [env] LIKE '" + cmbEnv.getSelectedItem().toString() + "%'");
                rs.next();
                appId = rs.getString(1);
            }
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== Get S_OAuth_TKN > ERROR: " + ex.getMessage());
        }
        String[] SitesColumnsName = {"Site","Platform","Country","Id"}; 
        DefaultTableModel SitesModel = new DefaultTableModel();
        SitesModel.setColumnIdentifiers(SitesColumnsName);
        DV1.setModel(SitesModel);
        
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try { 
            HttpGet httpget = new HttpGet(BaseAPI + "/location/multigroup/" + appId);   //  + "?web=true&expanded=true"    
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + response.getStatusLine().getStatusCode() + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);  
                JSONObject json = new JSONObject(responseBody);
            String site;
            String country;
            String id;
            JSONObject addresses;
            JSONObject meta;

            JSONArray Groups = json.getJSONArray("groups");
            for (int i = 0; i < Groups.length(); i++) {
                site = "";
                country = "null";
                id = "null";
                addresses = null;
                meta = null;
                platform = "DH";
                JSONObject sites = Groups.getJSONObject(i);
                    if(sites.has("name")){
                        site = sites.getString("name");   
                    } 
                    if(sites.has("id")){
                        id = sites.getString("id");
                    } 
                    if(sites.has("meta")){
                        meta = sites.getJSONObject("meta");
                        if (meta.has("migrated") && meta.getBoolean("migrated")){
                            platform = "CDL migrated";
                        }
                    }              
                    if (id.length() > 50) {
                        platform = "CDL";
                    } 

                    if(sites.has("address")){
                        addresses = sites.getJSONObject("address");
                    }  
                    if(addresses != null && addresses.has("country")){
                        country = addresses.getString("country");   
                    }
                    SitesModel.addRow(new Object[]{site, platform, country, id});                   
                }
            DV1.setModel(SitesModel);
            DV1.setDefaultEditor(Object.class, null);
            DV1.getColumnModel().getColumn(0).setPreferredWidth(250);
            DV1.getColumnModel().getColumn(1).setPreferredWidth(70);
            DV1.getColumnModel().getColumn(2).setPreferredWidth(50);
            DV1.getColumnModel().getColumn(3).setPreferredWidth(400);
   
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLOG.append("\r\n- Exception: " + ex.getMessage());   
            }
        }
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        if (DV1.getRowCount() > 0) {
            DV1.changeSelection(0, 0, false, false);
            if (CONFIG && !"".equals(SITE.trim())) {
                for(int row = 0; row < DV1.getRowCount(); row++) {
                    if(DV1.getValueAt(row, 0).equals(SITE)){
                        DV1.changeSelection(row, 0, false, false);
                        break;
                    }
                }
            }
            SITE = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 0));
            SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));           
            GetBrands();
        }
        lblSITES.setText(app + " Sites (" + DV1.getRowCount() + " found)");
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetBrands() {
        if (d1LastRow == DV1.getSelectedRow()) {
           return;
        }
        d2LastRow = -1;
        d1LastRow = DV1.getSelectedRow();
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Brands ...");
        String[] ColumnsName = {}; 
        DefaultTableModel Model = new DefaultTableModel();
        Model.setColumnIdentifiers(ColumnsName);
        DV3.setModel(Model);
        DV4.setModel(Model);
        DV5.setModel(Model);
        DV6.setModel(Model);
        lblMenus.setText("Click Brand to get Menu(s) ...");
        
        sw1.start();     
        String[] BrandsColumnsName = {"Brand / Station","Location","menu_ids", "Brand Id", "Unit ID"}; 
        DefaultTableModel BrandsModel = new DefaultTableModel();
        BrandsModel.setColumnIdentifiers(BrandsColumnsName);
        DV2.setModel(BrandsModel);
        
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3) + "?extended=true&nocache=1"); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Location = json.getJSONArray("locations");
            JSONArray brands = null;
            
            String brand;
            String location;
            String id;
            String unit_id;
            String menu_ids;
            if (Location != null) {
                for (Object l : Location) {
                    brand = "";
                    location = "";
                    id = "";
                    unit_id = "";
                    menu_ids = "";
                    JSONObject loc = (JSONObject) l;
                    if (loc.has("brands")) {
                        brands = loc.getJSONArray("brands");
                        for (Object b : brands) {
                            JSONObject br = (JSONObject) b;
                            brand = br.getString("name");                            
                            if (!br.isNull("location_description")) {
                                location = br.getString("location_description");
                            }
                            id = br.getString("id");
                            unit_id = loc.getString("id");
                            if(br.has("menus")){
                                menu_ids = "";
                                JSONArray Menus = br.getJSONArray("menus");
                                for (Object m : Menus) {
                                    JSONObject menu = (JSONObject) m;
                                    menu_ids += menu.getString("id") + ","; 
                                }  
                            }
                            BrandsModel.addRow(new Object[]{brand, location, menu_ids, id, unit_id});
                        }
                    }
                }
            }
            DV2.setModel(BrandsModel);    
            DV2.setDefaultEditor(Object.class, null);
            DV2.getColumnModel().getColumn(0).setPreferredWidth(140);
            DV2.getColumnModel().getColumn(1).setPreferredWidth(140);
            DV2.getColumnModel().getColumn(2).setPreferredWidth(80);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLOG.append("\r\n- Exception: " + ex.getMessage());   
            }
        } 
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
   
        if (DV2.getRowCount() > 0) {
            DV2.changeSelection(0, 0, false, false);
            if (CONFIG && !"".equals(BRAND.trim())) {
                for(int row = 0; row < DV2.getRowCount(); row++) {
                    if(DV2.getValueAt(row, 0).equals(BRAND)){
                        DV2.changeSelection(row, 0, false, false);
                        break;
                    } 
                }
            }
            BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));           
            //GetMenus(); // ======================== force only after Brand selection
        } else {
            BrandID = "null";
        }

        d2LastRow = -1; //DV2.getSelectedRow();        
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetMenus(){
        txtLOG.append("\r\n-Load Menus ...");
        String[] cName = {}; 
        DefaultTableModel M = new DefaultTableModel();
        M.setColumnIdentifiers(cName);
        DV4.setModel(M);
        DV5.setModel(M);
        DV6.setModel(M);
        d3LastRow = -1;
        String[] ColumnsName = {"Menu Label (en)", "Response", "Id"}; 
        DefaultTableModel Model = new DefaultTableModel();
        Model.setColumnIdentifiers(ColumnsName);
        DV3.setModel(Model);
        
        String IDS = DV2.getValueAt(DV2.getSelectedRow(), 2).toString(); // ================== col 2
        if(IDS.trim().isEmpty()){
            lblMenus.setText("Brand " + BRAND + " Menus (" + DV3.getRowCount() + " found)");
            return;
        }
        
        sw1.start();         
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR)); 
        CloseableHttpClient httpclient = HttpClients.createDefault();
        String label = "<empty> 'en'";
        String resp;
        Object_MENUS = new JSONArray();
        try {
            String[] Menu_IDs = IDS.split(",");
            for (String id : Menu_IDs) {
                HttpGet httpget = new HttpGet(BaseAPI + "/menu/" + id); // + "?extended=true&nocache=1"
                ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                    int status = response.getStatusLine().getStatusCode();
                    String Msg = response.getStatusLine().getReasonPhrase();
                    if (status >= 200 && status < 500) {
                        HttpEntity entity = response.getEntity();
                        return entity != null ? EntityUtils.toString(entity) : null;
                    } else {
                        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                        throw new ClientProtocolException("Response: " + status + " - " + Msg);
                    }
                };
                String responseBody = httpclient.execute(httpget, responseHandler);
                Object_MENUS.put(new JSONObject(responseBody));
                JSONObject menu = new JSONObject(responseBody);
                resp = "OK " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec";
                if(menu.has("label")){                    
                    if(menu.getJSONObject("label").has("en"))
                        label = menu.getJSONObject("label").getString("en");
                        if(label.trim().equals("")){
                            label = "label 'en' Empty";
                        }           
                }else{
                    label = "'label' Not Found";
                }

                Model.addRow(new Object[]{label, resp, id});
            }
        } catch (IOException | JSONException ex) {
            resp = "OK " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec";
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLOG.append("\r\n- Exception: " + ex.getMessage());   
            }
        } 
        DV3.setModel(Model);    
        DV3.setDefaultEditor(Object.class, null);
        DV3.getColumnModel().getColumn(0).setPreferredWidth(140);
        DV3.getColumnModel().getColumn(1).setPreferredWidth(140);
        DV3.getColumnModel().getColumn(2).setPreferredWidth(80);
        DV3.changeSelection(0, 0, false, false);
        
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
 
        lblMenus.setText("Menus (" + DV3.getRowCount() + " found) - Brand: " + BRAND);
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
        
        GetCategories();
        d3LastRow = DV3.getSelectedRow();     
    }

    private void GetCategories(){
        if (d3LastRow == DV3.getSelectedRow()) {
           return;
        }
        try {
            String name = "";
            String hidden = "?";  
            String linked = "?"; 
            String id = "?"; 
            String[] ColumnsName = {"Category (group) Name", "Hidden", "Linked", "id"}; 
            DefaultTableModel Model = new DefaultTableModel();
            Model.setColumnIdentifiers(ColumnsName);
            DV4.setModel(Model);
            d4LastRow = -1; 
            JSONObject menu = (JSONObject) Object_MENUS.get(DV3.getSelectedRow());             
            if (menu.has("groups")) {
                    JSONArray goups = menu.getJSONArray("groups");
                    for (Object g : goups) {
                        JSONObject gr = (JSONObject) g;
                        name = gr.getString("name");
                        id = gr.getString("id");
                        if(gr.has("is")){
                           JSONObject is =  gr.getJSONObject("is");
                           if(is.has("hidden") && is.getBoolean("hidden")){
                               hidden = "true";
                           }else{
                               hidden = "false";
                           }
                           if(is.has("linked") && is.getBoolean("linked")){
                               linked = "true";
                           }else{
                               hidden = "false";
                           } 
                        }
                        Model.addRow(new Object[]{name, hidden, hidden, id});            
                    DV4.setModel(Model);    
                    DV4.setDefaultEditor(Object.class, null);
                    DV4.getColumnModel().getColumn(0).setPreferredWidth(240);
                    DV4.getColumnModel().getColumn(1).setPreferredWidth(80);
                    DV4.getColumnModel().getColumn(2).setPreferredWidth(80);
                    DV4.changeSelection(0, 0, false, false);
                }
            }
        }
        catch(Exception ex){
            txtLOG.append("\r\n- Exception: " + ex.getMessage());  
        }
        GetItems();
        d4LastRow = DV4.getSelectedRow(); 
    }
    private void GetItems(){
        if (d4LastRow == DV4.getSelectedRow()) {
           return;
        }else{
            txtLOG.append("\r\n- GetItems: "); 

        }
        try {

            String name = "";
            String hidden = "?";  
            String linked = "?"; 
            String[] ColumnsName = {"Category (group)", "Hidden", "Linked"}; 
            DefaultTableModel Model = new DefaultTableModel();
            Model.setColumnIdentifiers(ColumnsName);
            DV4.setModel(Model);
            JSONObject menu = (JSONObject) Object_MENUS.get(DV3.getSelectedRow());             
            if (menu.has("groups")) {
                    JSONArray goups = menu.getJSONArray("groups");
                    for (Object g : goups) {
                        JSONObject gr = (JSONObject) g;
                        name = gr.getString("name");
                        if(gr.has("is")){
                           JSONObject is =  gr.getJSONObject("is");
                           if(is.has("hidden") && is.getBoolean("hidden")){
                               hidden = "true";
                           }else{
                               hidden = "false";
                           }
                           if(is.has("linked") && is.getBoolean("linked")){
                               linked = "true";
                           }else{
                               hidden = "false";
                           }                        }

                        Model.addRow(new Object[]{name, hidden, hidden});            
                    DV4.setModel(Model);    
                    DV4.setDefaultEditor(Object.class, null);
                    DV4.getColumnModel().getColumn(0).setPreferredWidth(240);
                    DV4.getColumnModel().getColumn(1).setPreferredWidth(80);
                    DV4.getColumnModel().getColumn(2).setPreferredWidth(80);
                    DV4.changeSelection(0, 0, false, false);
                }
            }
        }
        catch(Exception ex){
            txtLOG.append("\r\n- Exception: " + ex.getMessage());  
        }
    }
    private void GetMods(){
        if (d3LastRow == DV3.getSelectedRow()) {
           return;
        }
        try {
            String name = "";
            String hidden = "?";  
            String linked = "?"; 
            String[] ColumnsName = {"Category (group)", "Hidden", "Linked"}; 
            DefaultTableModel Model = new DefaultTableModel();
            Model.setColumnIdentifiers(ColumnsName);
            DV4.setModel(Model);
            JSONObject menu = (JSONObject) Object_MENUS.get(DV3.getSelectedRow());             
            if (menu.has("groups")) {
                    JSONArray goups = menu.getJSONArray("groups");
                    for (Object g : goups) {
                        JSONObject gr = (JSONObject) g;
                        name = gr.getString("name");
                        if(gr.has("is")){
                           JSONObject is =  gr.getJSONObject("is");
                           if(is.has("hidden") && is.getBoolean("hidden")){
                               hidden = "true";
                           }else{
                               hidden = "false";
                           }
                           if(is.has("linked") && is.getBoolean("linked")){
                               linked = "true";
                           }else{
                               hidden = "false";
                           }                        }

                        Model.addRow(new Object[]{name, hidden, hidden});            
                    DV4.setModel(Model);    
                    DV4.setDefaultEditor(Object.class, null);
                    DV4.getColumnModel().getColumn(0).setPreferredWidth(240);
                    DV4.getColumnModel().getColumn(1).setPreferredWidth(80);
                    DV4.getColumnModel().getColumn(2).setPreferredWidth(80);
                    DV4.changeSelection(0, 0, false, false);
                }
            }
        }
        catch(Exception ex){
            txtLOG.append("\r\n- Exception: " + ex.getMessage());  
        }
    }

    private void LOAD_CONFIG(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            SQL = "SELECT [_conf] FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'WEB' AND [app] = 'OR' AND [env] = '" + env + "'";
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery(SQL);
            rs.next();
            C = rs.getString(1);
            conn.close();
        } catch (Exception ex) {
            CONFIG = false;
            txtLOG.append("\r\n\r\n=== LOAD_CONFIG > ERROR: " + ex.getMessage());
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return;
        }
            
        try{            
            if (C.contains(": ")) {
                String c;
                c = C.substring(C.indexOf("env:")); c = c.substring(0, c.indexOf("\r\n")).trim(); env = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("app:")); c = c.substring(0, c.indexOf("\r\n")).trim(); app = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("url:")); c = c.substring(0, c.indexOf("\r\n")).trim(); url = c.substring(c.indexOf(" ")).trim();

                c = C.substring(C.indexOf("SITE:")); c = c.substring(0, c.indexOf("\r\n")).trim(); SITE = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("BRAND:")); c = c.substring(0, c.indexOf("\r\n")).trim(); BRAND = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("CAN:")); c = c.substring(0, c.indexOf("\r\n")).trim(); CAN = c.substring(c.indexOf(" ")).trim();

                c = C.substring(C.indexOf("txtMobile_ID:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtMobile_ID.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtMobile_PW:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtMobile_PW.setText(c.substring(c.indexOf(" ")).trim());

                c = C.substring(C.indexOf("cmbPromo:")); c = c.substring(0, c.indexOf("\r\n")).trim(); PROMO = c.substring(c.indexOf(" ")).trim();
                CONFIG = true;
                txtLOG.append("\r\n\r\n=== LOAD_CONFIG > OK");
            } else {
                CONFIG = false;
                txtLOG.append("\r\n\r\n=== WEB / OR, User: " + UserID + ", Env: " + env + " > No saved Configuration Found");
            }
        } catch (Exception ex) {
            CONFIG = false;
            txtLOG.append("\r\n\r\n=== LOAD_CONFIG > ERROR: " + ex.getMessage());
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void SAVE_CONFIG() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        String _S = "n/a";
        String _B = "n/a";
        try {
            if(DV1.getRowCount() > 0){
                _S = DV1.getValueAt(DV1.getSelectedRow(), 0).toString();
            }
            if(DV2.getRowCount() > 0){
                _B = DV2.getValueAt(DV2.getSelectedRow(), 0).toString();
            }
            C = "";
            C += "env: " + env + "\r\n";
            C += "app: " + cmbApp.getSelectedItem().toString() + "\r\n";
            C += "url: " + url + "\r\n";
            
            C += "SITE: " + _S + "\r\n";
            C += "BRAND: " + _B + "\r\n";
            C += "CAN: " + CAN + "\r\n";            
            
            C += "txtMobile_ID: " + txtMobile_ID.getText() + "\r\n";
            C += "txtMobile_PW: " + txtMobile_PW.getText()  + "\r\n";
            
            C += "cmbPromo: " + PROMO + "\r\n";            

        } catch (Exception ex)  {
            txtLOG.append("\r\n\r\n=== SAVE_CONFIG > ERROR: " + ex.getMessage());
            return;
        }
        
        try {
            try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
                SQL = "DELETE FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'WEB' AND [app] = 'OR' AND [env] = '" + env + "'";
                Statement _del = conn.createStatement();
                _del.execute(SQL);
                PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[a_config]" +
                        "([user_id]" +   // 1
                        ",[env]" +       // 2
                        ",[platform]" +  // 3
                        ",[app]" +       // 4
                        ",[_conf]" +     // 5
                        ") VALUES (" +
                        "?" +
                        ",?" +
                        ",?" +
                        ",?" +
                        ",?" +
                        ")");
                _insert.setString(1, UserID);
                _insert.setString(2, env);
                _insert.setString(3, "WEB");
                _insert.setString(4, "OR");
                _insert.setString(5, C);
                int row = _insert.executeUpdate();
                txtLOG.append("\r\n\r\n=== SAVE_CONFIG > OK (" + row + " row)");
                //txtLOG.append("\r\n\r\n=== " + C);
            }
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== SAVE_CONFIG > SQL ERROR: " + ex.getMessage());
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
  
    // <editor-fold defaultstate="collapsed" desc="Form Variables Declaration - do not modify">
    JSONArray Object_MENUS;
    private boolean Load;
    private static Duration DD;
    private static SwingWorker BW1;  
  
    private int d1LastRow = -1; 
    private int d2LastRow = -1; 
    private int d3LastRow = -1;  
    private int d4LastRow = -1; 
    private int d5LastRow = -1;  
    private List<String> MENU_IDS;  
    private boolean CONFIG = false;
    private String C = "";
    private String userID;
    private String userTKN;
    public static int T_Index;
    private String Last_EX;    
    public static Stopwatch sw1 = Stopwatch.createUnstarted();
    public static DateTimeFormatter Time_12_formatter = DateTimeFormatter.ofPattern("hh:mm:ss a"); 
    public static final DateTimeFormatter Time_24_formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
    public static final DateTimeFormatter Date_formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    public static String SQL = ""; 
    private String SCOPE;
    public static String WO_TKN = "";    
    public static String url = "";
    public static String app = "";
    public static String appId = "";
    public static String env = "";
    public static String SITE = "";
    public static String SiteID = "";
    public static String GROUP = "";
    public static String BRAND = "";
    public static String BrandID = "";

    public static String CAN = "CAN";

    public static String platform = "CDL";
    public static String BaseAPI;
    public static String TZone; 
    public static String PROMO; 
    public static String New_ID = "";
    
    public static String S_OAuth_TKN = "";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DV1;
    private javax.swing.JTable DV2;
    private javax.swing.JTable DV3;
    private javax.swing.JTable DV4;
    private javax.swing.JTable DV5;
    private javax.swing.JTable DV6;
    private javax.swing.JButton btnLog;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSave_Opt;
    private javax.swing.JComboBox<String> cmbApp;
    private javax.swing.JComboBox<String> cmbEnv;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblMenus;
    private javax.swing.JLabel lblSITES;
    private javax.swing.JLabel lblSITES13;
    private javax.swing.JLabel lblSITES14;
    private javax.swing.JLabel lblSITES4;
    private javax.swing.JLabel lblSITES6;
    private javax.swing.JTextArea txtLOG;
    private javax.swing.JTextField txtMobile_ID;
    private javax.swing.JTextField txtMobile_PW;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
