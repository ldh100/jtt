/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Android;
import A.Func;
import static A.A.*;
import com.amazonaws.SdkClientException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ListObjectsV2Result;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.google.common.base.Stopwatch;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;
import io.appium.java_client.service.local.AppiumDriverLocalService;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.file.CopyOption;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.openqa.selenium.NoSuchElementException;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 *
 * @author Oleg.Spozito
 */
public class Android extends javax.swing.JInternalFrame {
    /**
     * Creates new form Android
     */
    public Android() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSITES = new javax.swing.JLabel();
        lblBRANDS = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        _login = new javax.swing.JCheckBox();
        _all_data = new javax.swing.JCheckBox();
        _site_new = new javax.swing.JCheckBox();
        _site = new javax.swing.JCheckBox();
        _brand = new javax.swing.JCheckBox();
        _orders = new javax.swing.JCheckBox();
        _resent_updates = new javax.swing.JCheckBox();
        _announcements = new javax.swing.JCheckBox();
        _promo = new javax.swing.JCheckBox();
        _sales_reporting = new javax.swing.JCheckBox();
        _users = new javax.swing.JCheckBox();
        _password = new javax.swing.JCheckBox();
        _logout = new javax.swing.JCheckBox();
        _roles = new javax.swing.JCheckBox();
        _brand_new = new javax.swing.JCheckBox();
        _smart_analytics = new javax.swing.JCheckBox();
        _group_management = new javax.swing.JCheckBox();
        lblSITES8 = new javax.swing.JLabel();
        cmbPromo = new javax.swing.JComboBox<>();
        lblSITES12 = new javax.swing.JLabel();
        cmbMPlan = new javax.swing.JComboBox<>();
        _sales_analytics = new javax.swing.JCheckBox();
        _notifications = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        DV1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DV2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        nWaitElement = new javax.swing.JSpinner();
        nWaitLoad = new javax.swing.JSpinner();
        lblSITES9 = new javax.swing.JLabel();
        lblSITES10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        btnRun = new javax.swing.JButton();
        btnLog = new javax.swing.JButton();
        btnFails = new javax.swing.JButton();
        btnExel = new javax.swing.JButton();
        btnSave_Opt = new javax.swing.JButton();
        lblSITES13 = new javax.swing.JLabel();
        lblSITES14 = new javax.swing.JLabel();
        cmbEnv = new javax.swing.JComboBox<>();
        cmbApp = new javax.swing.JComboBox<>();
        _slack = new javax.swing.JCheckBox();
        txtMobile_Id = new javax.swing.JTextField();
        txtMobile_Pw = new javax.swing.JTextField();
        lblSITES3 = new javax.swing.JLabel();
        lblSITES6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        DV3 = new javax.swing.JTable();
        lblAPK = new javax.swing.JLabel();
        cmbDevice = new javax.swing.JComboBox<>();
        btnGetScreenshot = new javax.swing.JButton();
        btnFindDevice = new javax.swing.JButton();
        btnInstallAll = new javax.swing.JButton();
        btnS3Install = new javax.swing.JButton();
        btnGetAPK = new javax.swing.JButton();
        lblSITES4 = new javax.swing.JLabel();
        txtBolter_Id = new javax.swing.JTextField();
        lblSITES7 = new javax.swing.JLabel();
        txtBolter_Pw = new javax.swing.JTextField();
        btnScreenshotFolder = new javax.swing.JButton();
        btnInstallAPK = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);
        setIconifiable(true);
        setTitle("Android Automation Manager >>> loading, please wait ... ... ... ...");
        setMinimumSize(new java.awt.Dimension(860, 532));
        setName("Android"); // NOI18N
        setVisible(true);
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                Android_AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSITES.setText("Sites");
        lblSITES.setAlignmentX(0.5F);
        getContentPane().add(lblSITES, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 4, 360, -1));

        lblBRANDS.setText("Selected Site - Brands");
        lblBRANDS.setName("lblBRANDS"); // NOI18N
        getContentPane().add(lblBRANDS, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 4, 268, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Scope"));
        jPanel1.setToolTipText("");
        jPanel1.setDoubleBuffered(false);
        jPanel1.setName("Scope"); // NOI18N

        _login.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _login.setSelected(true);
        _login.setText("Admin Login");
        _login.setEnabled(false);
        _login.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _login.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _login.setRequestFocusEnabled(false);

        _all_data.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _all_data.setText("Show all data rows");
        _all_data.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _all_data.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _all_data.setRequestFocusEnabled(false);

        _site_new.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _site_new.setText("New Site (not in Prod)");
        _site_new.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _site_new.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _site_new.setRequestFocusEnabled(false);

        _site.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _site.setText("Sites");
        _site.setContentAreaFilled(false);
        _site.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _site.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        _brand.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _brand.setText("Brand");
        _brand.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _brand.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _brand.setRequestFocusEnabled(false);

        _orders.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _orders.setText("Orders");
        _orders.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _orders.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _orders.setRequestFocusEnabled(false);

        _resent_updates.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _resent_updates.setText("Recent Updates");
        _resent_updates.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _resent_updates.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _resent_updates.setRequestFocusEnabled(false);

        _announcements.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _announcements.setText("Announcements");
        _announcements.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _announcements.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _announcements.setRequestFocusEnabled(false);

        _promo.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _promo.setText("Promo Management");
        _promo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _promo.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _promo.setRequestFocusEnabled(false);

        _sales_reporting.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _sales_reporting.setText("Sales Reporting");
        _sales_reporting.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _sales_reporting.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _sales_reporting.setRequestFocusEnabled(false);

        _users.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _users.setSelected(true);
        _users.setText("Users");
        _users.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _users.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _users.setRequestFocusEnabled(false);

        _password.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _password.setText("Forgot Password");
        _password.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _password.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _password.setRequestFocusEnabled(false);

        _logout.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _logout.setText("User Feedback & Logout");
        _logout.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _logout.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _logout.setRequestFocusEnabled(false);

        _roles.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _roles.setText("Roles Permissions");
        _roles.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _roles.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _roles.setRequestFocusEnabled(false);

        _brand_new.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _brand_new.setText("Add Brand (not in Prod)");
        _brand_new.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _brand_new.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _brand_new.setRequestFocusEnabled(false);

        _smart_analytics.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _smart_analytics.setText("Smart Analytics");
        _smart_analytics.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _smart_analytics.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _smart_analytics.setRequestFocusEnabled(false);

        _group_management.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _group_management.setText("Group Management");
        _group_management.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _group_management.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _group_management.setRequestFocusEnabled(false);

        lblSITES8.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES8.setText("Promo Code");
        lblSITES8.setAlignmentX(0.5F);

        cmbPromo.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N

        lblSITES12.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES12.setText("Meal Plan");
        lblSITES12.setAlignmentX(0.5F);

        cmbMPlan.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N

        _sales_analytics.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _sales_analytics.setText("Sales Analytics");
        _sales_analytics.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _sales_analytics.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _sales_analytics.setRequestFocusEnabled(false);

        _notifications.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _notifications.setText("Notifications");
        _notifications.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _notifications.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _notifications.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbPromo, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSITES8, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSITES12, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMPlan, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(_site, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_smart_analytics)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(_orders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(_brand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(_login, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(_sales_reporting)
                    .addComponent(_sales_analytics))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_notifications, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_resent_updates, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(_promo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                        .addComponent(_group_management, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(_announcements, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(_brand_new)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(_all_data, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(_site_new, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(_users, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_roles, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_password, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_logout))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(_login, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(_site, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(_brand, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_orders, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_resent_updates, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(_announcements, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_group_management, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_sales_reporting, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_sales_analytics, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_promo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_notifications, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_smart_analytics, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(_all_data, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(_site_new, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(_brand_new, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(_users, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(_roles, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(_password, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSITES8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSITES12))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbMPlan, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPromo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {_announcements, _brand, _group_management, _login, _orders, _promo, _resent_updates, _sales_reporting, _site});

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 190, 424, 200));

        DV1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        DV1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV1.setCellSelectionEnabled(true);
        DV1.setGridColor(new java.awt.Color(153, 153, 153));
        DV1.setName("DV1"); // NOI18N
        DV1.setRequestFocusEnabled(false);
        DV1.setRowHeight(18);
        DV1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV1.getTableHeader().setReorderingAllowed(false);
        DV1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(DV1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 20, 424, 164));

        DV2.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV2.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV2.setName("DV2"); // NOI18N
        DV2.setOpaque(false);
        DV2.setRowHeight(18);
        DV2.getTableHeader().setReorderingAllowed(false);
        DV2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(DV2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 20, 420, 120));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Wait (sec):"));

        nWaitElement.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nWaitElement.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.0d, 5.0d, 0.5d));
        nWaitElement.setName("nWaitElement"); // NOI18N

        nWaitLoad.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nWaitLoad.setModel(new javax.swing.SpinnerNumberModel(30.0d, 0.0d, 60.0d, 5.0d));
        nWaitLoad.setName("nWaitLoad"); // NOI18N

        lblSITES9.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES9.setText("Timeout:");
        lblSITES9.setAlignmentX(0.5F);

        lblSITES10.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES10.setText("Element exists:");
        lblSITES10.setAlignmentX(0.5F);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(lblSITES10, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(nWaitElement, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSITES9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(nWaitLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nWaitElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nWaitLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSITES9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSITES10, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 140, -1, -1));

        txtLog.setEditable(false);
        txtLog.setColumns(20);
        txtLog.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtLog.setRows(5);
        txtLog.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtLog.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtLog.setMinimumSize(new java.awt.Dimension(50, 19));
        txtLog.setPreferredSize(null);
        jScrollPane1.setViewportView(txtLog);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 360, 424, 140));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRun.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnRun.setForeground(new java.awt.Color(204, 0, 0));
        btnRun.setText("Run");
        btnRun.setName("btnRun"); // NOI18N
        btnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRunMouseClicked(evt);
            }
        });
        jPanel3.add(btnRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 48, 78, 20));

        btnLog.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnLog.setText(" < Log");
        btnLog.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogMouseClicked(evt);
            }
        });
        jPanel3.add(btnLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 48, 84, 22));

        btnFails.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnFails.setText("Show Fails");
        btnFails.setEnabled(false);
        btnFails.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnFails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFailsMouseClicked(evt);
            }
        });
        jPanel3.add(btnFails, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 28, 84, 20));

        btnExel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnExel.setText("Excel Rep");
        btnExel.setEnabled(false);
        btnExel.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnExel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExelMouseClicked(evt);
            }
        });
        jPanel3.add(btnExel, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 4, 84, 20));

        btnSave_Opt.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnSave_Opt.setText("Save Setup");
        btnSave_Opt.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSave_Opt.setName("btnSAVE"); // NOI18N
        btnSave_Opt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSave_OptMouseClicked(evt);
            }
        });
        jPanel3.add(btnSave_Opt, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 48, 116, 22));

        lblSITES13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES13.setText("Environment:");
        lblSITES13.setAlignmentX(0.5F);
        jPanel3.add(lblSITES13, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 8, 92, 16));

        lblSITES14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES14.setText("Application:");
        lblSITES14.setAlignmentX(0.5F);
        jPanel3.add(lblSITES14, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 8, 92, 16));

        cmbEnv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbEnv.setForeground(new java.awt.Color(0, 0, 204));
        cmbEnv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEnvItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbEnv, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 24, 116, 20));

        cmbApp.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbApp.setForeground(new java.awt.Color(0, 0, 204));
        cmbApp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAppItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 24, 108, 20));

        _slack.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        _slack.setText("Report to Slack");
        _slack.setToolTipText("");
        _slack.setRequestFocusEnabled(false);
        jPanel3.add(_slack, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 52, 100, 14));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 428, 416, -1));

        txtMobile_Id.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtMobile_Id.setText("cdl.test.xtt@gmail.com");
        getContentPane().add(txtMobile_Id, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 392, 188, -1));

        txtMobile_Pw.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtMobile_Pw.setText("Password1");
        getContentPane().add(txtMobile_Pw, new org.netbeans.lib.awtextra.AbsoluteConstraints(756, 392, 92, -1));

        lblSITES3.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES3.setText("Mobile User:");
        lblSITES3.setToolTipText("");
        lblSITES3.setAlignmentX(0.5F);
        getContentPane().add(lblSITES3, new org.netbeans.lib.awtextra.AbsoluteConstraints(456, 396, 76, -1));

        lblSITES6.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES6.setText("PW:");
        lblSITES6.setAlignmentX(0.5F);
        getContentPane().add(lblSITES6, new org.netbeans.lib.awtextra.AbsoluteConstraints(728, 396, -1, -1));

        DV3.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV3.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV3.setName("DV2"); // NOI18N
        DV3.setOpaque(false);
        DV3.setRowHeight(18);
        DV3.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(DV3);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 204, 424, 80));

        lblAPK.setText("Builds / APK");
        lblAPK.setAlignmentX(0.5F);
        getContentPane().add(lblAPK, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 188, 360, -1));

        cmbDevice.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        cmbDevice.setForeground(new java.awt.Color(0, 51, 204));
        cmbDevice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDeviceItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbDevice, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 336, 256, 20));

        btnGetScreenshot.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnGetScreenshot.setText("Take SreenShot");
        btnGetScreenshot.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnGetScreenshot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGetScreenshotMouseClicked(evt);
            }
        });
        getContentPane().add(btnGetScreenshot, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 312, 104, 20));

        btnFindDevice.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnFindDevice.setText("Find Connected Device(s) >");
        btnFindDevice.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnFindDevice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFindDeviceMouseClicked(evt);
            }
        });
        getContentPane().add(btnFindDevice, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 336, 156, 20));

        btnInstallAll.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnInstallAll.setText("Install All from App Tester ");
        btnInstallAll.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnInstallAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInstallAllMouseClicked(evt);
            }
        });
        getContentPane().add(btnInstallAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 288, 148, 20));

        btnS3Install.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnS3Install.setText("Install Selected S3 Build ^");
        btnS3Install.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnS3Install.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnS3InstallMouseClicked(evt);
            }
        });
        getContentPane().add(btnS3Install, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 288, 156, 20));

        btnGetAPK.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnGetAPK.setText("Get Build from Device");
        btnGetAPK.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnGetAPK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGetAPKMouseClicked(evt);
            }
        });
        getContentPane().add(btnGetAPK, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 312, 156, 20));

        lblSITES4.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES4.setText("Bolter User:");
        lblSITES4.setToolTipText("");
        lblSITES4.setAlignmentX(0.5F);
        getContentPane().add(lblSITES4, new org.netbeans.lib.awtextra.AbsoluteConstraints(456, 416, 76, -1));

        txtBolter_Id.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtBolter_Id.setText("cdl.test.xtt+rn@gmail.com");
        getContentPane().add(txtBolter_Id, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 412, 188, -1));

        lblSITES7.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES7.setText("PW:");
        lblSITES7.setAlignmentX(0.5F);
        getContentPane().add(lblSITES7, new org.netbeans.lib.awtextra.AbsoluteConstraints(728, 416, -1, -1));

        txtBolter_Pw.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtBolter_Pw.setText("Password1");
        getContentPane().add(txtBolter_Pw, new org.netbeans.lib.awtextra.AbsoluteConstraints(756, 412, 92, -1));

        btnScreenshotFolder.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnScreenshotFolder.setText("SreenShots Folder");
        btnScreenshotFolder.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnScreenshotFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnScreenshotFolderMouseClicked(evt);
            }
        });
        getContentPane().add(btnScreenshotFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 312, 148, 20));

        btnInstallAPK.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnInstallAPK.setText("Install Build file...");
        btnInstallAPK.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnInstallAPK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInstallAPKMouseClicked(evt);
            }
        });
        getContentPane().add(btnInstallAPK, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 288, 104, 20));

        getAccessibleContext().setAccessibleName("Android");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DV1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV1MouseClicked
        if (d1LastRow == DV1.getSelectedRow() || DV1.getRowCount() == 0) {
           return;
        }
        SITE = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 0));
        SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
        COUNTRY = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 2));
        d1LastRow = DV1.getSelectedRow(); 
        GetBrands();
    }//GEN-LAST:event_DV1MouseClicked

    private void Android_AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_Android_AncestorAdded
        jPanel1.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent arg0) {
                Load_Form();
            }
            @Override
            public void componentMoved(ComponentEvent arg0) {
                //System.err.println("componentMoved");
            }
            @Override
            public void componentShown(ComponentEvent arg0) {
                //System.err.println("componentShown");
            }
            @Override
            public void componentHidden(ComponentEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }//GEN-LAST:event_Android_AncestorAdded
    private void Load_Form(){   
//        String X = Func.ExecuteCmdProcessBuilder("ls -l", CWD, true, true).trim();
//        //String X = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb devices", "", true, true).trim();
//        txtLog.append("-Test X " + X + "\r\n");
//        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        Load = true; 
        if(WsOS.toLowerCase().contains("windows")){
            ADB_HOME = "";    
        }else{
            ADB_HOME = System.getenv("HOME") + File.separator + "Library" + File.separator + "Android"+ File.separator + "sdk" + File.separator + "platform-tools" + File.separator;     
        }
        Get_S3_MOB_Credentials();              

        cmbApp.addItem("Boost");
        cmbApp.addItem("Bolter");
        cmbApp.addItem("JJKitchen");
        cmbApp.addItem("Nourish");
        cmbApp.addItem("Rogers");;
        cmbApp.addItem("Thrive");

        cmbEnv.addItem("Staging");
        cmbEnv.addItem("Production");
        cmbEnv.addItem("Development");
     
        cmbEnv.setSelectedIndex(0); // 2 Select Development
        cmbApp.setSelectedIndex(0);
        
        Load = false;
        LOAD_ENV();
        app = cmbApp.getSelectedItem().toString();
        CONFIG = false;  
        FindConnectedDevices();
        CheckDevice();
        CheckAppPackage(); // ========   Check selected app version
        this.setTitle("Android Automation Manager");
    }
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        F_COUNT--;
        if(BW1 != null && !BW1.isCancelled()) {
            BW1.cancel(true);
        }
    }//GEN-LAST:event_formInternalFrameClosed

    private void DV2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV2MouseClicked
        if (d2LastRow == DV2.getSelectedRow() || DV2.getRowCount() == 0) {
           return;
        }
        d2LastRow = DV2.getSelectedRow(); 
        BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
        Location = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 1));
    }//GEN-LAST:event_DV2MouseClicked
    private void cmbAppItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAppItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            cmbApp.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            this.setTitle("Android Automation Manager >>> Changing Application,  please wait...");
            app = cmbApp.getSelectedItem().toString();

            GetSites();
            GetPackages(AWS_credentials);
            Set_Mobile_Package_Name();
            CheckAppPackage(); // ========   Check selected app version

            this.setTitle("Android Automation Manager");
            cmbApp.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            if(app == "Bolter"){
                jPanel1.setVisible(false);
            }else{
                jPanel1.setVisible(true);  
            }
        }
    }//GEN-LAST:event_cmbAppItemStateChanged
    private void cmbEnvItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEnvItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            cmbEnv.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            this.setTitle("Android Automation Manager >>> Changing Environment,  please wait...");
            LOAD_ENV();
            this.setTitle("Android Automation Manager");
            cmbEnv.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_cmbEnvItemStateChanged
    private void btnSave_OptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSave_OptMouseClicked
        SAVE_CONFIG();
    }//GEN-LAST:event_btnSave_OptMouseClicked
    private void btnExelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExelMouseClicked
        if(!btnExel.isEnabled()) {return;}
        btnExel.setEnabled(false);
        Report(true);
        btnExel.setEnabled(true);
    }//GEN-LAST:event_btnExelMouseClicked
    private void btnFailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFailsMouseClicked
        if(!btnFails.isEnabled()) {return;}
        String R = Func.SHOW_LOG_FILE(F, "txt");
        if(!R.equals("OK")){
            txtLog.append(R + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
    }//GEN-LAST:event_btnFailsMouseClicked
    private void btnLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogMouseClicked
        String R = Func.SHOW_LOG_FILE(txtLog.getText(), "txt");
        if(!R.equals("OK")){
            txtLog.append(R + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
    }//GEN-LAST:event_btnLogMouseClicked
    private void btnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRunMouseClicked
        if(!btnRun.isEnabled()){
            return;
        }
        btnRun.setEnabled(false);
        btnFails.setEnabled(false);
        btnExel.setEnabled(false);
        //txtLog.setText("");
        txtLog.append("=== Execution started @" + LocalDateTime.now().format(Time_12_formatter) + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        WaitForElement = Math.round((double)nWaitElement.getValue() *1000);
        LoadTimeOut = (double)nWaitLoad.getValue();

        EX = "";
        F = "";
        t_calls = 0;
        t_min =  0;
        t_avg = 0;
        t_max =  0;
        p_50 = 0;
        p_90 = 0;
        _t = 0; // Total
        _p = 0; // Passed
        _f = 0; // Failed
        _w = 0; // Warn
        r_time = "";

        Mobile_ID = txtMobile_Id.getText();
        Mobile_PW = txtMobile_Pw.getText();
        Bolter_ID = txtBolter_Id.getText();
        Bolter_PW = txtBolter_Pw.getText();
        ALL_DATA = _all_data.isSelected();

        SCOPE = "";

        if(DV1.getRowCount() > 0) {
            SITE = DV1.getValueAt(DV1.getSelectedRow(), 0).toString();
            platform = DV1.getValueAt(DV1.getSelectedRow(), 1).toString(); // platform
            COUNTRY = DV1.getValueAt(DV1.getSelectedRow(), 2).toString();
        }
        if(DV2.getRowCount() > 0) {
            BRAND = DV2.getValueAt(DV2.getSelectedRow(), 0).toString();
        }


        txtLog.append("=== Starting Android Driver..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());

        r_type = "ad-hoc";

        if(sw1.isRunning()){
            sw1.reset();
        }
        sw1.start();

        if(AndroidDriver()){
            txtLog.append("=== Android Driver Started in " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
            sw1.reset();
            LOG_START(); // ========================================================
            
            BW1_DoWork(
                // parameters?
            );
        }
    }//GEN-LAST:event_btnRunMouseClicked
    private void btnGetScreenshotMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGetScreenshotMouseClicked
        if(!btnGetScreenshot.isEnabled()){
            return;
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLog.append("-Take Screenshot..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        File SCREEN = null;
        String SS = "";
        try {  
            String file = CWD + File.separator + "ScreenShots" + File.separator + "Mobile_Screen_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMdd_hhmmss")) + ".png";
            SCREEN = new File(file);                      // -d " + devID
            SS = Func.ExecuteCmdProcessBuilder((ADB_HOME + "adb exec-out screencap -p > " + file).trim(), CWD, true, true).trim();
            Thread.sleep(3000);
            txtLog.append(SS + "\r\n");
            txtLog.append("= ScreenShot > " + file + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
        catch (InterruptedException ex) {
            txtLog.append("= ScreenShot > " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
        try {
            java.awt.Desktop.getDesktop().edit(SCREEN);
        }
        catch (IOException ex) {
            txtLog.append("= Show last ScreenShot >  " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnGetScreenshotMouseClicked
    private void btnFindDeviceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFindDeviceMouseClicked
        FindConnectedDevices();
        CheckDevice();
        CheckAppPackage(); // ========   Check selected app version
    }//GEN-LAST:event_btnFindDeviceMouseClicked
    private void btnInstallAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInstallAllMouseClicked
        if(!btnInstallAll.isEnabled()){
            return;
        }
        InstallAllAppTester();
    }//GEN-LAST:event_btnInstallAllMouseClicked
    private void btnS3InstallMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnS3InstallMouseClicked
        if(!btnS3Install.isEnabled()){
            return;
        }
        InstallBuild_S3();
    }//GEN-LAST:event_btnS3InstallMouseClicked
    private void btnGetAPKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGetAPKMouseClicked
        if(!btnGetAPK.isEnabled()){
            return;
        }
         Object[] options = {"Yes", "No"};
        int reply = JOptionPane.showOptionDialog(this,
            "Pull " + app + " " + appVersion + " APK file from " + devModel + " device to your desktop?" + "\r\n" +
            "Existing " + app + " " + appVersion + " file will be replaced",
            "Pull APK file",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            "No"); // options[1]
        if (reply == 1){
            return;
        }       
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR)); 
        btnRun.setEnabled(false);
        btnGetScreenshot.setEnabled(false);
        btnGetAPK.setEnabled(false);
        btnS3Install.setEnabled(false);
        btnInstallAll.setEnabled(false); 
        btnInstallAPK.setEnabled(false);
        txtLog.append("-Get APK..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
       
        try {
            //String R = Func.ExecuteCmdRuntime(ADB_HOME + "adb -s " + devID + " shell pm path " + appPackage);
            String R = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb -s " + devID + " shell pm path " + appPackage, CWD, true, true).trim();
            txtLog.append(R.trim() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
            
            String where = System.getProperty("user.home") + File.separator + "Desktop";
            //R = Func.ExecuteCmdRuntime(ADB_HOME + "adb -s " + devID + " pull " + R.trim().substring(R.indexOf(":") + 1) + " " + where);
            R = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb -s " + devID + " pull " + R.trim().substring(R.indexOf(":") + 1) + " " + where, where, true, true).trim();
            txtLog.append(R.trim() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());

            Files.move(Paths.get(where + File.separator + "base.apk"), Paths.get(where + File.separator + app + "_" + appVersion + ".apk"), java.nio.file.StandardCopyOption.REPLACE_EXISTING );
            
            txtLog.append("File Saved: " + where + File.separator + app + "_" + appVersion + ".apk" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());            
        } catch (IOException ex) {
            txtLog.append("=== Get APK > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        btnRun.setEnabled(true);
        btnGetScreenshot.setEnabled(true);
        btnGetAPK.setEnabled(true);
        btnS3Install.setEnabled(true);
        btnInstallAll.setEnabled(true); 
        btnInstallAPK.setEnabled(true);
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));         
    }//GEN-LAST:event_btnGetAPKMouseClicked
    private void cmbDeviceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDeviceItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            CheckDevice();
        }
    }//GEN-LAST:event_cmbDeviceItemStateChanged
    private void btnScreenshotFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnScreenshotFolderMouseClicked
        try{     
            String dir = CWD + File.separator + "ScreenShots"; 
            Desktop.getDesktop().open(new File(dir));            
        } catch (IOException ex) {
            txtLog.append("=== Open ScreenShots Folder > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        } 
    }//GEN-LAST:event_btnScreenshotFolderMouseClicked
    private void btnInstallAPKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInstallAPKMouseClicked

        File selectedFile = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(CWD + File.separator + "MobileBuilds"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR)); 
            selectedFile = fileChooser.getSelectedFile();
            InstallBuild(selectedFile.getAbsolutePath());
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
        }
    }//GEN-LAST:event_btnInstallAPKMouseClicked

    private void FindConnectedDevices(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR)); 
        btnRun.setEnabled(false);
        btnGetScreenshot.setEnabled(false);
        btnGetAPK.setEnabled(false);
        btnS3Install.setEnabled(false);
        btnInstallAll.setEnabled(false); 
        btnInstallAPK.setEnabled(false);
        Load = true;  
        cmbDevice.removeAllItems();
        txtLog.append("-Find Attached Android Devices ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());

        String Dev  = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb devices -l", ADB_HOME, true, true).trim();
        String[] dev = Dev.split("\r\n");
        if (dev.length > 2) {
            for (int i = 1; i < dev.length; i++) {
                String D = dev[i];
                if(D.contains("model")){
                    String ID = D.substring(0, dev[i].indexOf(" ")).trim();
                    D = D.substring(D.indexOf("model:") + 6);
                    D = D.substring(0, D.indexOf(" ")).trim();
                    cmbDevice.addItem(D + "  id:" + ID);
                }
            }
            txtLog.append("=== " + Dev + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());                
            btnRun.setEnabled(true);
            if(cmbDevice.getItemCount() == 1){
                btnGetScreenshot.setEnabled(true); 
            } else{
                btnGetScreenshot.setEnabled(false); 
            }
            btnRun.setEnabled(true);
            btnGetAPK.setEnabled(true);
            btnS3Install.setEnabled(true);
            btnInstallAll.setEnabled(true); 
            btnInstallAPK.setEnabled(true);
        } else {
            cmbDevice.addItem("noDevice");
            txtLog.append("=== No Attached Device(s) found" + "\r\n" + "Return from 'adb devices -l' > '" + Dev + "'" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());             
        }
        Load = false; 
        cmbDevice.setSelectedIndex(0);
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));     
    } 
    private void CheckDevice(){
        devID = "";
        devModel = "";
        String D = cmbDevice.getSelectedItem().toString();
        if(D.contains("id:")){
            txtLog.append("-Check Selected Device..." + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            devModel = D.substring(0,D.indexOf(" ")).trim(); 
            devID = D.substring(D.indexOf("id:") + 3).trim();        
            //devOS = Func.ExecuteCmdRuntime(ADB_HOME + "adb -s " + devID + " shell getprop ro.build.version.release").trim();
            devOS = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb -s " + devID + " shell getprop ro.build.version.release", CWD, true, true).trim();
            devOS = devOS.replace("null", "");
            txtLog.append("=== Model: " + devModel + ", OS version: " + devOS + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }         
    }
    private void CheckAppPackage(){
        if(Load){
            return;
        }
        String D = cmbDevice.getSelectedItem().toString();
        if(!D.contains("id:")){
            return;
        } 
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR)); 
        txtLog.append("-Check AppPackage: " + appPackage + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        //String Hash = "Not Found";
        String v1 = "?";
        String v2 = "?";
        appVersion = "Not Found";
        try{
            //String v = Func.ExecuteCmdRuntime(ADB_HOME + "adb -s " + devID + " shell dumpsys package " + appPackage).trim();
            String v = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb -s " + devID + " shell dumpsys package " + appPackage, CWD, true, true).trim();

            if ("".equals(v.trim())) {
                txtLog.append("=== appPackage  " + appPackage + " - no information\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength());
                this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
                return;
            }
//            if(v.contains("pkg=Package{")){
//                Hash = v.substring(v.indexOf("pkg=Package{") + 12); // // pkg=Package{f2241b0 com.compass_canada.boost}  <<<< hash ??
//                Hash = Hash.substring(0, Hash.indexOf(" ")).trim();                
//            }
            if(v.contains("versionName") && v.contains("versionCode")) {
                v1 = v.substring(v.indexOf("versionName"));
                v1 = v1.substring(0, v1.indexOf("\r\n"));
                v1 = v1.substring(v1.indexOf("=") + 1).trim();
                v2 = v.substring(v.indexOf("versionCode"));
                v2 = v2.substring(0, v2.indexOf("\r\n"));
                v2 = v2.substring(v2.indexOf("=") + 1);
                v2 = v2.substring(0, v2.indexOf(" "));
                appVersion = "v" + v1 + "(" + v2 + ")"; // Git Hash: " + Hash;
            }
            txtLog.append("=== appPackage: " + appPackage + " > " + appVersion + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());  
        } catch (Exception ex) {
            txtLog.append("-GetAppVersion: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());      
        } 
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));          
    }

    private void InstallBuild_S3(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));  
        txtLog.append("-S3 Download, Unzip, Install APK ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        
        if(Download_Build()){
            if(Unzip_Build()){
                UnInstaPackage(appPackage);
                String BuildPath = System.getProperty("user.dir") + File.separator + "MobileBuilds" + File.separator + appBuldFile;
                InstallBuild(BuildPath);
            }
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));     
    }
    private boolean Download_Build(){
        txtLog.append("== Download_Build > " + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());      
        String dir = CWD + File.separator + "MobileBuilds"; 
        String S = String.valueOf(DV3.getValueAt(DV3.getSelectedRow(), 0));
        try {                        
            AmazonS3 s3client = AmazonS3ClientBuilder
                    .standard()
                    .withCredentials(new AWSStaticCredentialsProvider(AWS_credentials))
                    .withRegion(Regions.US_EAST_1)
                    .build();
            S3Object s3object = s3client.getObject("mobile-app-repos", S);
            S3ObjectInputStream inputStream = s3object.getObjectContent();
            FileUtils.copyInputStreamToFile(inputStream, new File(dir + File.separator + "x.zip"));
            txtLog.append("== Build " + S + "\r\n" + "downloaded in " + dir + " as x.zip" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            return true;
        } catch (SdkClientException | IOException ex) {
            txtLog.append("== " + "Download_Build: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            return false;
        }
    }    
    private boolean Unzip_Build (){
        txtLog.append("== Unzip_Build > " + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());             
        String dir = CWD + File.separator + "MobileBuilds"; 
        File zip_source = new File(dir + File.separator + "x.zip");
        File destDir = new File(dir);
        byte[] buffer = new byte[1024];
        try {
            try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zip_source))) {
                ZipEntry zipEntry = zis.getNextEntry();
                appBuldFile = zipEntry.getName();
                while (zipEntry != null) {
                    File newFile = newUnzipFile(destDir, zipEntry);
                    if (zipEntry.isDirectory()) {
//                        txtLog.append("== " + newFile + " is directory" + "\r\n");
//                        txtLog.setCaretPosition(txtLog.getDocument().getLength());
                    } else { // fix for Windows-created archives
                        File zipParent = newFile.getParentFile(); 
//                        txtLog.append("== " + zipParent + " is Directory" + "\r\n");
//                        txtLog.setCaretPosition(txtLog.getDocument().getLength());   

                        if (!zipParent.isDirectory() && !zipParent.mkdirs()) {
                            txtLog.append("== " + "Failed to create directory " + zipParent + "\r\n");
                            txtLog.setCaretPosition(txtLog.getDocument().getLength());
                        }

                        FileOutputStream fos = new FileOutputStream(newFile);
                        int len;
                        while ((len = zis.read(buffer)) > 0) {
                            fos.write(buffer, 0, len);
                        }
                        fos.close();
                    }
                    zipEntry = zis.getNextEntry();
                }
                zis.closeEntry();
                zis.close();
            }

            txtLog.append("== " + "Unzipped Build: " + appBuldFile + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            return true; 
        } catch (IOException ex) {
            txtLog.append("== " + "Unzip_Build: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            return false;
        }
    }      
    private static File newUnzipFile(File destinationDir, ZipEntry zipEntry) throws IOException {
        File destFile = new File(destinationDir, zipEntry.getName());

        String destDirPath = destinationDir.getCanonicalPath();
        String destFilePath = destFile.getCanonicalPath();

        if (!destFilePath.startsWith(destDirPath + File.separator)) {
            throw new IOException("Entry is outside of the target dir: " + zipEntry.getName());
        }
        return destFile;
    }

    private void UnInstaPackage(String PKG) {
        txtLog.append("== UnInstall Package " + PKG + " > " + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        String I = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb -s " + devID + " uninstall " + PKG, CWD, true, true).trim();
        txtLog.append(I + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
    } 
    private void InstallBuild(String BuildFile) {
        txtLog.append("== Install Build: " + BuildFile + " > " + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        String I = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb -s " + devID + " install -r " + BuildFile, CWD, true, true).trim();
        txtLog.append(I + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        CheckAppPackage();
    }  

    private void InstallAllAppTester() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR)); 
        btnRun.setEnabled(false);
        btnGetScreenshot.setEnabled(false);
        btnGetAPK.setEnabled(false);
        btnS3Install.setEnabled(false);
        btnInstallAll.setEnabled(false); 
        btnInstallAPK.setEnabled(false);        
        txtLog.append("-Install All APK(s) - App Tester ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        
        Swipe_WakeUp(); // ===================  
        
        try {
            if(sw1.isRunning()){
                sw1.reset();
            }
            sw1.start();  

            DesiredCapabilities  cap = new DesiredCapabilities ();
            cap.setCapability("platformName", "Android");
            cap.setCapability("deviceName", devModel);
            cap.setCapability("platformVersion", devOS);
            cap.setCapability("clearSystemFiles", true);
            cap.setCapability("appPackage", "dev.firebase.appdistribution");
            cap.setCapability("appActivity", "dev.firebase.appdistribution.main.MainActivity");
            cap.setCapability("udid", devID);
            cap.setCapability("autoGrantPermissions", false); // false- always get prompt
            cap.setCapability("unicodeKeyboard", false);
            cap.setCapability("resetKeyboard", false);
            cap.setCapability("automationName", Automator);  // ============ UiAutomator2 / Appium ===========
            cap.setCapability("systemPort", systemPort);
            
            appiumService = AppiumDriverLocalService.buildDefaultService();
            appiumService.start();
            ad = new AndroidDriver(new URL(appium_url), cap);             
            ad.manage().timeouts().implicitlyWait(WaitForElement, TimeUnit.MILLISECONDS);
            
            fluentWait = new FluentWait(ad).withTimeout(Duration.ofMillis(WaitForElement))			
			.pollingEvery(Duration.ofMillis(200))  			
			.ignoring(NoSuchElementException.class);        // fluentWait for Visible / Clickable   
            wait = new WebDriverWait(ad, (long) LoadTimeOut);                // for load > progress 
            
            txtLog.append("=== Android Driver Started in " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
            sw1.reset();
            
            try{
                wait.until(ExpectedConditions.presenceOfElementLocated(By.id("signInButton")));
                ad.findElement(By.id("signInButton")).click();
                wait.until(ExpectedConditions.presenceOfElementLocated(By.id("com.google.android.gms:id/account_name")));
                ad.findElement(By.id("com.google.android.gms:id/account_name")).click();
            } catch (Exception ex) {
                txtLog.append("=== 'Sign In...' ERROR - " + ex.getMessage()  + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength());
            }

            wait.until(ExpectedConditions.presenceOfElementLocated(By.id("app_name")));
            Thread.sleep(1000);
            L0 = ad.findElements(By.id("app_name"));
            int app_count = L0.size();
            if (app_count > 0) {
                txtLog.append("Found Applications - total " + app_count + ": " + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength());
                for (int i = 0; i < L0.size(); i++) {
                    txtLog.append("   - " + (i+1)  + ": " + L0.get(i).getText() + "\r\n");
                    txtLog.setCaretPosition(txtLog.getDocument().getLength());
                }
                for (int i = 0; i < app_count; i++) {
                    e = ad.findElements(By.id("app_name")).get(i); 
                    String appName = e.getText();
                    e.click();
                    String t = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("version_info"))).getText();
                    txtLog.append("=====  Processing App " + (i + 1) + " - " + appName + " v:" + t + " ..." + "\r\n");
                    txtLog.setCaretPosition(txtLog.getDocument().getLength());
                    try {
                        ad.findElement(By.id("download_button")).click();
                        try {

                            wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("progress_bar")));
                            wait.until(ExpectedConditions.presenceOfElementLocated(By.id("com.android.packageinstaller:id/ok_button")));
                            ad.findElement(By.id("com.android.packageinstaller:id/ok_button")).click();
                            wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("progress_bar")));
                            t = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("installed_version_info"))).getText();
                            txtLog.append("- " + t  + "\r\n");
                            txtLog.setCaretPosition(txtLog.getDocument().getLength());
                            ad.findElement(By.id("back_arrow")).click(); 
                            wait.until(ExpectedConditions.presenceOfElementLocated(By.id("app_name")));
                        } catch(Exception ex) {
                            txtLog.append("Download/Install failed: " + ex.getMessage() + "\r\n");
                            txtLog.setCaretPosition(txtLog.getDocument().getLength());
                        }
                    } catch (Exception ex){
                        txtLog.append("No Download button found" + "\r\n");
                        ad.findElement(By.id("back_arrow")).click();
                        wait.until(ExpectedConditions.presenceOfElementLocated(By.id("app_name")));
                    }
                }
            } else {
                txtLog.append("=== " + "No Applications found" + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength());
            } 
        } catch (Exception ex) {
            txtLog.append("=== App Tester ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }            
        if(ad != null) {
            ad.quit(); 
        }
        if(appiumService != null && appiumService.isRunning()){
            appiumService.stop();                    
        }
        
        btnRun.setEnabled(true);
        btnGetScreenshot.setEnabled(true);
        btnGetAPK.setEnabled(true);
        btnS3Install.setEnabled(true);
        btnInstallAll.setEnabled(true); 
        btnInstallAPK.setEnabled(true);        
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));         
    }       

    private boolean AndroidDriver() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try {
            DesiredCapabilities  cap = new DesiredCapabilities ();
            cap.setCapability("platformName", "Android");
            cap.setCapability("deviceName", devModel);
            cap.setCapability("platformVersion", devOS);
            cap.setCapability("clearSystemFiles", true);
            cap.setCapability("appPackage", appPackage);
            cap.setCapability("appActivity", appActivity);
            cap.setCapability("udid", devID);
            cap.setCapability("autoGrantPermissions", false); // false- always get prompt
            cap.setCapability("unicodeKeyboard", false);
            cap.setCapability("resetKeyboard", true);
            cap.setCapability("sendKeyStrategy", "oneByOne");
            cap.setCapability("automationName", Automator);  // ============ UiAutomator2 / Appium ===========
            cap.setCapability("systemPort", systemPort);

            appiumService = AppiumDriverLocalService.buildDefaultService();
            appiumService.start();
            ad = new AndroidDriver(new URL(appium_url), cap);             
            ad.manage().timeouts().implicitlyWait(WaitForElement, TimeUnit.MILLISECONDS);
            
            fluentWait = new FluentWait(ad).withTimeout(Duration.ofMillis(WaitForElement))			
			.pollingEvery(Duration.ofMillis(200))  			
			.ignoring(NoSuchElementException.class);        // fluentWait for Visible / Clickable   
            wait = new WebDriverWait(ad, (long) LoadTimeOut);                // for load > progress 
            
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return true;
        } catch (Exception ex) {
            txtLog.append("=== Android Driver > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return false;
        }   
    }
    private void Swipe_WakeUp(){       
        txtLog.append("-Swipe_WakeUp " + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());  
        String v = Func.ExecuteCmdProcessBuilder(ADB_HOME + "adb -s " + devID + " shell input touchscreen swipe 800 400 400 400 100", CWD, false, false);    
    }
    private void BW1_DoWork(){ 
        BW1 = new SwingWorker() {             
            Instant dw_start = Instant.now();
            @Override
            protected String doInBackground() throws Exception   { // define what thread will do here 
            New_ID = "9" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMddHHmm"));          
                if (app.equals("Bolter")) { 
                    Android_bolter.run();
                }else{
                    Android_coreapp.run();
                }
               
                if(_f > 0) {
                    return "=== Execution finished @" + LocalDateTime.now().format(Time_12_formatter) + " with " + _f + " FAIL(s)";
                }else{
                    return "=== Execution finished @" + LocalDateTime.now().format(Time_12_formatter);  
                } 
            }  
            @Override
            protected void done() { 
                Report_Date = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd_MMM_yyyy_hh_mma"));
                txtLog.append("========   " + "Execution step-by-step log..." + "   ========" + "\r\n");  
                txtLog.setCaretPosition(txtLog.getDocument().getLength());
                EX = "Android " + app + " " + env + ", vervion: " + appVersion + ", Device: " + devModel + " OS version: " + devOS +
                " - Steps: " + _t + ", Passed: " + _p + ", Warnings: " + _w + ", Failed: " + _f + ". Scope: " + SCOPE + "\r\n" +
                 "#\tTC\tTarget/Element/Input\tExpected/Output\tResult\tComment/Error\tResp\tTime\tJIRA\r\n"
                 + EX;
                txtLog.append("" + EX.replaceAll("\t", " > ") + "\r\n"); 
                txtLog.setCaretPosition(txtLog.getDocument().getLength());
                Last_EX = EX;
                try  { 

                    String statusMsg = (String) get(); 
                    txtLog.append("" + statusMsg + "\r\n");
                    txtLog.setCaretPosition(txtLog.getDocument().getLength());
                    
                    BW1 = null;
                 
                }  
                catch (InterruptedException | ExecutionException ex)  { 
                    txtLog.append("- Exception: " + ex.getMessage() + "\r\n"); 
                    txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
                } 
                if(ad != null) {
                    ad.quit(); 
                }
                if(appiumService != null && appiumService.isRunning()){
                    appiumService.stop();                    
                }

                DD = Duration.between(dw_start, Instant.now());
                Summary = "Steps: " + _t + ", Passed: " + _p + ", Failed: " + _f + ", Warnings: " + _w;
                
                try {
                    String t_rep = "";
                    if (!"".equals(r_time.trim())) {
                        double[] am0 = Arrays.stream(r_time.split(";")).mapToDouble(Double::parseDouble).toArray();
                        if (am0.length > 0) {
                            Arrays.sort(am0);
                            double total = 0;
                            for(int i=0; i < am0.length; i++){
                                total = total + am0[i];
                            }
                            t_calls = am0.length;
                            t_min = am0[0] / (double)1000;
                            t_avg = (total / am0.length) / (double)1000;
                            t_max = am0[am0.length - 1]  / (double)1000; 
                            p_50 = Func.p50(am0) / (double)1000;
                            p_90 = Func.p90(am0) / (double)1000;
                            
                            DecimalFormat df = new DecimalFormat("#.##");
                            t_rep += "=== Total Calls: " + t_calls + ", Response Times (sec) - Min: " + df.format(t_min) +
                                                                        ", Avg: " + df.format(t_avg) +
                                                                        ", Max: " + df.format(t_max) +
                                                                        ", p50: " + df.format(p_50) +
                                                                        ", p90: " + df.format(p_90);
                        }
                        txtLog.append("" + t_rep + "\r\n");
                        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
                    }
                } catch(Exception ex){
                    txtLog.append("=== LOG_UPDATE > Call Times parsing ERROR: " + ex.getMessage() + "\r\n");
                    txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
                }  
                btnRun.setEnabled(true);

                txtLog.append("=== " + Summary); // Summary shown in EX top
                txtLog.append("=== Scope: " + SCOPE); // SCOPE shown in EX top
                txtLog.append("=== Android_" + app + "_" + env + ", vervion: " + appVersion + ", Device: " + devModel + " OS version: " + devOS + ", Duration: " + DD.toHours() + "h, " + (DD.toMinutes() % 60) + "m, " + (DD.getSeconds() % 60) + "s" + "\r\n"); 
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
  
                if(!"".equals(F.trim())){
                    btnFails.setEnabled(true);
                } else{
                    btnFails.setEnabled(false);
                }
                btnExel.setEnabled(true);
                
                LOG_UPDATE(); // ========================================================
                
                if(_slack.isSelected()){
                    Report(false); 
                    String MSG = "Android_" + app + "_" + env + " Automation report - " + Report_Date +  
                    "\r\n Machine: " + WsID + " OS: " + WsOS + ", User: *" + UserID + "*\r\n" +
                    "Device: *" + devModel + "*, Duration: " + DD.toHours() + "h, " + (DD.toMinutes() % 60) + "m, " + (DD.getSeconds() % 60) + "s" + "\r\n" +        
                    "Scope: " + SCOPE + "\r\n" +
                    "Steps: " + _t + ", Passed: " + _p + ", *Failed: " + _f + "*, Warnings: " + _w;

                    txtLog.append(Func.Send_File_to_Slack(Report_File, "Androidautomation", MSG + "\r\n"));
                    File f = new File(Report_File);
                    if(f.exists() && !f.isDirectory()) { 
                        f.delete();
                    }
                }
            } 
        }; 
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        BW1.execute();  // executes the swingworker on worker thread 
    }
     
    private void LOAD_ENV(){
        if(cmbEnv.getSelectedItem().toString().contains("Staging")){
            BaseAPI = "https://api.compassdigital.org/staging";
            env = "ST";
            url = "https://staging.adminpanel.compassdigital.org/";
        } else if (cmbEnv.getSelectedItem().toString().contains("Dev")){
            BaseAPI = "https://api.compassdigital.org/dev";
            env = "DE";
            url = "https://dev.adminpanel.compassdigital.org/";
        } else{
            BaseAPI = "https://api.compassdigital.org/v1";
            env = "PR";
            url = "https://adminpanel.compassdigital.org/";
        }     

        LOAD_CONFIG();
        if (CONFIG) {
            Load = true;
            cmbApp.setSelectedItem(app);
            Load = false;
        }
        app = cmbApp.getSelectedItem().toString();
        GetSites();
        Set_Mobile_Package_Name();
        GetPackages(AWS_credentials);
    }
    private void Get_S3_MOB_Credentials(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));         
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            ResultSet rs1 = conn.createStatement().executeQuery("SELECT [_value] FROM[dbo].[keys] WHERE [_key] = 'S3_A_Key_MOB'");
            rs1.next();
            access_key = rs1.getString(1);
            ResultSet rs2 = conn.createStatement().executeQuery("SELECT [_value] FROM[dbo].[keys] WHERE [_key] = 'S3_S_Key_MOB'");
            rs2.next();
            secret_key = rs2.getString(1);
            conn.close();
            AWS_credentials = new BasicAWSCredentials(
                new String(Base64.getDecoder().decode(access_key)),
                new String(Base64.getDecoder().decode(secret_key))
            );  
        } catch (SQLException ex) {
            txtLog.append("= Get_S3_MOB_Credentials > " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
    }
    private void GetPackages(AWSCredentials credentials ){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLog.append("-Load Android Packages list ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        
        String[] SitesColumnsName = {"APK name","Date"}; 
        DefaultTableModel PModel = new DefaultTableModel();
        PModel.setColumnIdentifiers(SitesColumnsName);
        DV3.setModel(PModel);
        
        String BucketName = "";
        String AppPath = "";
        //Android app S3 bucket path
        String mobile_repo_name = "mobile-app-repos";
        String android_app_path_S3_bucket = "automation/android-coreapp/staging/";
        String Dev_android_app_path_S3_bucket = "automation/android-coreapp/daily/";

        //iOS app S3 bucket path
        String Dev_iOS_app_path_S3_bucket = "automation/novus/";
        String Staging_iOS_app_path_S3_bucket = "automation/novus/regression/";
        String Staging_iOS_app_path_S3_bucket_bolter = "automation/bolter/";
        String Prod_iOS_app_path_S3_bucket = "automation/novus/production/";
    
        switch (env) {
            case "PR":
                BucketName = "";
                break;
            case "ST":
                BucketName = "";
                break;
            case "DE":
                BucketName = "";
                break;            
        }
        switch (app) {
            case "Boost":
                AppPath = "";
                break;
            case "Bolter":
                AppPath = "";
                break;
            case "JJKitchen":
                AppPath = "";
                break;            
            case "Nourish":
                AppPath = "";
                break;
            case "Rogers":
                AppPath = "";
                break;
            case "Thrive":
                AppPath = "";
                break; 
        }  
        BucketName =  "mobile-app-repos";//automation
        
        String PName = "";
        Date PDate = new Date();
        String X = "";
        try {
            AmazonS3 s3client = AmazonS3ClientBuilder
                    .standard()
                    .withCredentials(new AWSStaticCredentialsProvider(credentials))
                    .withRegion(Regions.US_EAST_1)
                    .build();
            ListObjectsV2Result PACK_List = s3client.listObjectsV2(BucketName);
            PACK_List.getObjectSummaries().sort(Comparator.comparing(S3ObjectSummary::getLastModified));
            for(int i = PACK_List.getObjectSummaries().size() -1 ; i > 0; i--){  // sort desc, default acs  

                PName = PACK_List.getObjectSummaries().get(i).getKey();
                PDate = PACK_List.getObjectSummaries().get(i).getLastModified();
                if(PName.contains("android-coreapp") || PName.contains("bolter")){
                    X +=  PName + "  -  " + PDate + "\r\n";
                    if(PName.contains(app.toLowerCase())){
                        PModel.addRow(new Object[]{PName, PDate});                              
                    }
                }
            }
            
            DV3.setModel(PModel);
            DV3.setDefaultEditor(Object.class, null);
            DV3.getColumnModel().getColumn(0).setPreferredWidth(240);
            DV3.getColumnModel().getColumn(1).setPreferredWidth(170);
            DV3.changeSelection(0, 1, false, false);
            
            txtLog.append("- BucketName: " + PACK_List.getBucketName() + ", Size: " + PACK_List.getObjectSummaries().size() + "\r\n");
            txtLog.append(X + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        } catch (Exception ex) {
            txtLog.append("== " + "GetPackages: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }     
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    } 
    private void Set_Mobile_Package_Name(){
        appActivity = "io.compassdigital.ca.base.patron.splash.SplashActivity"; 
        if ("Boost".equals(app)) {
            appPackage = "com.compass_canada.boost";
        }
        if ("JJKitchen".equals(app)) {
            appPackage = "io.compassdigital.jjkitchen";
        }
        if ("Thrive".equals(app)) {
            appPackage = "com.compass_canada.thrive";
        }
        if ("Nourish".equals(app)) {
            appPackage = "io.compassdigital.nourish";
        }
        if ("Rogers".equals(app)) {
            appPackage = "com.compass_canada.digital_hospitality.rogers";
        }
        if ("Bolter".equals(app)) {
            appPackage = "io.compassdigital.delivery";
        }
    }
    private void GetSites() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        d1LastRow = -1;
        txtLog.append("-Load Sites ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        if(sw1.isRunning()){
            sw1.reset();
        }
        sw1.start();        

        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [id] FROM[dbo].[p2_app] WHERE [app] = '" + cmbApp.getSelectedItem().toString() +
                    "' AND [env] LIKE '" + cmbEnv.getSelectedItem().toString() + "%'");
            rs.next();
            appId = rs.getString(1);
            conn.close();
        } catch (SQLException ex) {
            txtLog.append("=== Get " + cmbApp.getSelectedItem().toString() + " App_ID > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        String[] SitesColumnsName = {"Site","Platform","Country","Id"}; 
        DefaultTableModel SitesModel = new DefaultTableModel();
        SitesModel.setColumnIdentifiers(SitesColumnsName);
        DV1.setModel(SitesModel);
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(DV1.getModel());
        DV1.setRowSorter(sorter);
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);  
        sorter.setSortable(0, false); 
               
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/multigroup/" + appId);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + response.getStatusLine().getStatusCode() + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            
            String site;
            String country;
            String id;
            JSONObject addresses;
            JSONObject meta;

            JSONArray Groups = json.getJSONArray("groups");
            for (int i = 0; i < Groups.length(); i++) {
                site = "";
                country = "null";
                id = "null";
                addresses = null;
                meta = null;
                platform = "DH";
                JSONObject object = Groups.getJSONObject(i);
                if(object.has("name")){
                    site = object.getString("name");   
                } 
                if(object.has("id")){
                    id = object.getString("id");
                } 
                if(object.has("meta")){
                    meta = object.getJSONObject("meta");
                    if (meta.has("migrated") && meta.getBoolean("migrated")){
                        platform = "CDL migrated";
                    }
                }              
                if (id.length() > 50) {
                    platform = "CDL";
                } 

                if(object.has("address")){
                    addresses = object.getJSONObject("address");
                }  
                if(addresses != null && addresses.has("country")){
                    country = addresses.getString("country");   
                }
                SitesModel.addRow(new Object[]{site, platform, country, id});
            }
            DV1.setModel(SitesModel);
            DV1.setDefaultEditor(Object.class, null);
            DV1.getColumnModel().getColumn(0).setPreferredWidth(250);
            DV1.getColumnModel().getColumn(1).setPreferredWidth(70);
            DV1.getColumnModel().getColumn(2).setPreferredWidth(50);
            DV1.getColumnModel().getColumn(3).setPreferredWidth(400);
            
            sorter.setSortable(0, true); 
            sorter.sort(); 
   
        } catch (IOException | JSONException ex) {
            txtLog.append("- Exception: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());      
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLog.append("- Exception: " + ex.getMessage() + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength());    
            }
        }
        txtLog.append("== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        sw1.reset();
        
        if (DV1.getRowCount() > 0) {
            DV1.changeSelection(0, 0, false, false);
            if (CONFIG && !"".equals(SITE.trim())) {
                for(int row = 0; row < DV1.getRowCount(); row++) {
                    if(DV1.getValueAt(row, 0).equals(SITE)){
                        DV1.changeSelection(row, 0, false, false);
                        break;
                    }
                }
            }
            SITE = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 0));
            SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
            GetBrands();
        }
        lblSITES.setText(app + " Sites (" + DV1.getRowCount() + " found)");
                this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetBrands() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        d2LastRow = -1;
        txtLog.append("-Load Brands ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        if(sw1.isRunning()){
            sw1.reset();
        }
        sw1.start();        
     
        String[] BrandsColumnsName = {"Station","Location","Brand Id", "Unit ID"}; 
        DefaultTableModel BrandsModel = new DefaultTableModel();
        BrandsModel.setColumnIdentifiers(BrandsColumnsName);
        DV2.setModel(BrandsModel);
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(DV2.getModel());
        DV2.setRowSorter(sorter);
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);  
        sorter.setSortable(0, false);         
        
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3) + "?extended=true&nocache=1"); 
            //HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3)); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Location = json.getJSONArray("locations");
            JSONArray brands = null;
            
            String brand;
            String location;
            String id;
            String unit_id;
            if (Location != null) {
                for (Object l : Location) {
                    brand = "";
                    location = "";
                    id = "";
                    unit_id = "";
                    JSONObject loc = (JSONObject) l;
                    if (loc.has("brands")) {
                        brands = loc.getJSONArray("brands");
                        for (Object b : brands) {
                            JSONObject br = (JSONObject) b;
                            brand = br.getString("name");                            
                            if (!br.isNull("location_description")) {
                                location = br.getString("location_description");
                            }
                            id = br.getString("id");
                            unit_id = loc.getString("id");
                            BrandsModel.addRow(new Object[]{brand, location, id, unit_id});
                        }
                    }
                }
            }
            DV2.setModel(BrandsModel);    
            DV2.setDefaultEditor(Object.class, null);
            DV2.getColumnModel().getColumn(0).setPreferredWidth(140);
            DV2.getColumnModel().getColumn(1).setPreferredWidth(140);
            DV2.getColumnModel().getColumn(2).setPreferredWidth(80);
            
            sorter.setSortable(0, true); 
            sorter.sort(); 
            
        } catch (IOException | JSONException ex) {
            txtLog.append("- Exception: " + ex.getMessage() + "\r\n"); 
            txtLog.setCaretPosition(txtLog.getDocument().getLength());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLog.append("- Exception: " + ex.getMessage() + "\r\n");   
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            }
        } 
        txtLog.append("== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        sw1.reset();
   
        if (DV2.getRowCount() > 0) {
            DV2.changeSelection(0, 0, false, false);
            if (CONFIG && !"".equals(BRAND.trim()))
            {
                for(int row = 0; row < DV2.getRowCount(); row++) {
                    if(DV2.getValueAt(row, 0).equals(BRAND)){
                        DV2.changeSelection(row, 0, false, false);
                        break;
                    } 
                }
            }
            BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
            Location = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 1));
        } else {
            BrandID = "null";
            Location = "";
        }
        d2LastRow = DV2.getSelectedRow();
        SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
        lblBRANDS.setText("Selected Site Brands (" + DV2.getRowCount() + " found)");
                this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

    private void Report(boolean Open_File){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        Report_File = "";
        if ("".equals(Last_EX.trim()) || "None".equals(Last_EX.trim())){
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            txtLog.append("=== Report > Not Excel");
            return;
        }   
        try {
            int col = 9; // 8 + 1 new JIRA = 9
            String Top_Row = Last_EX.substring(0, Last_EX.indexOf("\r\n"));        
            String[] lines = Last_EX.substring(Last_EX.indexOf("\r\n") + 2).split(System.getProperty("line.separator"));
            int l = lines.length;
            String[][] Values = new String[l][col];
            int n = 1;
            for (int i = 0; i < l; i++) {
                String[] v = lines[i].split("\t");
                System.arraycopy(v, 0, Values[i], 0, v.length); 
            }
            Report_File = Func.fExcel(l, col, Values, "Android_" + env + "_" + Report_Date, Top_Row, 0, 0, null, " ", " ", Open_File);
            txtLog.append("=== Report Excel file:\r\n" + Report_File + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        } catch (IOException ex) {
            txtLog.append("=== Report > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void LOG_UPDATE(){  
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            PreparedStatement _update = conn.prepareStatement("UPDATE [dbo].[aw_result] SET " +
                    " [Date] = ?" +       // 1
                    ", [Time] = ?" +      // 2
                    ", [app] = ?" +       // 3
                    ", [url] = ?" +       // 4
                    ", [summary] = ?" +   // 5
                    ", [t_calls] = ?" +   // 6
                    ", [t_min] = ?" +     // 7
                    ", [t_avg] = ?" +     // 8
                    ", [t_max] = ?" +     // 9
                    ", [p_50] = ?" +      // 10
                    ", [p_90] = ?" +      // 11
                    ", [test_type] = ?" +     // 12
                    ", [user_id] = ?" +       // 13
                    ", [user_ws] = ?" +       // 14
                    ", [env] = ?" +       // 15
                    ", [Result] = ?" +    // 16
                    ", [Status] = ?" +    // 17
                    ", [Excel] = ?" +     // 18
                    " WHERE [app] = 'Android_" + app + "_" + env + "' AND [Status] = 'Running'");
            _update.setString(1, LocalDateTime.now().format(Date_formatter));
            _update.setString(2, LocalDateTime.now().format(Time_24_formatter));
            _update.setString(3, "Android_" + app + "_" + env);
            _update.setString(4, url);
            _update.setString(5, Summary + " (dur: " + DD.toHours() + ":" + (DD.toMinutes() % 60) + ":" + (DD.getSeconds() % 60) + ")");
            _update.setInt(6, t_calls);
            _update.setDouble(7, t_min);
            _update.setDouble(8, t_avg);
            _update.setDouble(9, t_max);
            _update.setDouble(10, p_50);
            _update.setDouble(11, p_90);
            _update.setString(12, r_type);
            _update.setString(13, UserID);
            _update.setString(14, WsID);
            _update.setString(15, devModel + " OSv: " + devOS);
            _update.setString(16, txtLog.getText());
            _update.setString(17, "Scope: " + SCOPE);
            _update.setString(18, EX);
            int row = _update.executeUpdate();
            conn.close();
        } catch (SQLException ex) {
            txtLog.append("=== LOG_UPDATE > SQL ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void LOG_START(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[aw_result] (" +
                    "[Date]" +   // 1
                    ", [Time]" +   // 2
                    ", [app]" +   // 3
                    ", [url]" +   // 4
                    ", [summary]" +   // 5
                    ", [t_calls]" +   // 6
                    ", [t_min]" +   // 7
                    ", [t_avg]" +   // 8
                    ", [t_max]" +   // 9
                    ", [p_50]" +   // 10
                    ", [p_90]" +   // 11
                    ", [test_type]" +   // 12
                    ", [user_id]" +   // 13
                    ", [user_ws]" +   // 14
                    ", [env]" +   // 15
                    ", [Result]" +   // 16
                    ", [Status]" +   // 17
                    ", [Excel]" +     // 18
                    ") VALUES (" +
                    "?" +     // 1
                    ",?" +    // 2
                    ",?" +    // 3
                    ",?" +    // 4
                    ",?" +    // 5
                    ",?" +    // 6
                    ",?" +    // 7
                    ",?" +    // 8
                    ",?" +    // 9
                    ",?" +    // 10
                    ",?" +    // 11
                    ",?" +    // 12
                    ",?" +    // 13
                    ",?" +    // 14
                    ",?" +    // 15
                    ",?" +    // 16
                    ",?" +    // 17
                    ",?" +    // 18
                    ")");
            _insert.setString(1, LocalDateTime.now().format(Date_formatter));
            _insert.setString(2, LocalDateTime.now().format(Time_24_formatter));
            _insert.setString(3, "Android_" + app + "_" + env);
            _insert.setString(4, url);
            _insert.setString(5, "Running...");
            _insert.setString(6, "0");
            _insert.setString(7, "0");
            _insert.setString(8, "0");
            _insert.setString(9, "0");
            _insert.setString(10, "0");
            _insert.setString(11, "0");
            _insert.setString(12, r_type);
            _insert.setString(13, UserID);
            _insert.setString(14, WsID);
            _insert.setString(15, devModel+ " OSv: " + devOS);
            _insert.setString(16, "=== Job is running... ===\r\n" + "");
            _insert.setString(17, "Running");
            _insert.setString(18, "None");
            int row = _insert.executeUpdate();
            conn.close();
        }  catch (SQLException ex) {
            txtLog.append("=== LOG_START > SQL ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

    private void LOAD_CONFIG(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            SQL = "SELECT [_conf] FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'MOB' AND [app] = 'Android' AND [env] = '" + env + "'" + "\r\n";
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery(SQL);
            rs.next();
            C = rs.getString(1);
            conn.close();
        } catch (SQLException ex) {
            CONFIG = false;
            txtLog.append("=== LOAD_CONFIG > ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return;
        }
            
        try{             
            if (C.contains(": ")) {
                String c;
                c = C.substring(C.indexOf("env:")); c = c.substring(0, c.indexOf("\r\n")).trim(); env = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("app:")); c = c.substring(0, c.indexOf("\r\n")).trim(); app = c.substring(c.indexOf(" ")).trim();
             
                c = C.substring(C.indexOf("SITE:")); c = c.substring(0, c.indexOf("\r\n")).trim(); SITE = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("BRAND:")); c = c.substring(0, c.indexOf("\r\n")).trim(); BRAND = c.substring(c.indexOf(" ")).trim();
                
                c = C.substring(C.indexOf("txtMobile_Id:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtMobile_Id.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtMobile_Pw:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtMobile_Pw.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtBolter_Id:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtBolter_Id.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtBolter_Pw:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtBolter_Pw.setText(c.substring(c.indexOf(" ")).trim());

                c = C.substring(C.indexOf("nWaitElement:")); c = c.substring(0, c.indexOf("\r\n")).trim(); nWaitElement.setValue(Double.parseDouble(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("nWaitLoad:")); c = c.substring(0, c.indexOf("\r\n")).trim(); nWaitLoad.setValue(Double.parseDouble(c.substring(c.indexOf(" ")).trim()));

                c = C.substring(C.indexOf("_slack:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _slack.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));

                c = C.substring(C.indexOf("_site:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _site.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_site_new:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _site_new.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_brand_new:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _brand_new.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_brand:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _brand.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_group_management:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _group_management.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_orders:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _orders.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_sales_reporting:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _sales_reporting.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_users:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _users.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_resent_updates")); c = c.substring(0, c.indexOf("\r\n")).trim(); _resent_updates.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_announcements:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _announcements.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_promo")); c = c.substring(0, c.indexOf("\r\n")).trim(); _promo.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_password:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _password.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_roles")); c = c.substring(0, c.indexOf("\r\n")).trim(); _roles.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_all_data")); c = c.substring(0, c.indexOf("\r\n")).trim(); _all_data.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_logout")); c = c.substring(0, c.indexOf("\r\n")).trim(); _logout.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                CONFIG = true;
                txtLog.append("=== LOAD_CONFIG > OK" + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            } else {
                CONFIG = false;
                txtLog.append("=== MOB / Android, User: " + UserID + ", Env: " + env + " > No saved Configuration Found" + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            }
        } catch (Exception ex) {
            CONFIG = false;
            txtLog.append("=== LOAD_CONFIG > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void SAVE_CONFIG() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        String _S = "n/a";
        String _B = "n/a";
        try {
            if(DV1.getRowCount() > 0){
                _S = DV1.getValueAt(DV1.getSelectedRow(), 0).toString();
            }
            if(DV2.getRowCount() > 0){
                _B = DV2.getValueAt(DV2.getSelectedRow(), 0).toString();
            }
            C = "";
            C += "env: " + env + "\r\n";
            C += "app: " + cmbApp.getSelectedItem().toString() + "\r\n";
            C += "SITE: " + _S + "\r\n";
            C += "BRAND: " + _B + "\r\n";
            
            C += "txtMobile_Id: " + txtMobile_Id.getText() + "\r\n";
            C += "txtMobile_Pw: " + txtMobile_Pw.getText() + "\r\n";
            C += "txtBolter_Id: " + txtBolter_Id.getText() + "\r\n";
            C += "txtBolter_Pw: " + txtBolter_Pw.getText() + "\r\n";
            
            C += "nWaitElement: " + nWaitElement.getValue() + "\r\n";
            C += "nWaitLoad: " + nWaitLoad.getValue()+ "\r\n";  
            
            C += "_slack: " + _slack.isSelected() + "\r\n";
            
            C += "_site: " + _site.isSelected() + "\r\n";
            C += "_site_new: " + _site_new.isSelected() + "\r\n";
            C += "_brand_new: " + _brand_new.isSelected() + "\r\n";
            C += "_brand: " + _brand.isSelected() + "\r\n";
            C += "_group_management: " + _group_management.isSelected() + "\r\n";
            C += "_orders: " + _orders.isSelected() + "\r\n";
            C += "_sales_reporting: " + _sales_reporting.isSelected() + "\r\n";
            C += "_users: " + _users.isSelected() + "\r\n";
            C += "_resent_updates: " + _resent_updates.isSelected() + "\r\n";
            C += "_announcements: " + _announcements.isSelected() + "\r\n";
            C += "_promo: " + _promo.isSelected() + "\r\n";
            C += "_password: " + _password.isSelected() + "\r\n";
            C += "_roles: " + _roles.isSelected() + "\r\n";           
            C += "_all_data: " + _all_data.isSelected() + "\r\n";
            C += "_logout: " + _logout.isSelected() + "\r\n";
           
        } catch (Exception ex)  {
            txtLog.append("=== SAVE_CONFIG > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            return;
        }
        
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            SQL = "DELETE FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'MOB' AND [app] = 'Android' AND [env] = '" + env + "'";
            Statement _del = conn.createStatement();
            _del.execute(SQL);
            PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[a_config]" +
                    "([user_id]" +   // 1
                    ",[env]" +       // 2
                    ",[platform]" +  // 3
                    ",[app]" +       // 4
                    ",[_conf]" +     // 5
                    ") VALUES (" +
                    "?" +
                    ",?" +
                    ",?" +
                    ",?" +
                    ",?" +
                    ")");
            _insert.setString(1, UserID);
            _insert.setString(2, env);
            _insert.setString(3, "MOB");
            _insert.setString(4, "Android");
            _insert.setString(5, C);
            int row = _insert.executeUpdate();
            txtLog.append("=== SAVE_CONFIG > OK (" + row + " row)" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            conn.close();
        } catch (SQLException ex) {
            txtLog.append("=== SAVE_CONFIG > SQL ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

    // <editor-fold defaultstate="collapsed" desc="Package Local Variables">
    private static String access_key;
    private static String secret_key;
    private static AWSCredentials AWS_credentials; 
    
    private AndroidDriver<AndroidElement> ad = null;
    private AppiumDriverLocalService appiumService = null;
    private List<AndroidElement> L0 = null;
    private List<AndroidElement> L1 = null;
    private AndroidElement e = null;
    private AndroidElement e1 = null;
    private AndroidElement e2 = null;
    private AndroidElement e3 = null;
    private WebDriverWait wait = null;
    private final int appium_port = 4723;
    private final String appium_url = "http://127.0.0.1:4723/wd/hub";
    private String appPackage = "";
    private String appActivity = "";
    private String appBuldFile = "";
    private String appVersion = "";
    private String devID = "";
    private String devModel = "";
    private String devOS = "";
    
    private final String Automator = "UiAutomator2"; //Appium UiAutomator2
    private final int systemPort = 8290; // UiAutomator2    
    
    private String Last_EX;
    private static final Stopwatch sw1 = Stopwatch.createUnstarted();
    private boolean Load;
    private String Report_Date;
    private String Report_File;
    private static Duration DD;
    
    private static SwingWorker BW1;  

    private boolean CONFIG = false;
    private String C = "";
    private int d1LastRow = -1; 
    private int d2LastRow = -1; 

    private String SCOPE;
    
    public static String New_ID = "";
  
    public static String Mobile_ID;
    public static String Mobile_PW;
    public static String Bolter_ID;
    public static String Bolter_PW;  
    
    private static String S_Client_ID = "";
    private static String S_Client_Secret  = "";
    private static String S_Signing_Secret = "";
    private static String S_Hook = "";
      
    public static String url = "";
    public static String app = "";
    private static String appId = "";
    public static String env = "";
    public static String platform = "CDL";
    public static String BaseAPI;
    public static String COUNTRY = "COUNTRY";
    public static String SITE = "";
    public static String SiteID = "";
    public static String GROUP = "";
    public static String BRAND = "";
    public static String BrandID = "";
    public static String Location = "";

    // </editor-fold>
   
    // <editor-fold defaultstate="collapsed" desc="Form Variables Declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DV1;
    private javax.swing.JTable DV2;
    private javax.swing.JTable DV3;
    private javax.swing.JCheckBox _all_data;
    private javax.swing.JCheckBox _announcements;
    private javax.swing.JCheckBox _brand;
    private javax.swing.JCheckBox _brand_new;
    private javax.swing.JCheckBox _group_management;
    private javax.swing.JCheckBox _login;
    private javax.swing.JCheckBox _logout;
    private javax.swing.JCheckBox _notifications;
    private javax.swing.JCheckBox _orders;
    private javax.swing.JCheckBox _password;
    private javax.swing.JCheckBox _promo;
    private javax.swing.JCheckBox _resent_updates;
    private javax.swing.JCheckBox _roles;
    private javax.swing.JCheckBox _sales_analytics;
    private javax.swing.JCheckBox _sales_reporting;
    private javax.swing.JCheckBox _site;
    private javax.swing.JCheckBox _site_new;
    private javax.swing.JCheckBox _slack;
    private javax.swing.JCheckBox _smart_analytics;
    private javax.swing.JCheckBox _users;
    private javax.swing.JButton btnExel;
    private javax.swing.JButton btnFails;
    private javax.swing.JButton btnFindDevice;
    private javax.swing.JButton btnGetAPK;
    private javax.swing.JButton btnGetScreenshot;
    private javax.swing.JButton btnInstallAPK;
    private javax.swing.JButton btnInstallAll;
    private javax.swing.JButton btnLog;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnS3Install;
    private javax.swing.JButton btnSave_Opt;
    private javax.swing.JButton btnScreenshotFolder;
    private javax.swing.JComboBox<String> cmbApp;
    private javax.swing.JComboBox<String> cmbDevice;
    private javax.swing.JComboBox<String> cmbEnv;
    private javax.swing.JComboBox<String> cmbMPlan;
    private javax.swing.JComboBox<String> cmbPromo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAPK;
    private javax.swing.JLabel lblBRANDS;
    private javax.swing.JLabel lblSITES;
    private javax.swing.JLabel lblSITES10;
    private javax.swing.JLabel lblSITES12;
    private javax.swing.JLabel lblSITES13;
    private javax.swing.JLabel lblSITES14;
    private javax.swing.JLabel lblSITES3;
    private javax.swing.JLabel lblSITES4;
    private javax.swing.JLabel lblSITES6;
    private javax.swing.JLabel lblSITES7;
    private javax.swing.JLabel lblSITES8;
    private javax.swing.JLabel lblSITES9;
    private javax.swing.JSpinner nWaitElement;
    private javax.swing.JSpinner nWaitLoad;
    private javax.swing.JTextField txtBolter_Id;
    private javax.swing.JTextField txtBolter_Pw;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtMobile_Id;
    private javax.swing.JTextField txtMobile_Pw;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
