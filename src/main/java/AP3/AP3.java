/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AP3;

import A.Func;
import static A.A.*;
import com.ullink.slack.simpleslackapi.SlackChannel;
import com.ullink.slack.simpleslackapi.SlackMessageHandle;
import com.ullink.slack.simpleslackapi.SlackSession;
import com.ullink.slack.simpleslackapi.impl.SlackSessionFactory;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;
/**
 *
 * @author Oleg.Spozito
 */
public class AP3 extends javax.swing.JInternalFrame {
    /**
     * Creates new form AP3
     */
    public AP3() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSITES = new javax.swing.JLabel();
        lblBRANDS = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        _login = new javax.swing.JCheckBox();
        _all_data = new javax.swing.JCheckBox();
        _site_new = new javax.swing.JCheckBox();
        _site = new javax.swing.JCheckBox();
        _brand = new javax.swing.JCheckBox();
        _orders = new javax.swing.JCheckBox();
        _resent_updates = new javax.swing.JCheckBox();
        _announcements = new javax.swing.JCheckBox();
        _promo = new javax.swing.JCheckBox();
        _sales_reporting = new javax.swing.JCheckBox();
        _menu_manager = new javax.swing.JCheckBox();
        _users = new javax.swing.JCheckBox();
        _password = new javax.swing.JCheckBox();
        _logout = new javax.swing.JCheckBox();
        _roles = new javax.swing.JCheckBox();
        _brand_new = new javax.swing.JCheckBox();
        _sales_analytics = new javax.swing.JCheckBox();
        _group_management = new javax.swing.JCheckBox();
        cmbGROUP = new java.awt.Choice();
        label13 = new java.awt.Label();
        txtMENU = new javax.swing.JTextField();
        label14 = new java.awt.Label();
        jScrollPane3 = new javax.swing.JScrollPane();
        DV1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DV2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        nShowPage = new javax.swing.JSpinner();
        nWaitElement = new javax.swing.JSpinner();
        nWaitLoad = new javax.swing.JSpinner();
        label10 = new java.awt.Label();
        label11 = new java.awt.Label();
        label12 = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLOG = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        cmbBROW = new javax.swing.JComboBox<>();
        btnRUN = new javax.swing.JButton();
        btnLOG = new javax.swing.JButton();
        btnFAILS = new javax.swing.JButton();
        btnEXCEL = new javax.swing.JButton();
        _headless = new javax.swing.JCheckBox();
        btnSAVE_OPT = new javax.swing.JButton();
        label5 = new java.awt.Label();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        cmbAPP = new java.awt.Choice();
        cmbENV = new java.awt.Choice();
        label21 = new java.awt.Label();
        label22 = new java.awt.Label();
        label23 = new java.awt.Label();
        txtADMIN_ID = new javax.swing.JTextField();
        txtSM_ID = new javax.swing.JTextField();
        txtIM_ID = new javax.swing.JTextField();
        label24 = new java.awt.Label();
        label25 = new java.awt.Label();
        label26 = new java.awt.Label();
        txtADMIN_PW = new javax.swing.JTextField();
        txtSM_PW = new javax.swing.JTextField();
        txtIM_PW = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);
        setIconifiable(true);
        setTitle("AP3 Automation Manager");
        setDoubleBuffered(true);
        setMinimumSize(new java.awt.Dimension(860, 532));
        setName("AP3"); // NOI18N
        setPreferredSize(new java.awt.Dimension(860, 532));
        setVisible(true);
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                AP3_AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSITES.setText("Sites");
        lblSITES.setAlignmentX(0.5F);
        getContentPane().add(lblSITES, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 4, 254, -1));

        lblBRANDS.setText("Selected Site - Brands");
        lblBRANDS.setName("lblBRANDS"); // NOI18N
        getContentPane().add(lblBRANDS, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 4, 216, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Scope"));
        jPanel1.setToolTipText("");
        jPanel1.setDoubleBuffered(false);
        jPanel1.setName(""); // NOI18N
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        _login.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _login.setSelected(true);
        _login.setText("Login > Dashboard");
        _login.setEnabled(false);
        _login.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _login.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _login.setRequestFocusEnabled(false);
        jPanel1.add(_login, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 24, 132, 14));

        _all_data.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _all_data.setText("Show all data rows");
        _all_data.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _all_data.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _all_data.setRequestFocusEnabled(false);
        jPanel1.add(_all_data, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 23, 172, 14));

        _site_new.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _site_new.setText("New Site (not in Prod)");
        _site_new.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _site_new.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _site_new.setRequestFocusEnabled(false);
        jPanel1.add(_site_new, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 41, 176, 14));

        _site.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _site.setText("Sites");
        _site.setContentAreaFilled(false);
        _site.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _site.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _site.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _siteActionPerformed(evt);
            }
        });
        jPanel1.add(_site, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 40, 132, 14));

        _brand.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _brand.setText("Brand");
        _brand.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _brand.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _brand.setRequestFocusEnabled(false);
        jPanel1.add(_brand, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 60, 132, 14));

        _orders.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _orders.setText("Orders");
        _orders.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _orders.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _orders.setRequestFocusEnabled(false);
        jPanel1.add(_orders, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 76, 132, 14));

        _resent_updates.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _resent_updates.setText("Recent Updates");
        _resent_updates.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _resent_updates.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _resent_updates.setRequestFocusEnabled(false);
        jPanel1.add(_resent_updates, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 94, 132, 14));

        _announcements.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _announcements.setText("Announcements");
        _announcements.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _announcements.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _announcements.setRequestFocusEnabled(false);
        jPanel1.add(_announcements, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 112, 132, 14));

        _promo.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _promo.setText("Promo Management");
        _promo.setEnabled(false);
        _promo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _promo.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _promo.setRequestFocusEnabled(false);
        jPanel1.add(_promo, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 130, 144, 14));

        _sales_reporting.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _sales_reporting.setText("Sales Reporting");
        _sales_reporting.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _sales_reporting.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _sales_reporting.setRequestFocusEnabled(false);
        jPanel1.add(_sales_reporting, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 148, 132, 14));

        _menu_manager.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _menu_manager.setText("Menu Manager");
        _menu_manager.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _menu_manager.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _menu_manager.setRequestFocusEnabled(false);
        jPanel1.add(_menu_manager, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 112, 14));

        _users.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _users.setSelected(true);
        _users.setText("Users");
        _users.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _users.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _users.setRequestFocusEnabled(false);
        jPanel1.add(_users, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 95, 132, 14));

        _password.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _password.setText("Forgot Password");
        _password.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _password.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _password.setRequestFocusEnabled(false);
        jPanel1.add(_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 113, 132, 14));

        _logout.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _logout.setText("User Logout");
        _logout.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _logout.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _logout.setRequestFocusEnabled(false);
        jPanel1.add(_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 131, 132, 14));

        _roles.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _roles.setText("Roles Permissions");
        _roles.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _roles.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _roles.setRequestFocusEnabled(false);
        jPanel1.add(_roles, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 149, 132, 14));

        _brand_new.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _brand_new.setText("Add Brand (not in Prod)");
        _brand_new.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _brand_new.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _brand_new.setRequestFocusEnabled(false);
        jPanel1.add(_brand_new, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 59, 168, 14));

        _sales_analytics.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _sales_analytics.setText("Sales Analytics");
        _sales_analytics.setEnabled(false);
        _sales_analytics.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _sales_analytics.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _sales_analytics.setRequestFocusEnabled(false);
        jPanel1.add(_sales_analytics, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 149, 116, 14));

        _group_management.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _group_management.setText("Group Management");
        _group_management.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _group_management.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _group_management.setRequestFocusEnabled(false);
        jPanel1.add(_group_management, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 200, 144, 14));

        cmbGROUP.setMinimumSize(new java.awt.Dimension(103, 24));
        cmbGROUP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGROUPItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbGROUP, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 220, 260, -1));

        label13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label13.setText("Sector Brand");
        jPanel1.add(label13, new org.netbeans.lib.awtextra.AbsoluteConstraints(284, 204, -1, 12));

        txtMENU.setText("TIM HORTONS");
        jPanel1.add(txtMENU, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 220, 128, -1));

        label14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label14.setText("Group (Sector)");
        jPanel1.add(label14, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 204, -1, 12));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 172, 424, 248));

        DV1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        DV1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DV1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV1.setCellSelectionEnabled(true);
        DV1.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV1.setName("DV1"); // NOI18N
        DV1.setRequestFocusEnabled(false);
        DV1.setRowHeight(18);
        DV1.getTableHeader().setReorderingAllowed(false);
        DV1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(DV1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 22, 428, 260));

        DV2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DV2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        DV2.setColumnSelectionAllowed(true);
        DV2.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV2.setName("DV2"); // NOI18N
        DV2.setOpaque(false);
        DV2.setRowHeight(18);
        DV2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(DV2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 22, 420, 99));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Wait (sec):"));

        nShowPage.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nShowPage.setModel(new javax.swing.SpinnerNumberModel(0.2d, 0.2d, 2.0d, 0.2d));
        nShowPage.setAutoscrolls(true);
        nShowPage.setName("nShowPage"); // NOI18N

        nWaitElement.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nWaitElement.setModel(new javax.swing.SpinnerNumberModel(1, 0, 5, 1));
        nWaitElement.setName("nWaitElement"); // NOI18N

        nWaitLoad.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nWaitLoad.setModel(new javax.swing.SpinnerNumberModel(30, 0, 60, 5));
        nWaitLoad.setName("nWaitLoad"); // NOI18N

        label10.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label10.setText("Show page");

        label11.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label11.setText("Element Exist");

        label12.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label12.setText("Timeout");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(nShowPage, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(nWaitElement, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(nWaitLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nShowPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nWaitElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nWaitLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 124, 424, -1));

        txtLOG.setEditable(false);
        txtLOG.setColumns(20);
        txtLOG.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtLOG.setRows(5);
        txtLOG.setText("Start >");
        txtLOG.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtLOG.setMinimumSize(new java.awt.Dimension(50, 19));
        txtLOG.setPreferredSize(null);
        jScrollPane1.setViewportView(txtLOG);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 358, 428, 148));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbBROW.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chrome", "Firefox", "Edge", "IE" }));
        cmbBROW.setEnabled(false);
        jPanel3.add(cmbBROW, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 32, 78, 20));

        btnRUN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnRUN.setForeground(new java.awt.Color(204, 0, 0));
        btnRUN.setText("Run");
        btnRUN.setName("btnRUN"); // NOI18N
        btnRUN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRUNActionPerformed(evt);
            }
        });
        jPanel3.add(btnRUN, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 60, 78, 24));

        btnLOG.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnLOG.setText(" < Log");
        btnLOG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLOGActionPerformed(evt);
            }
        });
        jPanel3.add(btnLOG, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 60, 96, 24));

        btnFAILS.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnFAILS.setText("Show Fails");
        btnFAILS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFAILSMouseClicked(evt);
            }
        });
        jPanel3.add(btnFAILS, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 32, 96, 24));

        btnEXCEL.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnEXCEL.setText("Excel Rep");
        btnEXCEL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEXCELMouseClicked(evt);
            }
        });
        jPanel3.add(btnEXCEL, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 4, 96, 24));

        _headless.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        _headless.setText("Headless <");
        _headless.setToolTipText("");
        _headless.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _headless.setRequestFocusEnabled(false);
        jPanel3.add(_headless, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 64, 80, 14));

        btnSAVE_OPT.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnSAVE_OPT.setText("Save Run Options");
        btnSAVE_OPT.setName("btnSAVE"); // NOI18N
        btnSAVE_OPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSAVE_OPTActionPerformed(evt);
            }
        });
        jPanel3.add(btnSAVE_OPT, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 60, 136, 24));

        label5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label5.setText("Environment");
        jPanel3.add(label5, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 16, -1, 12));

        label8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label8.setText("Application");
        jPanel3.add(label8, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 16, -1, 12));

        label9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label9.setText("Browser");
        jPanel3.add(label9, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 16, -1, 12));

        cmbAPP.setMinimumSize(new java.awt.Dimension(103, 24));
        cmbAPP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAPPItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbAPP, new org.netbeans.lib.awtextra.AbsoluteConstraints(232, 32, 100, -1));

        cmbENV.setMinimumSize(new java.awt.Dimension(103, 24));
        cmbENV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbENVItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbENV, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 32, 108, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(428, 420, 424, 88));

        label21.setAlignment(java.awt.Label.RIGHT);
        label21.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label21.setText("Admin");
        getContentPane().add(label21, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 284, -1, -1));

        label22.setAlignment(java.awt.Label.RIGHT);
        label22.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label22.setText("Site Manager");
        getContentPane().add(label22, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 308, -1, -1));

        label23.setAlignment(java.awt.Label.RIGHT);
        label23.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label23.setText("Delivery Manager");
        getContentPane().add(label23, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 332, -1, -1));

        txtADMIN_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtADMIN_ID.setText("oleg.spozito@compassdigital.io");
        getContentPane().add(txtADMIN_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 284, 184, -1));

        txtSM_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtSM_ID.setText("cdl.test.xtt+SM@gmail.com");
        getContentPane().add(txtSM_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 308, 184, -1));

        txtIM_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtIM_ID.setText("cdl.test.xtt+DM@gmail.com");
        getContentPane().add(txtIM_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 332, 184, -1));

        label24.setAlignment(java.awt.Label.RIGHT);
        label24.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label24.setText("PW");
        getContentPane().add(label24, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 292, -1, -1));

        label25.setAlignment(java.awt.Label.RIGHT);
        label25.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label25.setText("PW");
        getContentPane().add(label25, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 316, -1, -1));

        label26.setAlignment(java.awt.Label.RIGHT);
        label26.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        label26.setText("PW");
        getContentPane().add(label26, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 336, -1, -1));

        txtADMIN_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtADMIN_PW.setText("Password1");
        getContentPane().add(txtADMIN_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 284, 64, -1));

        txtSM_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtSM_PW.setText("Password1");
        getContentPane().add(txtSM_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 332, 64, -1));

        txtIM_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtIM_PW.setText("Password1");
        getContentPane().add(txtIM_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 308, 64, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DV1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV1MouseClicked
        GetBrands_API();
    }//GEN-LAST:event_DV1MouseClicked

    private void btnSAVE_OPTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSAVE_OPTActionPerformed
        SAVE_CONFIG();
    }//GEN-LAST:event_btnSAVE_OPTActionPerformed

    private void btnRUNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRUNActionPerformed
        btnRUN.setEnabled(false);
        //txtLOG.setText("");
        txtLOG.append("=== Execution started @" + LocalDateTime.now().format(Time_12_formatter));
        Wait = (double)nWaitElement.getValue();
        Timeout = (double)nWaitLoad.getValue();
        sleep = (double)nShowPage.getValue() *1000;
        EX = "";
        F = "";
        t_calls = 0;
        t_min =  0;
        t_avg = 0;
        t_max =  0;
        p_50 = 0;
        p_90 = 0;
        _t = 0; // Total
        _p = 0; // Passed
        _f = 0; // Failed
        _w = 0; // Warn
        r_time = "";
        ADMIN_ID = txtADMIN_ID.getText();
        ADMIN_PW = txtADMIN_PW.getText();
        SM_ID = txtADMIN_ID.getText();
        SM_PW = txtADMIN_ID.getText();
        IM_ID = txtADMIN_ID.getText();
        IM_PW = txtADMIN_ID.getText();
        ALL_DATA = _all_data.isSelected();
        SCOPE = "";
        if(DV1.getRowCount() > 0) {
            SITE = DV1.getValueAt(DV1.getSelectedRow(), 0).toString();            
            platform = DV1.getValueAt(DV1.getSelectedRow(), 1).toString(); // platform
            CAN = DV1.getValueAt(DV1.getSelectedRow(), 2).toString(); 
        }
        if(DV2.getRowCount() > 0) {
            BRAND = DV2.getValueAt(DV2.getSelectedRow(), 0).toString();
        }
        
        GROUP = cmbGROUP.getSelectedItem();
        GL_MENU = txtMENU.getText();

        if(_headless.isSelected()) {
            txtLOG.append("\r\n=== Headless mode is selected - Browser is hidden");
            txtLOG.append("\r\n=== Please wait for report...\r\n");
        }
        txtLOG.append("\r\n=== Starting Web Driver...");
        sw1.start();
        r_type = "ad-hoc";
        
        if(Driver()){
            txtLOG.append("\r\n=== Web Driver Started in " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec");
            txtLOG.setCaretPosition(txtLOG.getDocument().getLength());   
            sw1.reset();
            LOG_START(); // ========================================================
            BW1_DoWork(
                // parameters?    
            );
            BW2_DoWork(
                // parameters?  
            );
        }
    }//GEN-LAST:event_btnRUNActionPerformed

    private void btnLOGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLOGActionPerformed
        //        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        //        StringSelection stringSelection = new StringSelection(txtLOG.getText());
        //        clipboard.setContents(stringSelection, null);
        try {
            File aLog = new File("aLog.txt");
            if (aLog.createNewFile()) {
                System.out.println("File created: " + aLog.getName());
            } else {
                System.out.println("File already exists.");
            }
            Files.write(Paths.get(aLog.getPath()), txtLOG.getText().getBytes());
            java.awt.Desktop.getDesktop().open(aLog);
        }
        catch (IOException ex) {
            txtLOG.append("\r\n\r\n=== Show Log > ERROR: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnLOGActionPerformed

    private void Report(){
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        String EXX = "";
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT TOP 1 [Excel] FROM [dbo].[aw_result] WHERE [app] = 'AP3_" + env + "' ORDER By qID DESC");
            rs.next();
            EXX = rs.getString(1);
        }catch (Exception ex){
            txtLOG.append("\r\n\r\n=== Report > ERROR: " + ex.getMessage());
        }
        if ("".equals(EXX.trim()) || "None".equals(EXX.trim())){
            setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            txtLOG.append("\r\n\r\n=== Report > Not Excel");
            return;
        }   
        try {
            int col = 9; // 8 + 1 new JIRA = 9
            String Top_Row = EXX.substring(0, EXX.indexOf("\r\n"));
            EXX = EXX.substring(EXX.indexOf("\r\n") + 2);
        
            String[] lines = EXX.split(System.getProperty("line.separator"));
            int l = lines.length;
            String[][] Values = new String[l][col];
            int n = 1;
            for (int i = 0; i < l; i++)
            {
                String[] v = lines[i].split("\t");
                System.arraycopy(v, 0, Values[i], 0, v.length); 
//                for (int j = 0; j < v.length; j++){
//                    Values[i][j] = v[j];
//                } 
            }

            String Date = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd_MMM_yyyy_hh_mma"));
            Func.fExcel((l - 1), col, Values, "AP3_" + env + "_" + Date, Top_Row, 0, 0, null, " ", " ");


//                Toolkit toolkit = Toolkit.getDefaultToolkit();
//                Clipboard clipboard = null;
//                try{
//                    clipboard = toolkit.getSystemClipboard();
//                    clipboard.setContents( new StringSelection(""), null); // 900009
//                }catch (Exception ex){
//                    Thread.sleep(20);
//                    clipboard = toolkit.getSystemClipboard();
//                    clipboard.setContents( new StringSelection(""), null);
//                    //clipboard.setContents( DV1["app", DV1.SelectedCells[0].RowIndex].Value.ToString() + "_" + Date);  
//                }

//            File ExcelLog = new File("ExcelLog.txt");
//            if (ExcelLog.createNewFile()) {
//                txtLOG.append("\r\n\r\n=== Report > File created: " + ExcelLog.getName());
//            } else {
//                txtLOG.append("\r\n\r\n=== Report > File already exists.");
//            }
//            Files.write(Paths.get(ExcelLog.getPath()), EXX.getBytes());
//            java.awt.Desktop.getDesktop().open(ExcelLog);
        } catch (Exception ex) {
            txtLOG.append("\r\n\r\n=== Report > ERROR: " + ex.getMessage());
        }
        Runtime.getRuntime().gc();
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

    private void btnFAILSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFAILSMouseClicked
        try {
            File aFailed = new File("aFailed.txt");
            if (aFailed.createNewFile()) {
                System.out.println("File created: " + aFailed.getName());
            } else {
                System.out.println("File already exists.");
            }
            Files.write(Paths.get(aFailed.getPath()), F.getBytes());
            java.awt.Desktop.getDesktop().open(aFailed);
        } catch (IOException ex) {
            txtLOG.append("\r\n\r\n=== Show Failed > ERROR: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnFAILSMouseClicked

    private void AP3_AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_AP3_AncestorAdded
        cmbAPP.add("Boost");
        cmbAPP.add("Canteen");
        cmbAPP.add("JJKitchen");
        cmbAPP.add("Rogers");
        cmbAPP.add("StandardCognition");
        cmbAPP.add("Tacit");
        cmbAPP.add("Thrive");
        
        cmbENV.add("Staging");
        cmbENV.add("Production");
        cmbENV.add("Development");
        
        cmbENV.select("Staging"); 
        cmbAPP.select("Boost");
            LOAD_ENV();
            LOAD_DATA();
    }//GEN-LAST:event_AP3_AncestorAdded

    private void cmbAPPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAPPItemStateChanged
        app = cmbAPP.getSelectedItem();
        GetSites_API();
    }//GEN-LAST:event_cmbAPPItemStateChanged

    private void cmbENVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbENVItemStateChanged
        LOAD_ENV();
    }//GEN-LAST:event_cmbENVItemStateChanged

    private void cmbGROUPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGROUPItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbGROUPItemStateChanged

    private void btnEXCELMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEXCELMouseClicked
//        try {
//            Send_File_to_Slack("1", "2", "3");
//        } catch (IOException ex) {
//            txtLOG.append("\r\n\r\n=== Send_File_to_Slack > ERROR: " + ex.getMessage());
//        }
        btnEXCEL.setEnabled(false);
        Report();
        btnEXCEL.setEnabled(true);        
    }//GEN-LAST:event_btnEXCELMouseClicked

    private void _siteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__siteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event__siteActionPerformed
    private void LOAD_ENV(){
        if(cmbENV.getSelectedItem().contains("Staging")){
            BaseAPI = "https://api.compassdigital.org/staging";
            env = "ST";
            url = "https://staging.adminpanel.compassdigital.org/";
        } else if (cmbENV.getSelectedItem().contains("Dev")){
            BaseAPI = "https://api.compassdigital.org/dev";
            env = "DE";
            url = "https://dev.adminpanel.compassdigital.org/";
        } else{
            BaseAPI = "https://api.compassdigital.org/v1";
            env = "PR";
            url = "https://adminpanel.compassdigital.org/";
        }     
        Get_P2_TKN_and_Slack_IDs();
        LOAD_CONFIG();
        GetSites_API();
        GetGroups_API();        
    }
    private boolean Driver() {
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try {
            String cwd = System.getProperty("user.dir");
            txtLOG.append("\r\n\r\n=== CWD: " + cwd);
            if(WsOS.toLowerCase().contains("windows")){
                System.setProperty("webdriver.chrome.driver", cwd + "/chromedriver.exe");                
            }
            if(WsOS.toLowerCase().contains("mac")){
                System.setProperty("webdriver.chrome.driver", cwd + "/chromedriver");                
            }
            ChromeOptions op = new ChromeOptions();
             //op.addExtensions(new File("/path/to/extension.crx"));
            op.addArguments("disable-infobars");
            op.addArguments("--start-maximized");
//            op.addArguments("--start-minimized");
//            op.addArguments("enable-automation");
//            op.addArguments("--no-sandbox");
//            op.addArguments("--disable-extensions");
//            op.addArguments("--dns-prefetch-disable");
//            op.addArguments("--disable-gpu");
            if(_headless.isSelected()){
                op.addArguments("--headless");
            }

            op.setPageLoadStrategy(PageLoadStrategy.NORMAL);

            d1 = new ChromeDriver(op);
            WebDriver.Timeouts implicitlyWait = d1.manage().timeouts().implicitlyWait((long) Wait, TimeUnit.SECONDS);
            wait = new FluentWait(d1).withTimeout(Duration.ofSeconds((long)Wait))			
			.pollingEvery(Duration.ofSeconds((long)200)) 			
			.ignoring(NoSuchElementException.class); // wait for Visible / Clickable   
            timeout = new WebDriverWait(d1, (long) Timeout);  // wait for load
            wait_msg = new WebDriverWait(d1, 100);  // wait for alert
            setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return true;
        }
        catch (Exception ex) {
            txtLOG.append("\r\n\r\n=== Web Driver > ERROR: " + ex.getMessage());
            setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return false;
        }   

    }
    private void BW1_DoWork() { 
        BW1 = new SwingWorker() {             
            Instant dw_start = Instant.now();

            @Override
            protected String doInBackground() throws Exception   { // define what thread will do here 
                New_ID = "9" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMddHHmm"));
                if (_login.isSelected()) { SCOPE += "Login";
                    EX += " - " + "\t" + " === Login, Dashboard" + "\t" + " ===== " + "\t" + " == Login, Dashboard Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    __login.run(_users.isSelected());
                    EX += " - " + "\t" + " === ^ Login, Dashboard" + "\t" + " ===== " + "\t" + " == ^ Login, Dashboard End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                }
                if (_site.isSelected()) { SCOPE += ", Site";
                    EX += " - " + "\t" + " === Sites" + "\t" + " ===== " + "\t" + " == Sites Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __site.run();
                    EX += " - " + "\t" + " === ^ Sites" + "\t" + " ===== " + "\t" + " == ^ Sites End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }
                if (_brand.isSelected()) { SCOPE += ", Brand";
                    EX += " - " + "\t" + " === Brand" + "\t" + " ===== " + "\t" + " == Brand Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __brand.run();
                    EX += " - " + "\t" + " === ^ Brand" + "\t" + " ===== " + "\t" + " == ^ Brand End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }
                if (_group_management.isSelected()) { SCOPE += ", Group Mgm";
                    EX += " - " + "\t" + " === Group Management" + "\t" + " ===== " + "\t" + " == Group Management Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __group_management.run();
                    EX += " - " + "\t" + " === ^ Group Management" + "\t" + " ===== " + "\t" + " == ^ Group Management End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }
                if (_menu_manager.isSelected()) { SCOPE += ", Menu Mgm";
                    EX += " - " + "\t" + " === Menu Manager" + "\t" + " ===== " + "\t" + " == Menu Manager Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    if("DE".equals(env)){
                        __menu_manager_dev.run(); 
                    }else{
                        __menu_manager.run();                        
                    }
                    EX += " - " + "\t" + " === ^ Menu Manager" + "\t" + " ===== " + "\t" + " == ^ Menu Manager End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                }
                if (_orders.isSelected()) { SCOPE += ", Orders";
                    EX += " - " + "\t" + " === Orders" + "\t" + " ===== " + "\t" + " == Orders Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __orders.run();
                    EX += " - " + "\t" + " === ^ Orders" + "\t" + " ===== " + "\t" + " == ^ Orders End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                }
                if (_users.isSelected()) {  SCOPE += ", Users";
                    EX += " - " + "\t" + " === Users" + "\t" + " ===== " + "\t" + " == Users Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __user.run();
                    EX += " - " + "\t" + " === ^ Users" + "\t" + " ===== " + "\t" + " == ^ Users End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }
                if (_sales_reporting.isSelected()) { SCOPE += ", Sales Rep";
                    EX += " - " + "\t" + " === Sales Reporting" + "\t" + " ===== " + "\t" + " == Sales Reporting Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __sales_reporting.run();
                    EX += " - " + "\t" + " === ^ Sales Reporting" + "\t" + " ===== " + "\t" + " == ^ Sales Reporting End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                }
                if (_announcements.isSelected()) { SCOPE += ", Announ";
                    EX += " - " + "\t" + " === Announcements" + "\t" + " ===== " + "\t" + " == Announcements Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __announcements.run();
                    EX += " - " + "\t" + " === ^ Announcements" + "\t" + " ===== " + "\t" + " == ^ Announcements End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }                    
                if (_promo.isSelected()) { SCOPE += ", Promos";
                    EX += " - " + "\t" + " === Promo Management" + "\t" + " ===== " + "\t" + " == Promo Management Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __promo.run();
                    EX += " - " + "\t" + " === ^ Promo Management" + "\t" + " ===== " + "\t" + " == ^ Promo Management End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }                    
                if (_resent_updates.isSelected()) { SCOPE += ", Resent Updates";
                    EX += " - " + "\t" + " === Recent Updates" + "\t" + " ===== " + "\t" + " == Recent Updates Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __resent_updates.run();
                    EX += " - " + "\t" + " === ^ Recent Updates" + "\t" + " ===== " + "\t" + " == ^ Recent Updates End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                }
                if (_brand_new.isSelected() && !"PR".equals(env)) { SCOPE += ", Add Brand";
                    EX += " - " + "\t" + " === Site > Add Brand" + "\t" + " ===== " + "\t" + " == Add Brand Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __brand_new.run(_site_new.isSelected());
                    EX += " - " + "\t" + " === ^ Site > Add Brand" + "\t" + " ===== " + "\t" + " == ^ Add Brand End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }
                if (_site_new.isSelected() && !"PR".equals(env)) { SCOPE += ", New Site";
                    EX += " - " + "\t" + " === New Site" + "\t" + " ===== " + "\t" + " == New Site Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __site_new.run();
                    EX += " - " + "\t" + " === ^ New Site" + "\t" + " ===== " + "\t" + " == ^ New Site End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }

                // ============================== Last Blocks
                if (_logout.isSelected()) { SCOPE += ", LogOut";
                    EX += " - " + "\t" + " === Logout" + "\t" + " ===== " + "\t" + " == Logout Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __logout.run();
                    EX += " - " + "\t" + " === ^ Logout" + "\t" + " ===== " + "\t" + " == ^ Logout End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }
                if (_password.isSelected()) { SCOPE += ", Forgot PW";  
                    EX += " - " + "\t" + " === Forgot PW" + "\t" + " ===== " + "\t" + " == Forgot PW Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    __password.run();
                    EX += " - " + "\t" + " === ^ Forgot PW" + "\t" + " ===== " + "\t" + " == ^ Forgot PW End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }
                if (_roles.isSelected()) { SCOPE += ", Roles";   
                    EX += " - " + "\t" + " === User Permissions" + "\t" + " ===== " + "\t" + " == User Permissions Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    if (!_logout.isSelected()){
                       __logout.run();
                    }
                    __user_permission.run();
                    EX += " - " + "\t" + " === ^ User Permissions" + "\t" + " ===== " + "\t" + " == ^ User Permissions End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                }                    
                if(_f > 0) {
                    return "=== Execution finished @" + LocalDateTime.now().format(Time_12_formatter) + " with " + _f + " FAIL(s)";
                }else{
                    return "=== Execution finished @" + LocalDateTime.now().format(Time_12_formatter);  
                } 
            }  
            @Override
            protected void done() { // this method is called when the background thread finishes execution  
                try  { 
                    BW2.cancel(true); // =============================================
                    txtLOG.append("\r\n\r\n========   " + "Execution step-by-step log..." + "   ========");                
                    EX = "AP3 " + env + " - v" + Ver + 
                    " - Steps: " + _t + ", Passed: " + _p + ", Warnings: " + _w + ", Failed: " + _f + ". Scope: " + SCOPE + "\r\n" +
                     "#\tTC\tTarget/Element/Input\tExpected/Output\tResult\tComment/Error\tResp\tTime\tJIRA\r\n"
                     + EX;
                    txtLOG.append("\r\n" + EX.replaceAll("\t", " > "));

                    String statusMsg = (String) get(); 
                    txtLOG.append("\r\n" + statusMsg);   
                    txtLOG.setCaretPosition(txtLOG.getDocument().getLength()); 
                    
                    BW2 = null;
                    BW1 = null;
                    
                    if(d1 != null) {
                        d1.quit(); 
                    }
                }  
                catch (InterruptedException | ExecutionException ex)  { 
                    txtLOG.append("\r\n- Exception: " + ex.getMessage()); 
                    txtLOG.setCaretPosition(txtLOG.getDocument().getLength()); 
                } 
                DD = Duration.between(dw_start, Instant.now());
                Summary = "Steps: " + _t + ", Passed: " + _p + ", Failed: " + _f + ", Warnings: " + _w;
                
                try {
                    String t_rep = "";
                    if (!"".equals(r_time.trim())) {
                        double[] am0 = Arrays.stream(r_time.split(";")).mapToDouble(Double::parseDouble).toArray();
                        if (am0.length > 0)
                        {
                            Arrays.sort(am0);
                            double total = 0;
                            for(int i=0; i < am0.length; i++){
                                total = total + am0[i];
                            }
                            t_calls = am0.length;
                            t_min = am0[0] / (double)1000;
                            t_avg = (total / am0.length) / (double)1000;
                            t_max = am0[am0.length - 1]  / (double)1000; 
                            p_50 = Func.p50(am0) / (double)1000;
                            p_90 = Func.p90(am0) / (double)1000;
                            
                            DecimalFormat df = new DecimalFormat("#.##");
                            t_rep += "=== Total Calls: " + t_calls + ", Response Times (sec) - Min: " + df.format(t_min) +
                                                                        ", Avg: " + df.format(t_avg) +
                                                                        ", Max: " + df.format(t_max) +
                                                                        ", p50: " + df.format(p_50) +
                                                                        ", p90: " + df.format(p_90);
                        }
                        txtLOG.append("\r\n" + t_rep);
                    }
                } catch(Exception ex){
                    txtLOG.append("\r\n\r\n=== LOG_UPDATE > Call Times parsing ERROR: " + ex.getMessage());
                }  
                btnRUN.setEnabled(true);
                txtLOG.append("\r\n=== Duration: " + (DD.toHours()) + "h, " + (DD.toMinutes() % 60) + "m, " + (DD.getSeconds() % 60) + "s");
                txtLOG.append("\r\n=== " + Summary); // shown in EX top
                setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));   
                        if(F.trim() != ""){
                            btnFAILS.setEnabled(true);
                        } else{
                            btnFAILS.setEnabled(false);
                        }
                LOG_UPDATE(); // ========================================================
            } 
        }; 
        BW1.execute();  // executes the swingworker on worker thread 
    }
    private void BW2_DoWork(){
        // class="vts__snackbar__message" // v-snack__content
        // _this.overlay.className += ' v-overlay--active';
        // v-snack v-application vts__snackbar v-snack--active v-snack--top ap-toast  
        // v-snack__wrapper error
        BW2 = new SwingWorker() {             
            @Override
            protected String doInBackground() throws Exception   { 
                while (true){
                    Toast_Msg = "";
                    Thread.sleep(1000);
                    try{
                        //wait_msg.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("[role='alert']"))); 
                        Toast_Msg = d1.findElement(By.cssSelector("[role='alert']")).getAttribute("textContent");
                        if(Toast_Msg.toLowerCase().contains("successfully") || 
                                Toast_Msg.toLowerCase().contains("has been updated") || 
                                Toast_Msg.toLowerCase().contains("has been added") || 
                                Toast_Msg.toLowerCase().contains("has been removed") ||
                                Toast_Msg.toLowerCase().contains(" have been reset") ||
                                Toast_Msg.toLowerCase().contains(" saved")) {
                            _t++;
                            _p++;
                            EX += _t + "\t" + " === Snackbar Toast Msg" + "\t" + "[role='alert']" + "\t" + Toast_Msg + "\t" + "PASS" + "\t" + " - " + "\t" + " - " + "\t" + LocalDateTime.now().format(Time_12_formatter) + "\t" + " - " + "\r\n";                            
                        } else if(Toast_Msg.toLowerCase().contains("could not")||
                                Toast_Msg.toLowerCase().contains("fail")) {
                            _t++;
                            _f++;
                            F += _t + " > FAIL - " + Toast_Msg + "\r\n";
                            EX += _t + "\t" + " === Snackbar Toast Msg" + "\t" + "[role='alert']" + "\t" + Toast_Msg + "\t" + "FAIL" + "\t" + " - " + "\t" + " - " + "\t" + LocalDateTime.now().format(Time_12_formatter) + "\t" + " - " + "\r\n";                           
                        } else if(Toast_Msg.toLowerCase().contains("fix") || Toast_Msg.toLowerCase().contains("error")) {
                            _t++;
                            _w++;
                            EX += _t + "\t" + " === Snackbar Toast Msg" + "\t" + "[role='alert']" + "\t" + Toast_Msg + "\t" + "WARN" + "\t" + " - " + "\t" + " - " + "\t" + LocalDateTime.now().format(Time_12_formatter) + "\t" + " - " + "\r\n";                           
                        } else {
                            _t++;
                            _w++;
                            //F += _t + " > WARN - " + tt + "\r\n";
                            EX += _t + "\t" + " === Snackbar Toast Msg" + "\t" + "[role='alert']" + "\t" + Toast_Msg + "\t" + "WARN" + "\t" + " - " + "\t" + " - " + "\t" + LocalDateTime.now().format(Time_12_formatter) + "\t" + " - " + "\r\n";                           
                        }
                        Thread.sleep(3000);
                    } catch (Exception ex){
                        // =======
                    }
                }
            }
        }; 
        BW2.execute();  // executes the swingworker on worker thread          
    }
    private void LOAD_DATA(){
        txtMENU.setText("TIM HORTONS");
        app = cmbAPP.getSelectedItem().toString();

        CONFIG = false;
        txtLOG.append("\r\n\r\n=== Ready >");
        txtLOG.append("\r\n=== In not Headless mode Do Not interact with your Browser");
        txtLOG.append("\r\n=== (no mouse hover!) during Automation run");
        txtLOG.append("\r\n=== Good Luck...\r\n");  
    }
    private void Get_P2_TKN_and_Slack_IDs(){
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [_value] FROM[dbo].[keys] WHERE [_key] = 'S_OAuth_TKN'");
            rs.next();
            S_OAuth_TKN = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== Get S_OAuth_TKN > ERROR: " + ex.getMessage());
        }
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [_value] FROM[dbo].[keys] WHERE [_key] = 'S_Client_ID'");
            rs.next();
            S_Client_ID = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== Get S_Client_ID > ERROR: " + ex.getMessage());
        }
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [_value] FROM[dbo].[keys] WHERE [_key] = 'S_Client_Secret'");
            rs.next();
            S_Client_Secret = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== Get S_Client_Secret > ERROR: " + ex.getMessage());
        }
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [_value] FROM[dbo].[keys] WHERE [_key] = 'S_Signing_Secret'");
            rs.next();
            S_Signing_Secret = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== Get S_Signing_Secret > ERROR: " + ex.getMessage());
        }
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [_value] FROM[dbo].[keys] WHERE [_key] = 'S_Hook'");
            rs.next();
            S_Hook = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== Get S_Hook > ERROR: " + ex.getMessage());
        }
        
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [ap_token] FROM[dbo].[env] WHERE [DESCRIPTION] = '" + cmbENV.getSelectedItem() + "'");
            rs.next();
            P2_TKN = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== P2_TKN > ERROR: " + ex.getMessage());
        }
    }
    private void GetSites_API() {
        d1LastRow = -1;
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Sites from API...");
        sw1.start();
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [id] FROM[dbo].[p2_app] WHERE [app] = '" + cmbAPP.getSelectedItem() + 
                    "' AND [env] LIKE '" + cmbENV.getSelectedItem().toString() + "%'");
            rs.next();
            appId = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== Get S_OAuth_TKN > ERROR: " + ex.getMessage());
        }
        String[] SitesColumnsName = {"Site","Platform","Country","Id"}; 
        DefaultTableModel SitesModel = new DefaultTableModel();
        SitesModel.setColumnIdentifiers(SitesColumnsName);
        DV1.setModel(SitesModel);
        
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/multigroup/" + appId);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + response.getStatusLine().getStatusCode() + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            
            String site = "";
            String country = "null";
            String id = "null";

            JSONObject addresses = null;
            JSONObject meta = null;
            JSONArray Groups = json.getJSONArray("groups");
            for (int i = 0; i < Groups.length(); i++) {
                JSONObject object = Groups.getJSONObject(i);
                if(object.has("address")){
                    addresses = object.getJSONObject("address");
                }
                if(object.has("meta")){
                    meta = object.getJSONObject("meta");
                }                
                if(object.has("name")){
                    site = object.getString("name");   
                }
                if(addresses != null && addresses.has("country")){
                    country = addresses.getString("country");   
                }
                if(object.has("id")){
                    id = object.getString("id");
                }
                platform = "DH";
                if (meta != null && meta.has("migrated") && meta.getBoolean("migrated"))
                {
                    platform = "CDL migrated";
                }
                if (id.length() > 50) {
                    platform = "CDL";
                }
                SitesModel.addRow(new Object[]{site, platform, country, id});
            }
            DV1.setModel(SitesModel);
            DV1.setDefaultEditor(Object.class, null);
            DV1.getColumnModel().getColumn(0).setPreferredWidth(250);
            DV1.getColumnModel().getColumn(1).setPreferredWidth(70);
            DV1.getColumnModel().getColumn(2).setPreferredWidth(50);
            DV1.getColumnModel().getColumn(3).setPreferredWidth(400);
   
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
            }
        }
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        if (DV1.getRowCount() > 0) {
            DV1.changeSelection(0, 0, false, false);
            if (CONFIG && !"".equals(SITE.trim())) {
                for(int row = 0; row < DV1.getRowCount(); row++) {
                    if(DV1.getValueAt(row, 0).equals(SITE)){
                        DV1.changeSelection(row, 0, false, false);
                        break;
                    }
                }
            }
            DV1.repaint();
            GetBrands_API();
        }
        lblSITES.setText(app + " Sites (" + DV1.getRowCount() + " found)");
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetBrands_API() {
        if (d1LastRow == DV1.getSelectedRow()) {
           return;
        }
        d1LastRow = DV1.getSelectedRow();
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Brands from API...");
        sw1.start();     
        
        String[] BrandsColumnsName = {"Station","Location","Id"}; 
        DefaultTableModel BrandssModel = new DefaultTableModel();
        BrandssModel.setColumnIdentifiers(BrandsColumnsName);
        DV2.setModel(BrandssModel);
        
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3) + "?extended=true&nocache=1"); 
            //HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3)); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);

                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Location = json.getJSONArray("locations");
            JSONArray brands = null;
            
            String brand;
            String location = "";
            String id;
            if (Location != null) {
                for (Object l : Location) {
                    JSONObject loc = (JSONObject) l;
                    if (loc.has("brands")) {
                        brands = loc.getJSONArray("brands");
                    }
                    if (brands != null) {
                        for (Object b : brands) {
                            JSONObject br = (JSONObject) b;
                            brand = br.getString("name");
                            if (!br.isNull("location_description")) {
                                location = br.getString("location_description");
                            }
                            id = br.getString("id");
                            BrandssModel.addRow(new Object[]{brand, location, id});
                        }
                    }
                }
            }
            DV2.setModel(BrandssModel);    
            DV2.setDefaultEditor(Object.class, null);
            DV2.getColumnModel().getColumn(0).setPreferredWidth(150);
            DV2.getColumnModel().getColumn(1).setPreferredWidth(70);
            DV2.getColumnModel().getColumn(2).setPreferredWidth(50);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (Exception ex) {
                txtLOG.append("\r\n- Exception: " + ex.getMessage());   
            }
        } 
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
   
        if (DV2.getRowCount() > 0) {
            DV2.changeSelection(0, 0, false, false);
            if (CONFIG && !"".equals(BRAND.trim()))
            {
                for(int row = 0; row < DV2.getRowCount(); row++) {
                    if(DV2.getValueAt(row, 0).equals(BRAND)){
                        DV2.changeSelection(row, 0, false, false);
                        //DV1.scrollRectToVisible(DV1.getCellRect(row, 0, true));
                        break;
                    } 
                }
            }
            BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
        } else {
            BrandID = "null";
        }

        SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
        lblBRANDS.setText("Selected Site Brands (" + DV2.getRowCount() + " found)");
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetGroups_API() {     
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Groups/Sector from API...");
        cmbGROUP.removeAll();
        sw1.start();     
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/sector?_provider=cdl"); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Sectors = json.getJSONArray("sectors");           
            String S_NAME = "";
            T_Index = -1;
            for (int i = 0; i < Sectors.length(); i++) {
                S_NAME = Sectors.getJSONObject(i).getString("name");
                cmbGROUP.addItem(S_NAME);
                if(S_NAME.equals(GROUP)){
                    T_Index = i;
                }
            }
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());  
            setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        } finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLOG.append("\r\n- Exception: " + ex.getMessage());   
                setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            }
        } 
        if(T_Index != -1){
            cmbGROUP.select(T_Index);
        }else{
            if(cmbGROUP.getItemCount() > 0){
                cmbGROUP.select(0);
            }
        }
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    
    private void LOG_UPDATE(){  
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try {
            PreparedStatement _update = conn.prepareStatement("UPDATE [dbo].[aw_result] SET " +
                          " [Date] = ?" +       // 1
                          ", [Time] = ?" +      // 2
                          ", [app] = ?" +       // 3
                          ", [url] = ?" +       // 4
                          ", [summary] = ?" +   // 5
                              ", [t_calls] = ?" +   // 6
                              ", [t_min] = ?" +     // 7
                              ", [t_avg] = ?" +     // 8
                              ", [t_max] = ?" +     // 9
                              ", [p_50] = ?" +      // 10
                              ", [p_90] = ?" +      // 11
                          ", [test_type] = ?" +     // 12
                          ", [user_id] = ?" +       // 13
                          ", [user_ws] = ?" +       // 14
                          ", [env] = ?" +       // 15
                          ", [Result] = ?" +    // 16
                          ", [Status] = ?" +    // 17
                          ", [Excel] = ?" +     // 18     
                      " WHERE [app] = 'AP3_" + env + "' AND [Status] = 'Running'");
            _update.setString(1, LocalDateTime.now().format(Date_formatter));
            _update.setString(2, LocalDateTime.now().format(Time_24_formatter));
            _update.setString(3, "AP3_" + env);
            _update.setString(4, url);
            _update.setString(5, Summary + " (dur: " + DD.toHours() + ":" + (DD.toMinutes() % 60) + ":" + (DD.getSeconds() % 60) + ")");         
            _update.setInt(6, t_calls);   
            _update.setDouble(7, t_min);    
            _update.setDouble(8, t_avg);     
            _update.setDouble(9, t_max);    
            _update.setDouble(10, p_50);    
            _update.setDouble(11, p_90);    
            _update.setString(12, r_type);    
            _update.setString(13, UserID);    
            _update.setString(14, WsID);    
            _update.setString(15, cmbBROW.getSelectedItem().toString());    
            _update.setString(16, txtLOG.getText());    
            _update.setString(17, "Scope: " + SCOPE);    
            _update.setString(18, EX);    
            int row = _update.executeUpdate();
//            txtLOG.append("\r\n\r\n=== LOG_UPDATE > OK (" + row + " row)");
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== LOG_UPDATE > SQL ERROR: " + ex.getMessage());
        }
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void LOG_START(){
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try {
            PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[aw_result] (" +
                          "[Date]" +   // 1
                          ", [Time]" +   // 2
                          ", [app]" +   // 3
                          ", [url]" +   // 4
                          ", [summary]" +   // 5
                              ", [t_calls]" +   // 6
                              ", [t_min]" +   // 7
                              ", [t_avg]" +   // 8
                              ", [t_max]" +   // 9
                              ", [p_50]" +   // 10
                              ", [p_90]" +   // 11
                          ", [test_type]" +   // 12
                          ", [user_id]" +   // 13
                          ", [user_ws]" +   // 14
                          ", [env]" +   // 15
                          ", [Result]" +   // 16
                          ", [Status]" +   // 17
                          ", [Excel]" +     // 18
                    ") VALUES (" +
                        "?" +     // 1
                        ",?" +    // 2
                        ",?" +    // 3
                        ",?" +    // 4
                        ",?" +    // 5
                        ",?" +    // 6
                        ",?" +    // 7
                        ",?" +    // 8
                        ",?" +    // 9
                        ",?" +    // 10
                        ",?" +    // 11
                        ",?" +    // 12
                        ",?" +    // 13
                        ",?" +    // 14
                        ",?" +    // 15
                        ",?" +    // 16
                        ",?" +    // 17
                        ",?" +    // 18
                    ")");
            _insert.setString(1, LocalDateTime.now().format(Date_formatter));
            _insert.setString(2, LocalDateTime.now().format(Time_24_formatter));
            _insert.setString(3, "AP3_" + env);
            _insert.setString(4, url);
            _insert.setString(5, "Running...");         
            _insert.setString(6, "0");   
            _insert.setString(7, "0");    
            _insert.setString(8, "0");     
            _insert.setString(9, "0");    
            _insert.setString(10, "0");    
            _insert.setString(11, "0");    
            _insert.setString(12, r_type);    
            _insert.setString(13, UserID);    
            _insert.setString(14, WsID);    
            _insert.setString(15, cmbBROW.getSelectedItem().toString());    
            _insert.setString(16, "=== Job is running... ===\r\n" + "");    
            _insert.setString(17, "Running");    
            _insert.setString(18, "None");    
            int row = _insert.executeUpdate();
//            txtLOG.append("\r\n\r\n=== LOG_START > OK (" + row + " row)");
        }  catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== LOG_START > SQL ERROR: " + ex.getMessage());
        }
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void Send_File_to_Slack(String Slack_File_Name, String File_Path, String Channel_Name) throws IOException {
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        String RES;
        try{
            //File file = new File(File_Path); // "C:\xTT_Data\TAX_Upload\JJKitchen_Android_Staging_P2_Func_27_Apr_2020_03_48PM.xlsx"
            //File file = new File("C:\\xTT_Data\\TAX_Upload\\JJKitchen_Android_Staging_P2_Func_27_Apr_2020_03_48PM.xlsx"); 
            String Path = "C:\\xTT_Data\\TAX_Upload\\JJKitchen_Android_Staging_P2_Func_27_Apr_2020_03_48PM.xlsx";

//            MultipartEntityBuilder builder = MultipartEntityBuilder.create(); 
//            builder.addTextBody("token", AP3.S_OAuth_TKN);
//            builder.addTextBody("channels", "xtt_test"); // Channel_Name
//            builder.addTextBody("initial_comment", "Test Message");
//            builder.addBinaryBody(File_Path, file);
//            HttpEntity multiPartEntity = builder.build();
//
//            CloseableHttpClient httpclient = HttpClients.createDefault();
//            HttpPost httpPost = new HttpPost("https://slack.com/api/files.upload");
//            httpPost.setEntity(multiPartEntity); 
//
//            HttpResponse response = httpclient.execute(httpPost);
//            RES = response.toString().replace("{", "{\r\n").replace("}", "\r\n}").replace(",", ",\r\n");
            byte[] data = Files.readAllBytes(Paths.get(Path));
            SlackSession session = SlackSessionFactory.createWebSocketSlackSession(A.A.S_OAuth_TKN);
            session.connect();
            SlackChannel channel = session.findChannelByName("xtt_reports");
            SlackMessageHandle sendMessage = session.sendFile(channel, data, "File_Name_On_Slack");
            RES = sendMessage.getReply().toString(); 

            
            txtLOG.append("\r\n\r\n=== Send_File_to_Slack >  No error" + "\r\n" + RES);
        }catch(Exception ex) {
            txtLOG.append("\r\n\r\n=== Send_File_to_Slack > ERROR: " + ex.getMessage());
        }
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void LOAD_CONFIG(){
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try {
            SQL = "SELECT [_conf] FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'WEB' AND [app] = 'AP3' AND [env] = '" + env + "'";
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery(SQL);
            rs.next();
            C = rs.getString(1);
            if (C.contains(": ")) {
                String c;
                c = C.substring(C.indexOf("cmbBROW:")); c = c.substring(0, c.indexOf("\r\n")).trim(); cmbBROW.setSelectedItem(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("env:")); c = c.substring(0, c.indexOf("\r\n")).trim(); env = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("app:")); c = c.substring(0, c.indexOf("\r\n")).trim(); app = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("url:")); c = c.substring(0, c.indexOf("\r\n")).trim(); url = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("GROUP:")); c = c.substring(0, c.indexOf("\r\n")).trim(); GROUP = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("GL_MENU:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtMENU.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("SITE:")); c = c.substring(0, c.indexOf("\r\n")).trim(); SITE = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("BRAND:")); c = c.substring(0, c.indexOf("\r\n")).trim(); BRAND = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("CAN:")); c = c.substring(0, c.indexOf("\r\n")).trim(); CAN = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("txtEMail:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtADMIN_ID.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtPW:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtADMIN_PW.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtSM:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtSM_ID.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtSM_PW:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtSM_PW.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtIM:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtIM_ID.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtIM_PW:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtIM_PW.setText(c.substring(c.indexOf(" ")).trim());

                c = C.substring(C.indexOf("nShowPage:")); c = c.substring(0, c.indexOf("\r\n")).trim(); nShowPage.setValue(Double.parseDouble(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("nWaitElement:")); c = c.substring(0, c.indexOf("\r\n")).trim(); nWaitElement.setValue(Double.parseDouble(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("nWaitLoad:")); c = c.substring(0, c.indexOf("\r\n")).trim(); nWaitLoad.setValue(Double.parseDouble(c.substring(c.indexOf(" ")).trim()));

                c = C.substring(C.indexOf("_site:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _site.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_site_new:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _site_new.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_brand_new:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _brand_new.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_brand:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _brand.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_group_management:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _group_management.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_menu_manager:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _menu_manager.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_orders:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _orders.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_sales_reporting:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _sales_reporting.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_users:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _users.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_resent_updates")); c = c.substring(0, c.indexOf("\r\n")).trim(); _resent_updates.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_announcements:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _announcements.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_promo")); c = c.substring(0, c.indexOf("\r\n")).trim(); _promo.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_password:")); c = c.substring(0, c.indexOf("\r\n")).trim(); _password.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_roles")); c = c.substring(0, c.indexOf("\r\n")).trim(); _roles.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_all_data")); c = c.substring(0, c.indexOf("\r\n")).trim(); _all_data.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_logout")); c = c.substring(0, c.indexOf("\r\n")).trim(); _logout.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                CONFIG = true;
                txtLOG.append("\r\n\r\n=== LOAD_CONFIG > OK");
            } else {
                CONFIG = false;
                txtLOG.append("\r\n\r\n=== WEB / AP3, User: " + UserID + ", Env: " + env + " > No saved Configuration Found");
            }
        } catch (Exception ex) {
            CONFIG = false;
            txtLOG.append("\r\n\r\n=== LOAD_CONFIG > ERROR: " + ex.getMessage());
        }
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void SAVE_CONFIG() {
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        String _S = "n/a";
        String _B = "n/a";
        try {
            if(DV1.getRowCount() > 0){
                _S = DV1.getValueAt(DV1.getSelectedRow(), 0).toString();
            }
            if(DV2.getRowCount() > 0){
                _B = DV2.getValueAt(DV2.getSelectedRow(), 0).toString();
            }
            C = "";
            C += "env: " + env + "\r\n";
            C += "app: " + cmbAPP.getSelectedItem().toString() + "\r\n";
            C += "cmbBROW: " + cmbBROW.getSelectedItem()+ "\r\n";
            C += "url: " + url + "\r\n";
            C += "GROUP: " + cmbGROUP.getSelectedItem() + "\r\n";
            C += "GL_MENU: " + txtMENU.getText() + "\r\n";
            C += "SITE: " + _S + "\r\n";
            C += "BRAND: " + _B + "\r\n";
            C += "CAN: " + CAN + "\r\n";
            
            C += "txtEMail: " + txtADMIN_ID.getText() + "\r\n";
            C += "txtPW: " + txtADMIN_PW.getText()  + "\r\n";
            C += "txtSM: " + txtSM_ID.getText()  + "\r\n";
            C += "txtSM_PW: " + txtSM_PW.getText() + "\r\n";
            C += "txtIM: " + txtIM_ID.getText()+ "\r\n";
            C += "txtIM_PW: " + txtIM_PW.getText() + "\r\n";

            C += "_site: " + _site.isSelected() + "\r\n";
            C += "_site_new: " + _site_new.isSelected() + "\r\n";
            C += "_brand_new: " + _brand_new.isSelected() + "\r\n";
            C += "_brand: " + _brand.isSelected() + "\r\n";
            C += "_group_management: " + _group_management.isSelected() + "\r\n";
            C += "_menu_manager: " + _menu_manager.isSelected() + "\r\n";
            C += "_orders: " + _orders.isSelected() + "\r\n";
            C += "_sales_reporting: " + _sales_reporting.isSelected() + "\r\n";
            C += "_users: " + _users.isSelected() + "\r\n";
            C += "_resent_updates: " + _resent_updates.isSelected() + "\r\n";
            C += "_announcements: " + _announcements.isSelected() + "\r\n";
            C += "_promo: " + _promo.isSelected() + "\r\n";
            C += "_password: " + _password.isSelected() + "\r\n";
            C += "_roles: " + _roles.isSelected() + "\r\n";           
            C += "_all_data: " + _all_data.isSelected() + "\r\n";
            C += "_logout: " + _logout.isSelected() + "\r\n";
            
            C += "nShowPage: " + nShowPage.getValue() + "\r\n";
            C += "nWaitElement: " + nWaitElement.getValue() + "\r\n";
            C += "nWaitLoad: " + nWaitLoad.getValue()+ "\r\n";
        } catch (Exception ex)  {
            txtLOG.append("\r\n\r\n=== SAVE_CONFIG > ERROR: " + ex.getMessage());
            return;
        }
        
        try {
            SQL = "DELETE FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'WEB' AND [app] = 'AP3' AND [env] = '" + env + "'";
            Statement _del = conn.createStatement();
            _del.execute(SQL);
            PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[a_config]" +
                       "([user_id]" +   // 1
                       ",[env]" +       // 2
                       ",[platform]" +  // 3
                       ",[app]" +       // 4
                       ",[_conf]" +     // 5
                    ") VALUES (" +
                       "?" +
                       ",?" +
                       ",?" +
                       ",?" +
                       ",?" +
                      ")");
            _insert.setString(1, UserID);
            _insert.setString(2, env);
            _insert.setString(3, "WEB");
            _insert.setString(4, "AP3");
            _insert.setString(5, C);           
            int row = _insert.executeUpdate();
            txtLOG.append("\r\n\r\n=== SAVE_CONFIG > OK (" + row + " row)");
            //txtLOG.append("\r\n\r\n=== " + C);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== SAVE_CONFIG > SQL ERROR: " + ex.getMessage());
        }
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

    private static Duration DD;
    private static SwingWorker BW1;  
    private static SwingWorker BW2; 
    private boolean CONFIG = false;
    private String C = "";
    private int d1LastRow = -1; 
    private String SCOPE;
   
    // <editor-fold defaultstate="collapsed" desc="Form Variables Declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DV1;
    private javax.swing.JTable DV2;
    private javax.swing.JCheckBox _all_data;
    private javax.swing.JCheckBox _announcements;
    private javax.swing.JCheckBox _brand;
    private javax.swing.JCheckBox _brand_new;
    private javax.swing.JCheckBox _group_management;
    private javax.swing.JCheckBox _headless;
    private javax.swing.JCheckBox _login;
    private javax.swing.JCheckBox _logout;
    private javax.swing.JCheckBox _menu_manager;
    private javax.swing.JCheckBox _orders;
    private javax.swing.JCheckBox _password;
    private javax.swing.JCheckBox _promo;
    private javax.swing.JCheckBox _resent_updates;
    private javax.swing.JCheckBox _roles;
    private javax.swing.JCheckBox _sales_analytics;
    private javax.swing.JCheckBox _sales_reporting;
    private javax.swing.JCheckBox _site;
    private javax.swing.JCheckBox _site_new;
    private javax.swing.JCheckBox _users;
    private javax.swing.JButton btnEXCEL;
    private javax.swing.JButton btnFAILS;
    private javax.swing.JButton btnLOG;
    private javax.swing.JButton btnRUN;
    private javax.swing.JButton btnSAVE_OPT;
    private java.awt.Choice cmbAPP;
    private javax.swing.JComboBox<String> cmbBROW;
    private java.awt.Choice cmbENV;
    private java.awt.Choice cmbGROUP;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label14;
    private java.awt.Label label21;
    private java.awt.Label label22;
    private java.awt.Label label23;
    private java.awt.Label label24;
    private java.awt.Label label25;
    private java.awt.Label label26;
    private java.awt.Label label5;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JLabel lblBRANDS;
    private javax.swing.JLabel lblSITES;
    private javax.swing.JSpinner nShowPage;
    private javax.swing.JSpinner nWaitElement;
    private javax.swing.JSpinner nWaitLoad;
    private javax.swing.JTextField txtADMIN_ID;
    private javax.swing.JTextField txtADMIN_PW;
    private javax.swing.JTextField txtIM_ID;
    private javax.swing.JTextField txtIM_PW;
    private javax.swing.JTextArea txtLOG;
    private javax.swing.JTextField txtMENU;
    private javax.swing.JTextField txtSM_ID;
    private javax.swing.JTextField txtSM_PW;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
