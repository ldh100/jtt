/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AP3;

import A.Func;
import static A.A.*;
import com.google.common.base.Stopwatch;
import java.awt.Cursor;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeDriverService;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.ElementScrollBehavior;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.support.ui.FluentWait;
/**
 *
 * @author Oleg.Spozito
 */
public class AP3 extends javax.swing.JInternalFrame {
    /**
     * Creates new form AP3
     */
    public AP3() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSITES = new javax.swing.JLabel();
        lblBRANDS = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        _login = new javax.swing.JCheckBox();
        _all_data = new javax.swing.JCheckBox();
        _site_new = new javax.swing.JCheckBox();
        _site = new javax.swing.JCheckBox();
        _brand = new javax.swing.JCheckBox();
        _orders = new javax.swing.JCheckBox();
        _resent_updates = new javax.swing.JCheckBox();
        _announcements = new javax.swing.JCheckBox();
        _promo = new javax.swing.JCheckBox();
        _sales_reporting = new javax.swing.JCheckBox();
        _menu_manager = new javax.swing.JCheckBox();
        _users = new javax.swing.JCheckBox();
        _password = new javax.swing.JCheckBox();
        _logout = new javax.swing.JCheckBox();
        _roles = new javax.swing.JCheckBox();
        _brand_new = new javax.swing.JCheckBox();
        _smart_analytics = new javax.swing.JCheckBox();
        _group_management = new javax.swing.JCheckBox();
        lblSITES8 = new javax.swing.JLabel();
        lblSITES12 = new javax.swing.JLabel();
        _sales_analytics = new javax.swing.JCheckBox();
        _notifications = new javax.swing.JCheckBox();
        txtDH_Id = new javax.swing.JTextField();
        lblSITES15 = new javax.swing.JLabel();
        txtComp = new javax.swing.JTextField();
        txtSector = new javax.swing.JTextField();
        _bulk_apply = new javax.swing.JCheckBox();
        _images = new javax.swing.JCheckBox();
        _reschedule_menu = new javax.swing.JCheckBox();
        _sales_report_hidden = new javax.swing.JCheckBox();
        _orders_report_hidden = new javax.swing.JCheckBox();
        _brand_closure = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        DV1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DV2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        nShowPage = new javax.swing.JSpinner();
        nWaitElement = new javax.swing.JSpinner();
        nWaitLoad = new javax.swing.JSpinner();
        lblSITES7 = new javax.swing.JLabel();
        lblSITES9 = new javax.swing.JLabel();
        lblSITES10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        cmbBrow = new javax.swing.JComboBox<>();
        btnRun = new javax.swing.JButton();
        btnLog = new javax.swing.JButton();
        btnFails = new javax.swing.JButton();
        btnExel = new javax.swing.JButton();
        btnSave_Opt = new javax.swing.JButton();
        lblSITES11 = new javax.swing.JLabel();
        lblSITES13 = new javax.swing.JLabel();
        lblSITES14 = new javax.swing.JLabel();
        cmbEnv = new javax.swing.JComboBox<>();
        cmbApp = new javax.swing.JComboBox<>();
        _slack = new javax.swing.JCheckBox();
        _headless = new javax.swing.JCheckBox();
        txtADMIN_ID = new javax.swing.JTextField();
        txtSM_ID = new javax.swing.JTextField();
        txtIM_ID = new javax.swing.JTextField();
        txtADMIN_PW = new javax.swing.JTextField();
        txtSM_PW = new javax.swing.JTextField();
        txtIM_PW = new javax.swing.JTextField();
        lblSITES1 = new javax.swing.JLabel();
        lblSITES2 = new javax.swing.JLabel();
        lblSITES3 = new javax.swing.JLabel();
        lblSITES4 = new javax.swing.JLabel();
        lblSITES5 = new javax.swing.JLabel();
        lblSITES6 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);
        setIconifiable(true);
        setTitle("AP3 Automation Manager >>> loading, please wait ... ... ... ...");
        setMinimumSize(new java.awt.Dimension(858, 527));
        setName("AP3"); // NOI18N
        setVerifyInputWhenFocusTarget(false);
        setVisible(true);
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                AP3_AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSITES.setText("Sites");
        lblSITES.setAlignmentX(0.5F);
        getContentPane().add(lblSITES, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 4, 360, -1));

        lblBRANDS.setText("Selected Site - Brands");
        lblBRANDS.setName("lblBRANDS"); // NOI18N
        getContentPane().add(lblBRANDS, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 4, 268, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Scope"));
        jPanel1.setToolTipText("");
        jPanel1.setDoubleBuffered(false);
        jPanel1.setName("Scope"); // NOI18N

        _login.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _login.setSelected(true);
        _login.setText("Admin Login");
        _login.setEnabled(false);
        _login.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _login.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _login.setRequestFocusEnabled(false);

        _all_data.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _all_data.setText("Show all data rows");
        _all_data.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _all_data.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _all_data.setRequestFocusEnabled(false);

        _site_new.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _site_new.setText("New Site (not in Prod)");
        _site_new.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _site_new.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _site_new.setRequestFocusEnabled(false);

        _site.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _site.setText("Sites");
        _site.setContentAreaFilled(false);
        _site.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _site.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        _brand.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _brand.setText("Brand");
        _brand.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _brand.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _brand.setRequestFocusEnabled(false);

        _orders.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _orders.setText("Orders");
        _orders.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _orders.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _orders.setRequestFocusEnabled(false);

        _resent_updates.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _resent_updates.setText("Recent Updates");
        _resent_updates.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _resent_updates.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _resent_updates.setRequestFocusEnabled(false);

        _announcements.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _announcements.setText("Announcements");
        _announcements.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _announcements.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _announcements.setRequestFocusEnabled(false);

        _promo.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _promo.setText("Promo Management");
        _promo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _promo.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _promo.setRequestFocusEnabled(false);

        _sales_reporting.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _sales_reporting.setText("Sales Reporting");
        _sales_reporting.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _sales_reporting.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _sales_reporting.setRequestFocusEnabled(false);

        _menu_manager.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _menu_manager.setText("Menu Manager");
        _menu_manager.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _menu_manager.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _menu_manager.setRequestFocusEnabled(false);

        _users.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _users.setSelected(true);
        _users.setText("Users");
        _users.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _users.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _users.setRequestFocusEnabled(false);

        _password.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _password.setText("Forgot Password");
        _password.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _password.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _password.setRequestFocusEnabled(false);

        _logout.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _logout.setText("User Feedback & Logout");
        _logout.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _logout.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _logout.setRequestFocusEnabled(false);

        _roles.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _roles.setText("Roles Permissions");
        _roles.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _roles.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _roles.setRequestFocusEnabled(false);

        _brand_new.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _brand_new.setText("Add Brand (not in Prod)");
        _brand_new.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _brand_new.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _brand_new.setRequestFocusEnabled(false);

        _smart_analytics.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _smart_analytics.setText("Smart Analytics");
        _smart_analytics.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _smart_analytics.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _smart_analytics.setRequestFocusEnabled(false);

        _group_management.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _group_management.setText("Group Management");
        _group_management.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _group_management.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _group_management.setRequestFocusEnabled(false);

        lblSITES8.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES8.setText("Group/Sector:");
        lblSITES8.setAlignmentX(0.5F);

        lblSITES12.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES12.setText("Company/Global Menu:");
        lblSITES12.setAlignmentX(0.5F);

        _sales_analytics.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _sales_analytics.setText("Sales Analytics");
        _sales_analytics.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _sales_analytics.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _sales_analytics.setRequestFocusEnabled(false);

        _notifications.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _notifications.setText("Notifications");
        _notifications.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _notifications.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _notifications.setRequestFocusEnabled(false);

        txtDH_Id.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtDH_Id.setText("Fails, no test");

        lblSITES15.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES15.setText("> Import DH Menu Id:");
        lblSITES15.setAlignmentX(0.5F);

        txtComp.setEditable(false);
        txtComp.setBackground(new java.awt.Color(255, 255, 255));
        txtComp.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtComp.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        txtSector.setEditable(false);
        txtSector.setBackground(new java.awt.Color(255, 255, 255));
        txtSector.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtSector.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        _bulk_apply.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _bulk_apply.setText("Bulk Apply");
        _bulk_apply.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _bulk_apply.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _bulk_apply.setRequestFocusEnabled(false);

        _images.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _images.setText("Images");
        _images.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _images.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _images.setRequestFocusEnabled(false);

        _reschedule_menu.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _reschedule_menu.setText("Reschedule menu");
        _reschedule_menu.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _reschedule_menu.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _reschedule_menu.setRequestFocusEnabled(false);

        _sales_report_hidden.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _sales_report_hidden.setText("Sales-rep hidden");
        _sales_report_hidden.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _sales_report_hidden.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _sales_report_hidden.setRequestFocusEnabled(false);

        _orders_report_hidden.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _orders_report_hidden.setText("Order-rep hidden");
        _orders_report_hidden.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _orders_report_hidden.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _orders_report_hidden.setRequestFocusEnabled(false);

        _brand_closure.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _brand_closure.setText("Brand Closure");
        _brand_closure.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _brand_closure.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _brand_closure.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(_brand_closure, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                        .addComponent(_site, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(_sales_reporting, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_brand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_login, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(292, 292, 292))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(_menu_manager, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(lblSITES15)
                .addGap(2, 2, 2)
                .addComponent(txtDH_Id)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(245, 245, 245)
                .addComponent(txtComp)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblSITES8, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(169, 169, 169)
                        .addComponent(lblSITES12, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(txtSector, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(_sales_analytics, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_smart_analytics, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_bulk_apply, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_images)
                            .addComponent(_announcements, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_group_management)
                            .addComponent(_promo)
                            .addComponent(_notifications, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_orders, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_sales_report_hidden)
                            .addComponent(_orders_report_hidden, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(_resent_updates)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(_all_data, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_site_new, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_brand_new, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_reschedule_menu, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_users, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_roles, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_logout, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_password, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_login, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_images, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_all_data, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(_site, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(_brand, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(_site_new, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_brand_new, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_resent_updates, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(_announcements, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_brand_closure, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(_group_management, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(_reschedule_menu)))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_sales_reporting, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_promo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_users, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_sales_analytics, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_notifications, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_roles, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(_smart_analytics, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(_orders, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(_password, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_bulk_apply, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(_orders_report_hidden, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                .addComponent(_sales_report_hidden, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDH_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(_menu_manager, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSITES15))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSITES8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(lblSITES12)))
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 152, 424, 264));

        DV1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        DV1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV1.setCellSelectionEnabled(true);
        DV1.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV1.setName("DV1"); // NOI18N
        DV1.setRequestFocusEnabled(false);
        DV1.setRowHeight(18);
        DV1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV1.getTableHeader().setReorderingAllowed(false);
        DV1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(DV1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 22, 428, 260));

        DV2.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV2.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV2.setName("DV2"); // NOI18N
        DV2.setOpaque(false);
        DV2.setRowHeight(18);
        DV2.getTableHeader().setReorderingAllowed(false);
        DV2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(DV2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 22, 420, 80));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Wait (sec):"));

        nShowPage.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nShowPage.setModel(new javax.swing.SpinnerNumberModel(0.2d, 0.2d, 2.0d, 0.2d));
        nShowPage.setAutoscrolls(true);
        nShowPage.setName("nShowPage"); // NOI18N

        nWaitElement.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nWaitElement.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.0d, 5.0d, 0.5d));
        nWaitElement.setName("nWaitElement"); // NOI18N

        nWaitLoad.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        nWaitLoad.setModel(new javax.swing.SpinnerNumberModel(30.0d, 0.0d, 60.0d, 5.0d));
        nWaitLoad.setName("nWaitLoad"); // NOI18N

        lblSITES7.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES7.setText("Show page:");
        lblSITES7.setAlignmentX(0.5F);

        lblSITES9.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES9.setText("Timeout:");
        lblSITES9.setAlignmentX(0.5F);

        lblSITES10.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES10.setText("Element exists:");
        lblSITES10.setAlignmentX(0.5F);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSITES7, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(nShowPage, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(lblSITES10, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(nWaitElement, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSITES9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(nWaitLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nWaitElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nWaitLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSITES7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSITES9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSITES10, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nShowPage, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(2, 2, 2))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 104, 416, -1));

        txtLog.setEditable(false);
        txtLog.setColumns(20);
        txtLog.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtLog.setRows(5);
        txtLog.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtLog.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtLog.setMinimumSize(new java.awt.Dimension(50, 19));
        txtLog.setPreferredSize(null);
        jScrollPane1.setViewportView(txtLog);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 354, 428, 148));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbBrow.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jPanel3.add(cmbBrow, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 28, 78, 20));

        btnRun.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnRun.setForeground(new java.awt.Color(204, 0, 0));
        btnRun.setText("Run");
        btnRun.setName("btnRun"); // NOI18N
        btnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRunMouseClicked(evt);
            }
        });
        jPanel3.add(btnRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 52, 78, 32));

        btnLog.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnLog.setText(" < Log");
        btnLog.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogMouseClicked(evt);
            }
        });
        jPanel3.add(btnLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 60, 84, 22));

        btnFails.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnFails.setText("Show Fails");
        btnFails.setEnabled(false);
        btnFails.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnFails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFailsMouseClicked(evt);
            }
        });
        jPanel3.add(btnFails, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 28, 84, 22));

        btnExel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnExel.setText("Excel Rep");
        btnExel.setEnabled(false);
        btnExel.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnExel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExelMouseClicked(evt);
            }
        });
        jPanel3.add(btnExel, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 4, 84, 22));

        btnSave_Opt.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnSave_Opt.setText("Save Setup");
        btnSave_Opt.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSave_Opt.setName("btnSAVE"); // NOI18N
        btnSave_Opt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSave_OptMouseClicked(evt);
            }
        });
        jPanel3.add(btnSave_Opt, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 116, 22));

        lblSITES11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES11.setText("Browser:");
        lblSITES11.setAlignmentX(0.5F);
        jPanel3.add(lblSITES11, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 12, 72, 16));

        lblSITES13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES13.setText("Environment:");
        lblSITES13.setAlignmentX(0.5F);
        jPanel3.add(lblSITES13, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 12, 92, 16));

        lblSITES14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES14.setText("Application:");
        lblSITES14.setAlignmentX(0.5F);
        jPanel3.add(lblSITES14, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 12, 92, 16));

        cmbEnv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbEnv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEnvItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbEnv, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 28, 116, 20));

        cmbApp.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbApp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAppItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 28, 108, 20));

        _slack.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        _slack.setText("Report to Slack");
        _slack.setToolTipText("");
        _slack.setRequestFocusEnabled(false);
        jPanel3.add(_slack, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 52, 112, 14));

        _headless.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        _headless.setText("Headless <<<<");
        _headless.setToolTipText("");
        _headless.setRequestFocusEnabled(false);
        jPanel3.add(_headless, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 68, 108, 14));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 416, 416, 84));

        txtADMIN_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtADMIN_ID.setText("oleg.spozito@compassdigital.io");
        getContentPane().add(txtADMIN_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 284, 184, -1));

        txtSM_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtSM_ID.setText("cdl.test.xtt@gmail.com");
        getContentPane().add(txtSM_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 308, 184, -1));

        txtIM_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtIM_ID.setText("cdl.test.xtt+rn@gmail.com");
        txtIM_ID.setToolTipText("");
        getContentPane().add(txtIM_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 332, 184, -1));

        txtADMIN_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtADMIN_PW.setText("Password1");
        getContentPane().add(txtADMIN_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 284, 84, -1));

        txtSM_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtSM_PW.setText("Password1");
        getContentPane().add(txtSM_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 332, 84, -1));

        txtIM_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtIM_PW.setText("Password1");
        getContentPane().add(txtIM_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 308, 84, -1));

        lblSITES1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES1.setText("Runner:");
        lblSITES1.setToolTipText("");
        lblSITES1.setAlignmentX(0.5F);
        getContentPane().add(lblSITES1, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 332, 72, 16));

        lblSITES2.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES2.setText("PW:");
        lblSITES2.setAlignmentX(0.5F);
        getContentPane().add(lblSITES2, new org.netbeans.lib.awtextra.AbsoluteConstraints(312, 336, -1, -1));

        lblSITES3.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES3.setText("Mobile User:");
        lblSITES3.setToolTipText("");
        lblSITES3.setAlignmentX(0.5F);
        getContentPane().add(lblSITES3, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 312, 76, -1));

        lblSITES4.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES4.setText("AP3 Admin:");
        lblSITES4.setAlignmentX(0.5F);
        getContentPane().add(lblSITES4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 288, 60, -1));

        lblSITES5.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES5.setText("PW:");
        lblSITES5.setAlignmentX(0.5F);
        getContentPane().add(lblSITES5, new org.netbeans.lib.awtextra.AbsoluteConstraints(312, 288, -1, -1));

        lblSITES6.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSITES6.setText("PW:");
        lblSITES6.setAlignmentX(0.5F);
        getContentPane().add(lblSITES6, new org.netbeans.lib.awtextra.AbsoluteConstraints(312, 312, -1, -1));

        getAccessibleContext().setAccessibleName("AP3");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DV1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV1MouseClicked
        if (wdLastRow == DV1.getSelectedRow() || DV1.getRowCount() == 0) {
           return;
        }
        SITE = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 0));
        SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
        COUNTRY = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 2));
        wdLastRow = DV1.getSelectedRow(); 
        GetBrands();
    }//GEN-LAST:event_DV1MouseClicked
    private void AP3_AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_AP3_AncestorAdded
        jPanel1.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent arg0) {
                Load_Form();
            }
            @Override
            public void componentMoved(ComponentEvent arg0) {
                //System.err.println("componentMoved");
            }
            @Override
            public void componentShown(ComponentEvent arg0) {
                //System.err.println("componentShown");
            }
            @Override
            public void componentHidden(ComponentEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }//GEN-LAST:event_AP3_AncestorAdded
    private void Load_Form(){     
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        Load = true;
        
        cmbBrow.addItem("Chrome");  
        cmbBrow.addItem("Firefox"); 
        cmbBrow.addItem("Edge"); 
        if(WsOS.toLowerCase().contains("windows")){
            cmbBrow.addItem("IE11");             
        }
        if(WsOS.toLowerCase().contains("mac")){
            cmbBrow.addItem("Safari");             
        }
        cmbBrow.setSelectedIndex(0); // Chrome
                
        cmbApp.addItem("Boost");
        cmbApp.addItem("Canteen");
        cmbApp.addItem("JJKitchen");
        cmbApp.addItem("Rogers");
        cmbApp.addItem("StandardCognition");
        cmbApp.addItem("Tacit");
        cmbApp.addItem("Thrive");
        
        cmbEnv.addItem("Staging");
        cmbEnv.addItem("Production");
        cmbEnv.addItem("Development");
     
        cmbEnv.setSelectedIndex(0); // 2 Select Development
        cmbApp.setSelectedIndex(0);
        
        Load = false;
        LOAD_ENV();
        app = cmbApp.getSelectedItem().toString();
        CONFIG = false;  
        this.setTitle("AP3 Automation Manager");
    }
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        F_COUNT--;
        if(BW1 != null && !BW1.isCancelled()) BW1.cancel(true);
        if(BW2 != null && !BW2.isCancelled()) BW2.cancel(true);
    }//GEN-LAST:event_formInternalFrameClosed
    private void DV2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV2MouseClicked
        if (d2LastRow == DV2.getSelectedRow() || DV2.getRowCount() == 0) {
           return;
        }
        d2LastRow = DV2.getSelectedRow(); 
        BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
        Location = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 1));
        GetBrandSector();
    }//GEN-LAST:event_DV2MouseClicked
    private void cmbAppItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAppItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            cmbApp.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            this.setTitle("AP3 Automation Manager >>> Changing Application,  please wait...");
            app = cmbApp.getSelectedItem().toString();
            GetSites();
            cmbApp.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_cmbAppItemStateChanged
    private void cmbEnvItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEnvItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            cmbEnv.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            this.setTitle("AP3 Automation Manager >>> Changing Environment,  please wait...");
            LOAD_ENV();
            this.setTitle("AP3 Automation Manager");
            cmbEnv.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_cmbEnvItemStateChanged
    private void btnSave_OptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSave_OptMouseClicked
        SAVE_CONFIG();
    }//GEN-LAST:event_btnSave_OptMouseClicked
    private void btnExelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExelMouseClicked
        if(!btnExel.isEnabled()) {return;}
        btnExel.setEnabled(false);
        Report(true);
        btnExel.setEnabled(true);
    }//GEN-LAST:event_btnExelMouseClicked
    private void btnFailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFailsMouseClicked
        if(!btnFails.isEnabled()) {return;}
        String R = A.Func.SHOW_LOG_FILE(F, "txt");
        if(!R.equals("OK")){
            txtLog.append(R + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
    }//GEN-LAST:event_btnFailsMouseClicked
    private void btnLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogMouseClicked
        String R = A.Func.SHOW_LOG_FILE(txtLog.getText(), "txt");
        if(!R.equals("OK")){
            txtLog.append(R + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
    }//GEN-LAST:event_btnLogMouseClicked
    private void btnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRunMouseClicked
        if(!btnRun.isEnabled()){
            return;
        }
        btnRun.setEnabled(false);
        btnFails.setEnabled(false);
        btnExel.setEnabled(false);
        //txtLog.setText("");
        txtLog.append("=== Execution started @" + LocalDateTime.now().format(Time_12_formatter) + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());
        WaitForElement = Math.round((double)nWaitElement.getValue() *1000);
        LoadTimeOut = (double)nWaitLoad.getValue() *1000;
        sleep = (double)nShowPage.getValue() *1000;

        EX = "";
        F = "";
        t_calls = 0;
        t_min =  0;
        t_avg = 0;
        t_max =  0;
        p_50 = 0;
        p_90 = 0;
        _t = 0; // Total
        _p = 0; // Passed
        _f = 0; // Failed
        _w = 0; // Warn
        r_time = "";

        ADMIN_ID = txtADMIN_ID.getText();
        ADMIN_PW = txtADMIN_PW.getText();
        SM_ID = txtADMIN_ID.getText();
        SM_PW = txtADMIN_ID.getText();
        IM_ID = txtADMIN_ID.getText();
        IM_PW = txtADMIN_ID.getText();
        ALL_DATA = _all_data.isSelected();
        DH_Menu_ID = txtDH_Id.getText(); // like NWEJgN87Q3Sw46JaQ1Q, length > 18
        SCOPE = "";

        if(DV1.getRowCount() > 0) {
            SITE = DV1.getValueAt(DV1.getSelectedRow(), 0).toString();
            platform = DV1.getValueAt(DV1.getSelectedRow(), 1).toString(); // platform
            COUNTRY = DV1.getValueAt(DV1.getSelectedRow(), 2).toString();
        }
        if(DV2.getRowCount() > 0) {
            BRAND = DV2.getValueAt(DV2.getSelectedRow(), 0).toString();
        }

        SECTOR = txtSector.getText();
        GL_MENU = txtComp.getText();
        //GroupID = "";
        //CompanyID = "";

        if(_headless.isSelected()) {
            txtLog.append("=== Headless mode is selected - Browser is hidden" + "\r\n");
            txtLog.append("=== Please wait for report...\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
        txtLog.append("=== Starting Web Driver..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength());

        r_type = "ad-hoc";

        if(sw1.isRunning()){
            sw1.reset();
        }
        sw1.start();

        if(Driver()){
            txtLog.append("=== Web Driver Started in " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
            sw1.reset();
            LOG_START(); // ========================================================
            
            BW1_DoWork(
                // parameters?
            );
            BW2_DoWork(
                // parameters?
            );
        }
    }//GEN-LAST:event_btnRunMouseClicked

    private void LOAD_ENV(){
        if(cmbEnv.getSelectedItem().toString().contains("Staging")){
            BaseAPI = "https://api.compassdigital.org/staging";
            env = "ST";
            url = "https://staging.adminpanel.compassdigital.org/";
        } else if (cmbEnv.getSelectedItem().toString().contains("Dev")){
            BaseAPI = "https://api.compassdigital.org/dev";
            env = "DE";
            url = "https://dev.adminpanel.compassdigital.org/";
        } else{
            BaseAPI = "https://api.compassdigital.org/v1";
            env = "PR";
            url = "https://adminpanel.compassdigital.org/";
        }     
        Get_AP3_TKN();
        LOAD_CONFIG();
        if (CONFIG) {
            Load = true;
            cmbApp.setSelectedItem(app);
            Load = false;
        }
        app = cmbApp.getSelectedItem().toString();
        GetSectors(); // load 1st to be ready for selection by BrandSector
        GetSites();
    }
    private boolean Driver() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try {

            txtLog.append("=== CWD: " + CWD + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            
            if(WsOS.toLowerCase().contains("windows")){
                System.setProperty("webdriver.chrome.driver", CWD + "\\chromedriver.exe");                
                System.setProperty("webdriver.edge.driver", CWD + "\\msedgedriver.exe");  
                System.setProperty("webdriver.gecko.driver", CWD + "\\geckodriver.exe"); 
                System.setProperty("webdriver.ie.driver", CWD + "\\IEDriverServer.exe"); 
            }
            if(WsOS.toLowerCase().contains("mac")){
                System.setProperty("webdriver.chrome.driver", CWD + "/chromedriver");                
                System.setProperty("webdriver.edge.driver", CWD + "/msedgedriver");  
                System.setProperty("webdriver.gecko.driver", CWD + "/geckodriver");
                System.setProperty("webdriver.safari.driver", CWD + "/safaridriver");
            }
            switch (cmbBrow.getSelectedItem().toString()) {
                case "Chrome":
                        ChromeOptions chrome_op = new ChromeOptions();
                        //chrome_op.addExtensions(new File("/path/to/extension.crx"));
                        chrome_op.addArguments("--disable-infobars");
                        chrome_op.addArguments("--start-maximized");
            //            chrome_op.addArguments("--start-minimized");
            //            chrome_op.addArguments("enable-automation");
            //            chrome_op.addArguments("--no-sandbox");
            //            chrome_op.addArguments("--disable-extensions");
            //            chrome_op.addArguments("--dns-prefetch-disable");
            //            chrome_op.addArguments("--disable-gpu");
                        if(_headless.isSelected()){
                            chrome_op.addArguments("--headless");
                        }
                        chrome_op.setPageLoadStrategy(PageLoadStrategy.NORMAL);
                        d1 = new ChromeDriver(chrome_op);
                    break;
                case "Edge":
//                    txtLog.append("=== Edge Driver:" + System.getProperty("webdriver.edge.driver") + "\r\n");
//                    txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
                        EdgeDriverService edgeServise = EdgeDriverService.createDefaultService();
                        //edgeServise.SuppressInitialDiagnosticInformation = true;
//                        service.seVerboseLogging = false;
//                        service.UseSpecCompliantProtocol = false;
                        EdgeOptions edge_op = new EdgeOptions();
                       //edge_op.setPageLoadStrategy("normal");
                        edge_op.setCapability( "disable-infobars", true);
                        edge_op.setCapability( "disable-gpu", true);
                        edge_op.setCapability("useAutomationExtension", false);
//                                PageLoadStrategy = PageLoadStrategy.Default,
//                                UnhandledPromptBehavior = UnhandledPromptBehavior.Dismiss
                        if(_headless.isSelected()){
                            edge_op.setCapability( "headless", true);
                        }
                        
                        d1 = new EdgeDriver(edgeServise, edge_op);
                    break;
                case "Firefox":
                        FirefoxProfile profile = new FirefoxProfile();
                        profile.setPreference("network.proxy.no_proxies_on", "localhost");
                        profile.setPreference("javascript.enabled", true);

//                        DesiredCapabilities capabilities = DesiredCapabilities.;
//                        capabilities.setCapability("marionette", true);
//                        capabilities.setCapability(FirefoxDriver.PROFILE, profile);

                        FirefoxOptions ff_op = new FirefoxOptions();
                        //ff_op.merge(capabilities);
                        //ff_op.addPreference("browser.link.open_newwindow", 3);
                        //ff_op.addPreference("browser.link.open_newwindow.restriction", 0);

                        d1 = new FirefoxDriver(ff_op);
                    break;
                case "IE11":
                        InternetExplorerOptions ie_op = new InternetExplorerOptions();
                        ie_op.ignoreZoomSettings(); // Not necessarily in case 100% zoom.
                        ie_op.introduceFlakinessByIgnoringSecurityDomains(); // Necessary to skip protected  mode setup
                        ie_op.elementScrollTo(ElementScrollBehavior.BOTTOM);
                        ie_op.disableNativeEvents();
//                        var options = new InternetExplorerOptions
//                        {
//                                IgnoreZoomLevel = true,
//                                IntroduceInstabilityByIgnoringProtectedModeSettings = true,
//                                RequireWindowFocus = false,
//                                ElementScrollBehavior = InternetExplorerElementScrollBehavior.Top, // with botton click doesn't work
//                                EnsureCleanSession = true,
//                                //AcceptInsecureCertificates = true,
//                                EnablePersistentHover = true,
//                                UnhandledPromptBehavior = UnhandledPromptBehavior.Accept,
//                                EnableNativeEvents = false //  with true > click problem
//                        };
                        d1 = new InternetExplorerDriver(ie_op);
                    break;
                case "Safari":
                        //To do on MAC machine // =====================================
                        d1 = new SafariDriver();     
                    break;
            }

            d1.manage().window().maximize();
            d1.manage().deleteAllCookies(); // =================================
            
            d1.manage().timeouts().pageLoadTimeout((long) LoadTimeOut, TimeUnit.MILLISECONDS);
            d1.manage().timeouts().setScriptTimeout((long) LoadTimeOut, TimeUnit.MILLISECONDS);
            d1.manage().timeouts().implicitlyWait(WaitForElement, TimeUnit.MILLISECONDS);            
            loadTimeout = new FluentWait(d1).withTimeout(Duration.ofMillis((long) LoadTimeOut))			
			.pollingEvery(Duration.ofMillis(200))  			
			.ignoring(NoSuchElementException.class);      
            
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return true;
        } catch (Exception ex) {
            txtLog.append("=== Web Driver > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return false;
        }   
    }
    private void BW1_DoWork() { 
        BW1 = new SwingWorker() {             
            Instant dw_start = Instant.now();

            @Override
            protected String doInBackground() throws Exception   { 
                New_ID = "9" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMddHHmm"));
                if (_login.isSelected()) { 
                    SCOPE += "Login";
                    EX += " - " + "\t" + " === Login, Dashboard" + "\t" + " ===== " + "\t" + " == Login, Dashboard Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    AP3_login.run(_users.isSelected());
                    EX += " - " + "\t" + " === ^ Login, Dashboard" + "\t" + " ===== " + "\t" + " == ^ Login, Dashboard End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_site.isSelected()) { 
                    SCOPE += ", Site";
                    EX += " - " + "\t" + " === Sites" + "\t" + " ===== " + "\t" + " == Sites Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_site.run();
                    EX += " - " + "\t" + " === ^ Sites" + "\t" + " ===== " + "\t" + " == ^ Sites End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_brand.isSelected()) { 
                    SCOPE += ", Brand";
                    EX += " - " + "\t" + " === Brand" + "\t" + " ===== " + "\t" + " == Brand Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_brand.run();
                    EX += " - " + "\t" + " === ^ Brand" + "\t" + " ===== " + "\t" + " == ^ Brand End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_brand_closure.isSelected()) { 
                    SCOPE += ", Brand Closure";
                    EX += " - " + "\t" + " === Brand Closure" + "\t" + " ===== " + "\t" + " == Brand ClosureBegin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_brand_closure.run();
                    EX += " - " + "\t" + " === ^ Brand Closure" + "\t" + " ===== " + "\t" + " == ^ Brand Closure End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }                 
                
                
                if (_images.isSelected()) { 
                    SCOPE += ", Images";
                    EX += " - " + "\t" + " === Images" + "\t" + " ===== " + "\t" + " == Images Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_images.run();
                    EX += " - " + "\t" + " === ^ Images" + "\t" + " ===== " + "\t" + " == ^ Images End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_group_management.isSelected()) { 
                    SCOPE += ", Group Mgm";
                    EX += " - " + "\t" + " === Group Management" + "\t" + " ===== " + "\t" + " == Group Management Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_group_management.run();
                    EX += " - " + "\t" + " === ^ Group Management" + "\t" + " ===== " + "\t" + " == ^ Group Management End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_bulk_apply.isSelected()) { 
                    SCOPE += ", Bulk Apply";
                    EX += " - " + "\t" + " === Bulk Apply" + "\t" + " ===== " + "\t" + " == Bulk Apply Begin>>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_bulk_apply.run();                        
                    EX += " - " + "\t" + " === ^ Bulk Apply" + "\t" + " ===== " + "\t" + " == ^ Bulk Apply End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }                
                if (_menu_manager.isSelected()) { 
                    SCOPE += ", Menu Mgm";
                    EX += " - " + "\t" + " === Menu Manager" + "\t" + " ===== " + "\t" + " == Menu Manager Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_menu_manager.run();                        
                    EX += " - " + "\t" + " === ^ Menu Manager" + "\t" + " ===== " + "\t" + " == ^ Menu Manager End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_orders.isSelected()) { 
                    SCOPE += ", Orders";
                    EX += " - " + "\t" + " === Orders" + "\t" + " ===== " + "\t" + " == Orders Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_orders.run();
                    EX += " - " + "\t" + " === ^ Orders" + "\t" + " ===== " + "\t" + " == ^ Orders End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_users.isSelected()) {  
                    SCOPE += ", Users";
                    EX += " - " + "\t" + " === Users" + "\t" + " ===== " + "\t" + " == Users Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_user.run();
                    EX += " - " + "\t" + " === ^ Users" + "\t" + " ===== " + "\t" + " == ^ Users End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_sales_reporting.isSelected()) { 
                    SCOPE += ", Sales Rep Hidden Station";
                    EX += " - " + "\t" + " === Sales Reporting" + "\t" + " ===== " + "\t" + " == Sales Reporting Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_sales_reporting.run();
                    EX += " - " + "\t" + " === ^ Sales Reporting" + "\t" + " ===== " + "\t" + " == ^ Sales Reporting End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_sales_report_hidden.isSelected()) { 
                    SCOPE += ", Sales Rep";
                    EX += " - " + "\t" + " === Sales Report for Hidden Stations" + "\t" + " ===== " + "\t" + " == Sales Report for Hidden Stations Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_sales_reporting_for_hidden_stations.run();
                    EX += " - " + "\t" + " === ^ Sales Report for Hidden Stations" + "\t" + " ===== " + "\t" + " == ^ Sales Report for Hidden Stations End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }                
                if (_orders_report_hidden.isSelected()) { 
                    SCOPE += ", Order Rep Hidden Station";
                    EX += " - " + "\t" + " === Order Report for Hidden Stations" + "\t" + " ===== " + "\t" + " == Order Report for Hidden Stations Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_orders_reporting_for_hidden_station.run();
                    EX += " - " + "\t" + " === ^ Order Report for Hidden Stations" + "\t" + " ===== " + "\t" + " == ^ Order Report for Hidden Stations End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }                 
                
                
                if (_sales_analytics.isSelected()) { 
                    SCOPE += ", Sales Analytics";
                    EX += " - " + "\t" + " === Sales Analytics" + "\t" + " ===== " + "\t" + " == Sales Reporting Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_sales_analytics.run();
                    EX += " - " + "\t" + " === ^ Sales Analytics" + "\t" + " ===== " + "\t" + " == ^ Sales Reporting End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_smart_analytics.isSelected()) { 
                    SCOPE += ", Smart Analytics";
                    EX += " - " + "\t" + " === Smart Analytics" + "\t" + " ===== " + "\t" + " == Sales Reporting Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_smart_analytics.run();
                    EX += " - " + "\t" + " === ^ Smart Analytics" + "\t" + " ===== " + "\t" + " == ^ Sales Reporting End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                } 
                if (_announcements.isSelected()) { 
                    SCOPE += ", Announ";
                    EX += " - " + "\t" + " === Announcements" + "\t" + " ===== " + "\t" + " == Announcements Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_announcements.run();
                    EX += " - " + "\t" + " === ^ Announcements" + "\t" + " ===== " + "\t" + " == ^ Announcements End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }                    
                if (_notifications.isSelected()) { 
                    SCOPE += ", Notifications";
                    EX += " - " + "\t" + " === Notifications" + "\t" + " ===== " + "\t" + " == Notifications Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_notifications.run();
                    EX += " - " + "\t" + " === ^ Notifications" + "\t" + " ===== " + "\t" + " == ^ Notifications End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_promo.isSelected()) { 
                    SCOPE += ", Promos";
                    EX += " - " + "\t" + " === Promo Management" + "\t" + " ===== " + "\t" + " == Promo Management Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_promo.run();
                    EX += " - " + "\t" + " === ^ Promo Management" + "\t" + " ===== " + "\t" + " == ^ Promo Management End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }                    
                if (_resent_updates.isSelected()) { 
                    SCOPE += ", Resent Updates";
                    EX += " - " + "\t" + " === Recent Updates" + "\t" + " ===== " + "\t" + " == Recent Updates Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_resent_updates.run();
                    EX += " - " + "\t" + " === ^ Recent Updates" + "\t" + " ===== " + "\t" + " == ^ Recent Updates End" + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_brand_new.isSelected() && !"PR".equals(env)) { 
                    SCOPE += ", Add Brand";
                    EX += " - " + "\t" + " === Site > Add Brand" + "\t" + " ===== " + "\t" + " == Add Brand Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_brand_new.run(_site_new.isSelected());
                    EX += " - " + "\t" + " === ^ Site > Add Brand" + "\t" + " ===== " + "\t" + " == ^ Add Brand End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_reschedule_menu.isSelected()) { 
                    SCOPE += ", Reschedule menu";
                    EX += " - " + "\t" + " === Reschedule Menu" + "\t" + " ===== " + "\t" + " == Add Reschedule Menu Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_reschedule_menu.run();
                    EX += " - " + "\t" + " === ^ Reschedule Menu" + "\t" + " ===== " + "\t" + " == ^ Add Reschedule Menu End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_site_new.isSelected() && !"PR".equals(env)) { 
                    SCOPE += ", New Site";
                    EX += " - " + "\t" + " === New Site" + "\t" + " ===== " + "\t" + " == New Site Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_site_new.run();
                    EX += " - " + "\t" + " === ^ New Site" + "\t" + " ===== " + "\t" + " == ^ New Site End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }

                // ============================== Last Blocks
                if (_logout.isSelected()) { 
                    SCOPE += ", LogOut";
                    EX += " - " + "\t" + " === Logout" + "\t" + " ===== " + "\t" + " == Logout Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_logout.run();
                    EX += " - " + "\t" + " === ^ Logout" + "\t" + " ===== " + "\t" + " == ^ Logout End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_password.isSelected()) { 
                    SCOPE += ", Forgot PW";  
                    EX += " - " + "\t" + " === Forgot PW" + "\t" + " ===== " + "\t" + " == Forgot PW Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    AP3_password.run();
                    EX += " - " + "\t" + " === ^ Forgot PW" + "\t" + " ===== " + "\t" + " == ^ Forgot PW End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }
                if (_roles.isSelected()) { 
                    SCOPE += ", Roles";   
                    EX += " - " + "\t" + " === User Permissions" + "\t" + " ===== " + "\t" + " == User Permissions Begin >>" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    if (!_logout.isSelected()){
                       AP3_logout.run();
                    }
                    AP3_user_permission.run();
                    EX += " - " + "\t" + " === ^ User Permissions" + "\t" + " ===== " + "\t" + " == ^ User Permissions End" + "\t" + " - " + "\t" + " - " + "\t" + " -" + "\t" + " - " + "\r\n";
                    Thread.sleep(1500);
                }                    
                if(_f > 0) {
                    return "=== Execution finished @" + LocalDateTime.now().format(Time_12_formatter) + " with " + _f + " FAIL(s)";
                }else{
                    return "=== Execution finished @" + LocalDateTime.now().format(Time_12_formatter);  
                } 
            }  
            @Override
            protected void done() { 
                BW2.cancel(true); // ================================================
                Report_Date = LocalDateTime.now().format(DateTimeFormatter.ofPattern("ddMMMyyyy_HHmmss"));
                txtLog.append("========   " + "Execution step-by-step log..." + "   ========" + "\r\n");  
                txtLog.setCaretPosition(txtLog.getDocument().getLength());
                EX = "AP3 " + env + ", v" + Ver + ", Browser: " + cmbBrow.getSelectedItem().toString() +
                " - Steps: " + _t + ", Passed: " + _p + ", Warnings: " + _w + ", Failed: " + _f + ". Scope: " + SCOPE + "\r\n" +
                 "#\tTC\tTarget/Element/Input\tExpected/Output\tResult\tComment/Error\tResp\tTime\tJIRA\r\n"
                 + EX;
                txtLog.append("" + EX.replaceAll("\t", " > ") + "\r\n"); 
                txtLog.setCaretPosition(txtLog.getDocument().getLength());
                Last_EX = EX;
                try  { 
                    String statusMsg = (String) get(); 
                    txtLog.append("" + statusMsg + "\r\n");
                    txtLog.setCaretPosition(txtLog.getDocument().getLength());
                    
                    BW2 = null;
                    BW1 = null;
                    
                    if(d1 != null) {
                        d1.quit(); 
                    }
                }  
                catch (InterruptedException | ExecutionException ex)  { 
                    txtLog.append("- Exception: " + ex.getMessage() + "\r\n"); 
                    txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
                } 
                DD = Duration.between(dw_start, Instant.now());
                Summary = "Steps: " + _t + ", Passed: " + _p + ", Failed: " + _f + ", Warnings: " + _w;
                
                try {
                    String t_rep = "";
                    if (!"".equals(r_time.trim())) {
                        double[] am0 = Arrays.stream(r_time.split(";")).mapToDouble(Double::parseDouble).toArray();
                        if (am0.length > 0) {
                            Arrays.sort(am0);
                            double total = 0;
                            for(int i=0; i < am0.length; i++){
                                total = total + am0[i];
                            }
                            t_calls = am0.length;
                            t_min = am0[0] / (double)1000;
                            t_avg = (total / am0.length) / (double)1000;
                            t_max = am0[am0.length - 1]  / (double)1000; 
                            p_50 = Func.p50(am0) / (double)1000;
                            p_90 = Func.p90(am0) / (double)1000;
                            
                            t_rep += "=== Total Calls: " + t_calls + ", Response Times (sec) - Min: " + A.A.df.format(t_min) +
                                                                        ", Avg: " + A.A.df.format(t_avg) +
                                                                        ", Max: " + A.A.df.format(t_max) +
                                                                        ", p50: " + A.A.df.format(p_50) +
                                                                        ", p90: " + A.A.df.format(p_90);
                        }
                        txtLog.append("" + t_rep + "\r\n");
                        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
                    }
                } catch(Exception ex){
                    txtLog.append("=== LOG_UPDATE > Call Times parsing ERROR: " + ex.getMessage() + "\r\n");
                    txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
                }  
                btnRun.setEnabled(true);

                txtLog.append("=== " + Summary + "\r\n"); // Summary shown in EX top
                txtLog.append("=== Scope: " + SCOPE + "\r\n"); // SCOPE shown in EX top
                txtLog.append("=== Browser: " + cmbBrow.getSelectedItem().toString() + ", Duration: " + DD.toHours() + "h, " + (DD.toMinutes() % 60) + "m, " + (DD.getSeconds() % 60) + "s" + "\r\n"); 
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
  
                if(!"".equals(F.trim())){
                    btnFails.setEnabled(true);
                } else{
                    btnFails.setEnabled(false);
                }
                btnExel.setEnabled(true);
                
                if(_slack.isSelected()){
                    Report(false); 
                    String MSG = "AP3_" + env + " Automation report - " + Report_Date +  
                    "\r\n Machine: " + WsID + " OS: " + WsOS + ", User: *" + UserID + "*\r\n" +
                    "Browser: *" + cmbBrow.getSelectedItem().toString() + "*" + "\r\n" +        
                    "Scope: " + SCOPE + "\r\n" +
                    "Duration: " + DD.toHours() + "h, " + (DD.toMinutes() % 60) + "m, " + (DD.getSeconds() % 60) + "s" + "\r\n" +      
                    "Steps: " + _t + ", Passed: " + _p + ", *Failed: " + _f + "*, Warnings: " + _w;

                    txtLog.append(Func.Send_File_with_Message_to_Slack(Report_File, "ap3automation", MSG + "\r\n"));
                    File f = new File(Report_File);
                    if(f.exists() && !f.isDirectory()) { 
                        f.delete();
                    }
                }
                
                LOG_UPDATE(); // ========================================================
            } 
        }; 
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        BW1.execute();  // executes the swingworker on worker thread 
    }
    private void BW2_DoWork(){
        BW2 = new SwingWorker() {             
            @Override
            protected String doInBackground() throws Exception { 
                while (true){
                    Toast_Msg = "";
                    Thread.sleep(1000);
                    try {
                        List<WebElement> ALERTS = d1.findElements(By.cssSelector("[role='alert']"));
                        if(ALERTS.size() > 0){
                            Toast_Msg = ALERTS.get(0).getAttribute("textContent");// .getText();
                            if(     Toast_Msg.toLowerCase().contains("successfully") || 
                                    Toast_Msg.toLowerCase().contains(" been updated") || 
                                    Toast_Msg.toLowerCase().contains(" been added") || 
                                    Toast_Msg.toLowerCase().contains(" been removed") ||
                                    Toast_Msg.toLowerCase().contains(" been reset") ||
                                    Toast_Msg.toLowerCase().contains(" saved")) {
                                _t++;
                                _p++;
                                EX += _t + "\t" + " === Snackbar Toast Msg" + "\t" + "[role='alert']" + "\t" + Toast_Msg + "\t" + "PASS" + "\t" + " - " + "\t" + " - " + "\t" + LocalDateTime.now().format(Time_12_formatter) + "\t" + " - " + "\r\n";                            
                            } else if(Toast_Msg.toLowerCase().contains("could not")|| 
                                    Toast_Msg.toLowerCase().contains("unable to save")|| 
                                    Toast_Msg.toLowerCase().contains("fail")) {
                                _t++;
                                _f++;
                                F += "Step: " + _t + " > FAIL - " + Toast_Msg + "\r\n";
                                EX += _t + "\t" + " === Snackbar Toast Msg" + "\t" + "[role='alert']" + "\t" + Toast_Msg + "\t" + "FAIL" + "\t" + " - " + "\t" + " - " + "\t" + LocalDateTime.now().format(Time_12_formatter) + "\t" + " - " + "\r\n";                           
                            } else if(Toast_Msg.toLowerCase().contains("fix") || Toast_Msg.toLowerCase().contains("error")) {
                                _t++;
                                _w++;
                                EX += _t + "\t" + " === Snackbar Toast Msg" + "\t" + "[role='alert']" + "\t" + Toast_Msg + "\t" + "WARN" + "\t" + " - " + "\t" + " - " + "\t" + LocalDateTime.now().format(Time_12_formatter) + "\t" + " - " + "\r\n";                           
                            } else {
                                _t++;
                                _w++;
                                //F += "Step: " + _t + " > WARN - " + tt + "\r\n";
                                EX += _t + "\t" + " === Snackbar Toast Msg" + "\t" + "[role='alert']" + "\t" + Toast_Msg + "\t" + "WARN" + "\t" + " - " + "\t" + " - " + "\t" + LocalDateTime.now().format(Time_12_formatter) + "\t" + " - " + "\r\n";                           
                            }
                            Thread.sleep(4000); //  pause till new alert expected ???? 
                        }
                    } catch (InterruptedException ex){ // Exception ex
                        txtLog.append("=== BW2: " + ex.getMessage() + "\r\n");
                        txtLog.setCaretPosition(txtLog.getDocument().getLength());                         
                    }
                }
            }
        }; 
        BW2.execute();  // executes the swingworker on worker thread   
    }

    private void Get_AP3_TKN(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));         
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [ap_token] FROM [dbo].[env] WHERE [DESCRIPTION] = '" + cmbEnv.getSelectedItem() + "'");
            rs.next();
            AP3_TKN = rs.getString(1);
            conn.close();
        } catch (SQLException ex) {
            txtLog.append("=== AP3_TKN > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetSites() {
        wdLastRow = -1;
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLog.append("- Load Sites ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        if(sw1.isRunning()){
            sw1.reset();
        }
        sw1.start();        
        appId = Func.App_ID(cmbApp.getSelectedItem().toString(), env);

        String[] SitesColumnsName = {"Site","Platform","Country","Id"}; 
        DefaultTableModel SitesModel = new DefaultTableModel();
        SitesModel.setColumnIdentifiers(SitesColumnsName);
        DV1.setModel(SitesModel);
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(DV1.getModel());
        DV1.setRowSorter(sorter);
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);  
        sorter.setSortable(0, false); 
               
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/multigroup/" + appId);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + response.getStatusLine().getStatusCode() + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            
            String site;
            String country;
            String id;
            JSONObject addresses;
            JSONObject meta;

            JSONArray Groups = json.getJSONArray("groups");
            for (int i = 0; i < Groups.length(); i++) {
                site = "";
                country = "null";
                id = "null";
                addresses = null;
                meta = null;
                platform = "DH";
                JSONObject object = Groups.getJSONObject(i);
                if(object.has("name")){
                    site = object.getString("name");   
                } 
                if(object.has("id")){
                    id = object.getString("id");
                } 
                if(object.has("meta")){
                    meta = object.getJSONObject("meta");
                    if (meta.has("migrated") && meta.getBoolean("migrated")){
                        platform = "CDL migrated";
                    }
                }              
                if (id.length() > 50) {
                    platform = "CDL";
                } 

                if(object.has("address")){
                    addresses = object.getJSONObject("address");
                }  
                if(addresses != null && addresses.has("country")){
                    country = addresses.getString("country");   
                }
                SitesModel.addRow(new Object[]{site, platform, country, id});
            }
            DV1.setModel(SitesModel);
            DV1.setDefaultEditor(Object.class, null);
            DV1.getColumnModel().getColumn(0).setPreferredWidth(250);
            DV1.getColumnModel().getColumn(1).setPreferredWidth(70);
            DV1.getColumnModel().getColumn(2).setPreferredWidth(50);
            DV1.getColumnModel().getColumn(3).setPreferredWidth(400);
            
            sorter.setSortable(0, true); 
            sorter.sort(); 
   
        } catch (IOException | JSONException ex) {
            txtLog.append("- Exception: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());      
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLog.append("- Exception: " + ex.getMessage() + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength());    
            }
        }
        txtLog.append("== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        sw1.reset();
        
        if (DV1.getRowCount() > 0) {
            DV1.changeSelection(0, 0, false, false);
            if (CONFIG && !"".equals(SITE.trim())) {
                for(int row = 0; row < DV1.getRowCount(); row++) {
                    if(DV1.getValueAt(row, 0).equals(SITE)){
                        DV1.changeSelection(row, 0, false, false);
                        break;
                    }
                }
            } 
//            DV1.repaint();
            SITE = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 0));
            SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
            GetBrands();
        }
        lblSITES.setText(app + " Sites (" + DV1.getRowCount() + " found)");
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetBrands() {
        d2LastRow = -1;
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLog.append("- Load Brands ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        if(sw1.isRunning()){
            sw1.reset();
        }
        sw1.start();        
     
        String[] BrandsColumnsName = {"Station","Location","Brand Id", "Unit ID"}; 
        DefaultTableModel BrandsModel = new DefaultTableModel();
        BrandsModel.setColumnIdentifiers(BrandsColumnsName);
        DV2.setModel(BrandsModel);
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(DV2.getModel());
        DV2.setRowSorter(sorter);
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);  
        sorter.setSortable(0, false);         
        
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3) + "?extended=true&nocache=1"); 
            //HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3)); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Loc = json.getJSONArray("locations");
            JSONArray brands = null;
            
            String brand;
            String location;
            String id;
            String unit_id;
            if (Location != null) {
                for (Object l : Loc) {
                    brand = "";
                    location = "";
                    id = "";
                    unit_id = "";
                    JSONObject loc = (JSONObject) l;
                    if (loc.has("brands")) {
                        brands = loc.getJSONArray("brands");
                        for (Object b : brands) {
                            JSONObject br = (JSONObject) b;
                            brand = br.getString("name");                            
                            if (!br.isNull("location_description")) {
                                location = br.getString("location_description");
                            }
                            id = br.getString("id");
                            unit_id = loc.getString("id");
                            BrandsModel.addRow(new Object[]{brand, location, id, unit_id});
                        }
                    }
                }
            }
            DV2.setModel(BrandsModel);    
            DV2.setDefaultEditor(Object.class, null);
            DV2.getColumnModel().getColumn(0).setPreferredWidth(140);
            DV2.getColumnModel().getColumn(1).setPreferredWidth(140);
            DV2.getColumnModel().getColumn(2).setPreferredWidth(80);
            
            sorter.setSortable(0, true); 
            sorter.sort(); 
            
        } catch (IOException | JSONException ex) {
            txtLog.append("- Exception: " + ex.getMessage() + "\r\n"); 
            txtLog.setCaretPosition(txtLog.getDocument().getLength());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLog.append("- Exception: " + ex.getMessage() + "\r\n");   
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            }
        } 
        txtLog.append("== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        sw1.reset();
   
        if (DV2.getRowCount() > 0) {
            DV2.changeSelection(0, 0, false, false);
            if (CONFIG && !"".equals(BRAND.trim()))
            {
                for(int row = 0; row < DV2.getRowCount(); row++) {
                    if(DV2.getValueAt(row, 0).equals(BRAND)){
                        DV2.changeSelection(row, 0, false, false);
                        break;
                    } 
                }
            }
            BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
            Location = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 1));
        } else {
            BrandID = "null";
            Location = "";
        }
        d2LastRow = DV2.getSelectedRow();
        SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
        lblBRANDS.setText("Selected Site Brands (" + DV2.getRowCount() + " found)");
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        
        GetBrandSector();
    }

    private void GetSectors() {  
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLog.append("- Load Groups/Sector ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        SECTORS = new ArrayList<>();
        SECTOR_IDS = new ArrayList<>();
        
        Load = true;
        if(sw1.isRunning()){
            sw1.reset();
        }
        sw1.start();        
     
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/sector?_provider=cdl"); 
            httpget.setHeader("Authorization",  "Bearer " + AP3_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Sectors = json.getJSONArray("sectors");           
            for (int i = 0; i < Sectors.length(); i++) {
                SECTORS.add(Sectors.getJSONObject(i).getString("name"));
                SECTOR_IDS.add(Sectors.getJSONObject(i).getString("id"));
            }
        } catch (IOException | JSONException ex) {
            txtLog.append("- Exception: " + ex.getMessage() + "\r\n");  
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        } finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLog.append("- Exception: " + ex.getMessage() + "\r\n");  
                txtLog.setCaretPosition(txtLog.getDocument().getLength());  
                this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            }
        } 
        txtLog.append("== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        sw1.reset();
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        Load = false;  
    }
    private void GetBrandSector() {  
        txtLog.append("- Get Brand's Group/Sector" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        if(DV2.getRowCount()< 1){
            txtLog.append("==== No Brands" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
            return;
        }
        BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
        SectorID = "";
        CompanyID = "";
        int SectorIndex = -1;
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try { 
            if(sw1.isRunning()){
                sw1.reset();
            }
            sw1.start();        
     
            HttpGet httpget = new HttpGet(BaseAPI + "/location/brand/" + BrandID + "?extended=true&nocache=1"); 
            httpget.setHeader("Authorization",  "Bearer " + AP3_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));        
            if(json.has("sector")){
                SectorID = json.getString("sector");
                if(!SectorID.isEmpty()){
                    for (int i = 0; i < SECTOR_IDS.size(); i++) {
                        if(SECTOR_IDS.get(i).equals(SectorID)){
                            SectorIndex = i;
                        }
                    }
                }   
            } else{
                txtLog.append("- Sector ID not Found in this Brand API" + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            }
            if(json.has("company")){
                CompanyID = json.getString("company");
            } else{
                txtLog.append("- Company ID not Found in this Brand API" + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            }
        } catch (IOException | JSONException ex) {
            txtLog.append("- Exception: " + ex.getMessage() + "\r\n");  
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        } finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLog.append("- Exception: " + ex.getMessage() + "\r\n");  
                txtLog.setCaretPosition(txtLog.getDocument().getLength());  
                this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            }
        } 
        txtLog.append("== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        sw1.reset(); 
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));       
        
        if(!SectorID.equals("")){
            txtSector.setText(SECTORS.get(SectorIndex));
        }else{
            txtSector.setText("Not Found");
            txtComp.setText("Not Found");
        }
        if(!"".equals(CompanyID)){
            GetCompanies();    // Load Brans Companies List after Brand's Gropu/Sector selected
            GetBrandCompany(); // after Brand's Gropu/Sector selected            
        }
    } 
 
    private void GetCompanies() {  
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLog.append("- Load Sector/Companies(Menus) ..." + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try { 
            COMPANIES = new ArrayList<>();
            COMP_IDS = new ArrayList<>();
            if(sw1.isRunning()){
                sw1.reset();
            }
            sw1.start();        
     
            HttpGet httpget = new HttpGet(BaseAPI + "/location/sector/" + SectorID + "?expanded=false");
            httpget.setHeader("Authorization",  "Bearer " + AP3_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Coimpanies = json.getJSONArray("companies");           
            String C_NAME = "";
            for (int i = 0; i < Coimpanies.length(); i++) {
                C_NAME = Coimpanies.getJSONObject(i).getString("name");
                if(!C_NAME.isEmpty()) {
                    COMPANIES.add(C_NAME);
                    COMP_IDS.add(Coimpanies.getJSONObject(i).getString("id"));
                }
            }
        } catch (IOException | JSONException ex) {
            txtLog.append("- GetCompanies: " + ex.getMessage() + "\r\n");  
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        } finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLog.append("- GetCompanies: " + ex.getMessage() + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength());    
                this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            }
        } 
        txtLog.append("== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        sw1.reset();
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
    }
    private void GetBrandCompany(){ // after Brand's Group/Sector slected
        txtLog.append("- Get Brand's Company/Clobal Menu" + "\r\n");
        txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        int CompanyIndex = -1;
        if(!CompanyID.isEmpty()){
            for (int i = 0; i < COMP_IDS.size(); i++) {
                if(COMP_IDS.get(i).equals(CompanyID)){
                    CompanyIndex = i;
                }
            }
        }  
        if(!CompanyID.equals("")){
            txtComp.setText(COMPANIES.get(CompanyIndex));
        }else{
            txtComp.setText("Not Found");
            txtLog.append("- Company ID not Found in this Brand API" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
    }
    
    private void Report(boolean Open_File){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        Report_File = "";
        if ("".equals(Last_EX.trim()) || "None".equals(Last_EX.trim())){
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            txtLog.append("=== Report > Not Excel");
            return;
        }   
        try {
            int col = 9; // 8 + 1 new JIRA = 9
            String Top_Row = Last_EX.substring(0, Last_EX.indexOf("\r\n"));        
            String[] lines = Last_EX.substring(Last_EX.indexOf("\r\n") + 2).split(System.getProperty("line.separator"));
            int l = lines.length;
            String[][] Values = new String[l][col];
            int n = 1;
            for (int i = 0; i < l; i++) {
                String[] v = lines[i].split("\t");
                System.arraycopy(v, 0, Values[i], 0, v.length); 
            }
            Report_File = Func.fExcel(l, col, Values, "AP3_" + env + "_" + Report_Date, Top_Row, 0, 0, null, " ", " ", Open_File);
            txtLog.append("=== Report Excel file:\r\n" + Report_File + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        } catch (Exception ex) {
            txtLog.append("=== Report > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void LOG_UPDATE(){  
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            PreparedStatement _update = conn.prepareStatement("UPDATE [dbo].[aw_result] SET " +
                    " [Date] = ?" +       // 1
                    ", [Time] = ?" +      // 2
                    ", [app] = ?" +       // 3
                    ", [url] = ?" +       // 4
                    ", [summary] = ?" +   // 5
                    ", [t_calls] = ?" +   // 6
                    ", [t_min] = ?" +     // 7
                    ", [t_avg] = ?" +     // 8
                    ", [t_max] = ?" +     // 9
                    ", [p_50] = ?" +      // 10
                    ", [p_90] = ?" +      // 11
                    ", [test_type] = ?" +     // 12
                    ", [user_id] = ?" +       // 13
                    ", [user_ws] = ?" +       // 14
                    ", [env] = ?" +       // 15
                    ", [Result] = ?" +    // 16
                    ", [Status] = ?" +    // 17
                    ", [Excel] = ?" +     // 18
                    " WHERE [app] = 'AP3_" + env + "' AND [Status] = 'Running'");
            _update.setString(1, LocalDateTime.now().format(Date_formatter));
            _update.setString(2, LocalDateTime.now().format(Time_24_formatter));
            _update.setString(3, "AP3_" + env);
            _update.setString(4, url);
            _update.setString(5, Summary + " (dur: " + DD.toHours() + ":" + (DD.toMinutes() % 60) + ":" + (DD.getSeconds() % 60) + ")");
            _update.setInt(6, t_calls);
            _update.setDouble(7, t_min);
            _update.setDouble(8, t_avg);
            _update.setDouble(9, t_max);
            _update.setDouble(10, p_50);
            _update.setDouble(11, p_90);
            _update.setString(12, r_type);
            _update.setString(13, UserID);
            _update.setString(14, WsID);
            _update.setString(15, cmbBrow.getSelectedItem().toString());
            _update.setString(16, txtLog.getText());
            _update.setString(17, "Scope: " + SCOPE);
            _update.setString(18, EX);
            int row = _update.executeUpdate();
            conn.close();
        } catch (SQLException ex) {
            txtLog.append("=== LOG_UPDATE > SQL ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void LOG_START(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[aw_result] (" +
                    "[Date]" +   // 1
                    ", [Time]" +   // 2
                    ", [app]" +   // 3
                    ", [url]" +   // 4
                    ", [summary]" +   // 5
                    ", [t_calls]" +   // 6
                    ", [t_min]" +   // 7
                    ", [t_avg]" +   // 8
                    ", [t_max]" +   // 9
                    ", [p_50]" +   // 10
                    ", [p_90]" +   // 11
                    ", [test_type]" +   // 12
                    ", [user_id]" +   // 13
                    ", [user_ws]" +   // 14
                    ", [env]" +   // 15
                    ", [Result]" +   // 16
                    ", [Status]" +   // 17
                    ", [Excel]" +     // 18
                    ") VALUES (" +
                    "?" +     // 1
                    ",?" +    // 2
                    ",?" +    // 3
                    ",?" +    // 4
                    ",?" +    // 5
                    ",?" +    // 6
                    ",?" +    // 7
                    ",?" +    // 8
                    ",?" +    // 9
                    ",?" +    // 10
                    ",?" +    // 11
                    ",?" +    // 12
                    ",?" +    // 13
                    ",?" +    // 14
                    ",?" +    // 15
                    ",?" +    // 16
                    ",?" +    // 17
                    ",?" +    // 18
                    ")");
            _insert.setString(1, LocalDateTime.now().format(Date_formatter));
            _insert.setString(2, LocalDateTime.now().format(Time_24_formatter));
            _insert.setString(3, "AP3_" + env);
            _insert.setString(4, url);
            _insert.setString(5, "Running...");
            _insert.setString(6, "0");
            _insert.setString(7, "0");
            _insert.setString(8, "0");
            _insert.setString(9, "0");
            _insert.setString(10, "0");
            _insert.setString(11, "0");
            _insert.setString(12, r_type);
            _insert.setString(13, UserID);
            _insert.setString(14, WsID);
            _insert.setString(15, cmbBrow.getSelectedItem().toString());
            _insert.setString(16, "=== Job is running... ===\r\n" + "");
            _insert.setString(17, "Running");
            _insert.setString(18, "None");
            int row = _insert.executeUpdate();
            conn.close();
        }  catch (SQLException ex) {
            txtLog.append("=== LOG_START > SQL ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

    private void LOAD_CONFIG(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            SQL = "SELECT [_conf] FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'WEB' AND [app] = 'AP3' AND [env] = '" + env + "'";
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery(SQL);
            rs.next();
            C = rs.getString(1);
            conn.close();
        } catch (SQLException ex) {
            CONFIG = false;
            txtLog.append("=== LOAD_CONFIG > ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return;
        }
            
        try{             
            if (C.contains(": ")) {
                String c;
                c = C.substring(C.indexOf("cmbBROW: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); cmbBrow.setSelectedItem(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("env: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); env = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("app: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); app = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("url: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); url = c.substring(c.indexOf(" ")).trim();
             
                c = C.substring(C.indexOf("_slack: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _slack.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_headless: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _headless.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));

                c = C.substring(C.indexOf("GROUP: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); SECTOR = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("GL_MENU: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); GL_MENU = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("SITE: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); SITE = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("BRAND: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); BRAND = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("DH_MENU_ID: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtDH_Id.setText(c.substring(c.indexOf(" ")).trim());
                
                c = C.substring(C.indexOf("txtEMail: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtADMIN_ID.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtPW: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtADMIN_PW.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtSM: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtSM_ID.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtSM_PW: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtSM_PW.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtIM: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtIM_ID.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtIM_PW: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtIM_PW.setText(c.substring(c.indexOf(" ")).trim());

                c = C.substring(C.indexOf("nShowPage: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); nShowPage.setValue(Double.parseDouble(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("nWaitElement: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); nWaitElement.setValue(Double.parseDouble(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("nWaitLoad: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); nWaitLoad.setValue(Double.parseDouble(c.substring(c.indexOf(" ")).trim()));

                c = C.substring(C.indexOf("_site: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _site.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_site_new: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _site_new.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_brand_new: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _brand_new.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_brand: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _brand.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_group_management: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _group_management.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_menu_manager: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _menu_manager.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_bulk_apply: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _bulk_apply.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_images: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _images.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_orders: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _orders.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_sales_reporting: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _sales_reporting.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_users: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _users.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_resent_updates: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _resent_updates.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_announcements: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _announcements.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_promo: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _promo.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_password: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _password.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_roles: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _roles.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_all_data: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _all_data.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                c = C.substring(C.indexOf("_logout: ")); c = c.substring(0, c.indexOf("\r\n")).trim(); _logout.setSelected(Boolean.parseBoolean(c.substring(c.indexOf(" ")).trim()));
                CONFIG = true;
                txtLog.append("=== LOAD_CONFIG > OK" + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            } else {
                CONFIG = false;
                txtLog.append("=== WEB / AP3, User: " + UserID + ", Env: " + env + " > No saved Configuration Found" + "\r\n");
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            }
        } catch (Exception ex) {
            CONFIG = false;
            txtLog.append("=== LOAD_CONFIG > ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void SAVE_CONFIG() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        String _S = "n/a";
        String _B = "n/a";
        try {
            if(DV1.getRowCount() > 0){
                _S = DV1.getValueAt(DV1.getSelectedRow(), 0).toString();
            }
            if(DV2.getRowCount() > 0){
                _B = DV2.getValueAt(DV2.getSelectedRow(), 0).toString();
            }
            C = "";
            C += "env: " + env + "\r\n";
            C += "app: " + cmbApp.getSelectedItem().toString() + "\r\n";
            
            C += "cmbBROW: " + cmbBrow.getSelectedItem().toString() + "\r\n";
            C += "url: " + url + "\r\n";
            C += "GROUP: " + txtSector.getText() + "\r\n";
            C += "GL_MENU: " + txtComp.getText() + "\r\n";
            C += "SITE: " + _S + "\r\n";
            C += "BRAND: " + _B + "\r\n";
            C += "COUNTRY: " + COUNTRY + "\r\n";
            C += "DH_MENU_ID: " + txtDH_Id.getText() + "\r\n";
            
            C += "SlackCh: " + "xtt_test"; //txtSlackCh.getText() + "\r\n";
            C += "_slack: " + _slack.isSelected() + "\r\n";
            C += "_zip_report: " + "true" + "\r\n";
            
            C += "_headless: " + _headless.isSelected() + "\r\n";  
           
            C += "txtEMail: " + txtADMIN_ID.getText() + "\r\n";
            C += "txtPW: " + txtADMIN_PW.getText()  + "\r\n";
            C += "txtSM: " + txtSM_ID.getText()  + "\r\n";
            C += "txtSM_PW: " + txtSM_PW.getText() + "\r\n";
            C += "txtIM: " + txtIM_ID.getText()+ "\r\n";
            C += "txtIM_PW: " + txtIM_PW.getText() + "\r\n";

            C += "_site: " + _site.isSelected() + "\r\n";
            C += "_site_new: " + _site_new.isSelected() + "\r\n";
            C += "_brand_new: " + _brand_new.isSelected() + "\r\n";
            C += "_brand: " + _brand.isSelected() + "\r\n";
            C += "_group_management: " + _group_management.isSelected() + "\r\n";
            C += "_menu_manager: " + _menu_manager.isSelected() + "\r\n";
            C += "_bulk_apply: " + _bulk_apply.isSelected() + "\r\n";
            C += "_images: " + _images.isSelected() + "\r\n";
            C += "_orders: " + _orders.isSelected() + "\r\n";
            C += "_sales_reporting: " + _sales_reporting.isSelected() + "\r\n";
            C += "_users: " + _users.isSelected() + "\r\n";
            C += "_resent_updates: " + _resent_updates.isSelected() + "\r\n";
            C += "_announcements: " + _announcements.isSelected() + "\r\n";
            C += "_promo: " + _promo.isSelected() + "\r\n";
            C += "_password: " + _password.isSelected() + "\r\n";
            C += "_roles: " + _roles.isSelected() + "\r\n";           
            C += "_all_data: " + _all_data.isSelected() + "\r\n";
            C += "_logout: " + _logout.isSelected() + "\r\n";
            
            C += "_sales_report_hidden: " + _sales_report_hidden.isSelected() + "\r\n";           
            C += "_orders_report_hidden: " + _orders_report_hidden.isSelected() + "\r\n";
            C += "_brand_closure: " + _brand_closure.isSelected() + "\r\n";
            
            C += "nShowPage: " + nShowPage.getValue() + "\r\n";
            C += "nWaitElement: " + nWaitElement.getValue() + "\r\n";
            C += "nWaitLoad: " + nWaitLoad.getValue()+ "\r\n";
        } catch (Exception ex)  {
            txtLog.append("=== SAVE_CONFIG > ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            return;
        }
        
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            SQL = "DELETE FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'WEB' AND [app] = 'AP3' AND [env] = '" + env + "'";
            Statement _del = conn.createStatement();
            _del.execute(SQL);
            PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[a_config]" +
                    "([user_id]" +   // 1
                    ",[env]" +       // 2
                    ",[platform]" +  // 3
                    ",[app]" +       // 4
                    ",[_conf]" +     // 5
                    ") VALUES (" +
                    "?" +
                    ",?" +
                    ",?" +
                    ",?" +
                    ",?" +
                    ")");
            _insert.setString(1, UserID);
            _insert.setString(2, env);
            _insert.setString(3, "WEB");
            _insert.setString(4, "AP3");
            _insert.setString(5, C);
            int row = _insert.executeUpdate();
            txtLog.append("=== SAVE_CONFIG > OK (" + row + " row)" + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            conn.close();
        } catch (SQLException ex) {
            txtLog.append("=== SAVE_CONFIG > SQL ERROR: " + ex.getMessage() + "\r\n");
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

    // <editor-fold defaultstate="collapsed" desc="Package Local Variables">

    private String Last_EX;
    private static final Stopwatch sw1 = Stopwatch.createUnstarted();
    private boolean Load;
    private String Report_Date;
    private String Report_File;
    private static Duration DD;
    
    private static SwingWorker BW1;  
    private static SwingWorker BW2; 
    private static String Toast_Msg = ""; 

    private boolean CONFIG = false;
    private String C = "";
    private int wdLastRow = -1; 
    private int d2LastRow = -1; 
    
    private List<String> SECTORS;
    private List<String> SECTOR_IDS;
    private List<String> COMPANIES;
    private List<String> COMP_IDS;

    private String SCOPE;
    
    public static String New_ID = "";
  
    public static String Tab_Name;
    
    public static String Day;
    public static String Open;
    public static String Close;
    public static String New_From;
    public static String New_To;
    public static String _24;    
    
    public static String ADMIN_ID;
    public static String ADMIN_PW;
    public static String SM_ID; 
    public static String SM_PW;
    public static String IM_ID; 
    public static String IM_PW;
    
    
    private static String S_Client_ID = "";
    private static String S_Client_Secret  = "";
    private static String S_Signing_Secret = "";
    private static String S_Hook = "";
    
    public static String url = "";
    public static String app = "";
    protected static String appId = "";
    public static String env = "";
    public static String platform = "CDL";
    public static String BaseAPI;
    public static String COUNTRY = "COUNTRY";
    public static String SITE = "";
    public static String SiteID = "";
    public static String SECTOR = "";
    public static String BRAND = "";
    public static String BrandID = "";
    public static String Location = "";
    public static String SectorID = "";
    public static String CompanyID = "";
    public static String DH_Menu_ID = "";    
    public static String GL_MENU = "TIM HORTONS";

    // </editor-fold>
   
    // <editor-fold defaultstate="collapsed" desc="GUI Components Declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DV1;
    private javax.swing.JTable DV2;
    private javax.swing.JCheckBox _all_data;
    private javax.swing.JCheckBox _announcements;
    private javax.swing.JCheckBox _brand;
    private javax.swing.JCheckBox _brand_closure;
    private javax.swing.JCheckBox _brand_new;
    private javax.swing.JCheckBox _bulk_apply;
    private javax.swing.JCheckBox _group_management;
    private javax.swing.JCheckBox _headless;
    private javax.swing.JCheckBox _images;
    private javax.swing.JCheckBox _login;
    private javax.swing.JCheckBox _logout;
    private javax.swing.JCheckBox _menu_manager;
    private javax.swing.JCheckBox _notifications;
    private javax.swing.JCheckBox _orders;
    private javax.swing.JCheckBox _orders_report_hidden;
    private javax.swing.JCheckBox _password;
    private javax.swing.JCheckBox _promo;
    private javax.swing.JCheckBox _reschedule_menu;
    private javax.swing.JCheckBox _resent_updates;
    private javax.swing.JCheckBox _roles;
    private javax.swing.JCheckBox _sales_analytics;
    private javax.swing.JCheckBox _sales_report_hidden;
    private javax.swing.JCheckBox _sales_reporting;
    private javax.swing.JCheckBox _site;
    private javax.swing.JCheckBox _site_new;
    private javax.swing.JCheckBox _slack;
    private javax.swing.JCheckBox _smart_analytics;
    private javax.swing.JCheckBox _users;
    private javax.swing.JButton btnExel;
    private javax.swing.JButton btnFails;
    private javax.swing.JButton btnLog;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSave_Opt;
    private javax.swing.JComboBox<String> cmbApp;
    private javax.swing.JComboBox<String> cmbBrow;
    private javax.swing.JComboBox<String> cmbEnv;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblBRANDS;
    private javax.swing.JLabel lblSITES;
    private javax.swing.JLabel lblSITES1;
    private javax.swing.JLabel lblSITES10;
    private javax.swing.JLabel lblSITES11;
    private javax.swing.JLabel lblSITES12;
    private javax.swing.JLabel lblSITES13;
    private javax.swing.JLabel lblSITES14;
    private javax.swing.JLabel lblSITES15;
    private javax.swing.JLabel lblSITES2;
    private javax.swing.JLabel lblSITES3;
    private javax.swing.JLabel lblSITES4;
    private javax.swing.JLabel lblSITES5;
    private javax.swing.JLabel lblSITES6;
    private javax.swing.JLabel lblSITES7;
    private javax.swing.JLabel lblSITES8;
    private javax.swing.JLabel lblSITES9;
    private javax.swing.JSpinner nShowPage;
    private javax.swing.JSpinner nWaitElement;
    private javax.swing.JSpinner nWaitLoad;
    private javax.swing.JTextField txtADMIN_ID;
    private javax.swing.JTextField txtADMIN_PW;
    private javax.swing.JTextField txtComp;
    private javax.swing.JTextField txtDH_Id;
    private javax.swing.JTextField txtIM_ID;
    private javax.swing.JTextField txtIM_PW;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtSM_ID;
    private javax.swing.JTextField txtSM_PW;
    private javax.swing.JTextField txtSector;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}