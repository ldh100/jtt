/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JIRA;

import A.Func;
import static A.A.*;
import com.google.common.base.Stopwatch;
import java.awt.Cursor;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.safari.SafariDriver; 
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeDriverService;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.ElementScrollBehavior;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;
/**
 *
 * @author Oleg.Spozito
 */
public class JIRA extends javax.swing.JInternalFrame {
    /**
     * Creates new form JIRA
     */
    public JIRA() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMetrics = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DV1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        lblSITES4 = new javax.swing.JLabel();
        txtAdmin_ID = new javax.swing.JTextField();
        lblSITES6 = new javax.swing.JLabel();
        txtAdmin_PW = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        cmbBrow = new javax.swing.JComboBox<>();
        btnRun = new javax.swing.JButton();
        btnLog = new javax.swing.JButton();
        btnSave_Opt = new javax.swing.JButton();
        lblSITES11 = new javax.swing.JLabel();
        lblSITES13 = new javax.swing.JLabel();
        cmbEnv = new javax.swing.JComboBox<>();
        _JWeb = new javax.swing.JCheckBox();
        _ZApi = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);
        setIconifiable(true);
        setTitle("JIRA/Zephyr - QA-XXX Execution");
        setMinimumSize(new java.awt.Dimension(860, 532));
        setName("JIRA"); // NOI18N
        setNormalBounds(new java.awt.Rectangle(0, 0, 104, 0));
        setPreferredSize(new java.awt.Dimension(860, 532));
        setVisible(true);
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblMetrics.setText("Target");
        lblMetrics.setAlignmentX(0.5F);
        getContentPane().add(lblMetrics, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 4, 360, -1));

        DV1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        DV1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV1.setCellSelectionEnabled(true);
        DV1.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV1.setName("DV1"); // NOI18N
        DV1.setRequestFocusEnabled(false);
        DV1.setRowHeight(18);
        DV1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV1.getTableHeader().setReorderingAllowed(false);
        DV1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(DV1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 22, 428, 272));

        txtLog.setEditable(false);
        txtLog.setColumns(20);
        txtLog.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtLog.setRows(5);
        txtLog.setText("Start >");
        txtLog.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtLog.setMinimumSize(new java.awt.Dimension(50, 19));
        jScrollPane1.setViewportView(txtLog);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 296, 428, 208));

        lblSITES4.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES4.setText("JIRA User ID:");
        lblSITES4.setToolTipText("");
        lblSITES4.setAlignmentX(0.5F);
        getContentPane().add(lblSITES4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 16, 120, -1));

        txtAdmin_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtAdmin_ID.setText("App_User@?.?");
        getContentPane().add(txtAdmin_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 32, 216, -1));

        lblSITES6.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES6.setText("JIRA User Password");
        lblSITES6.setAlignmentX(0.5F);
        getContentPane().add(lblSITES6, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 16, -1, -1));

        txtAdmin_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtAdmin_PW.setText("password");
        getContentPane().add(txtAdmin_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 32, 184, -1));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbBrow.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jPanel3.add(cmbBrow, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 32, 84, 20));

        btnRun.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnRun.setForeground(new java.awt.Color(204, 0, 0));
        btnRun.setText("Run");
        btnRun.setName("btnRun"); // NOI18N
        btnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRunMouseClicked(evt);
            }
        });
        jPanel3.add(btnRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 56, 84, 28));

        btnLog.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnLog.setText(" < Log");
        btnLog.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogMouseClicked(evt);
            }
        });
        jPanel3.add(btnLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 60, 84, 22));

        btnSave_Opt.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnSave_Opt.setText("Save Setup");
        btnSave_Opt.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSave_Opt.setName("btnSAVE"); // NOI18N
        btnSave_Opt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSave_OptMouseClicked(evt);
            }
        });
        jPanel3.add(btnSave_Opt, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 116, 22));

        lblSITES11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES11.setText("Browser:");
        lblSITES11.setAlignmentX(0.5F);
        jPanel3.add(lblSITES11, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 16, 72, 16));

        lblSITES13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES13.setText("Environment:");
        lblSITES13.setAlignmentX(0.5F);
        jPanel3.add(lblSITES13, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 16, 92, 16));

        cmbEnv.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbEnv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEnvItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbEnv, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 32, 116, 20));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 416, 416, 88));

        _JWeb.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _JWeb.setSelected(true);
        _JWeb.setText("JIRA Web ");
        _JWeb.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _JWeb.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _JWeb.setRequestFocusEnabled(false);
        getContentPane().add(_JWeb, new org.netbeans.lib.awtextra.AbsoluteConstraints(544, 296, 172, -1));

        _ZApi.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        _ZApi.setSelected(true);
        _ZApi.setText("Z API ");
        _ZApi.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        _ZApi.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        _ZApi.setRequestFocusEnabled(false);
        getContentPane().add(_ZApi, new org.netbeans.lib.awtextra.AbsoluteConstraints(546, 320, 172, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // admin@distilr.io MortyEscapedOntario >> https://app.distilr.io/
    // distilr.test@place.com Compass1 >> https://dev.member.distilr.io/
    private void DV1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV1MouseClicked
        if (d1LastRow == DV1.getSelectedRow() || DV1.getRowCount() == 0) {
           return;
        }

        d1LastRow = DV1.getSelectedRow(); 
    }//GEN-LAST:event_DV1MouseClicked

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        F_COUNT--;
    }//GEN-LAST:event_formInternalFrameClosed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        jPanel3.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent arg0) {
                Load_Form();
            }
            @Override
            public void componentMoved(ComponentEvent arg0) {
                //System.err.println("componentMoved");
            }
            @Override
            public void componentShown(ComponentEvent arg0) {
                //System.err.println("componentShown");
            }
            @Override
            public void componentHidden(ComponentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }//GEN-LAST:event_formAncestorAdded

    private void btnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRunMouseClicked
        if(!btnRun.isEnabled()){
            return;
        }

        if(Driver()){
            txtLog.append("\r\n=== Web Driver Started in " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());
            sw1.reset();
            if(_JWeb.isSelected()){
                UPDATE_JIRA("Report", "JIRA_QA");                
            }
            if(_ZApi.isSelected()){
                Z_JWT();                
            }
        }
        
        try  { 
            if(d1 != null) {
                d1.quit(); 
            }
        }    
        catch (Exception ex)  { 
            txtLog.append("\r\n- Exception: " + ex.getMessage()); 
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }         
    }//GEN-LAST:event_btnRunMouseClicked
    private void Z_JWT(){
        
    }

    private void UPDATE_JIRA(String Report, String JIRA_QA){
        String SUM = "";
        Stopwatch sw1 = Stopwatch.createUnstarted();
        sw1.start();
        try {
            d1.navigate().to("https://id.atlassian.com/login");
            d1.findElement(By.id("username")).click();
            d1.findElement(By.id("username")).clear();
            d1.findElement(By.id("username")).sendKeys("Oleg.Spozito@compassdigital.io");
            d1.findElement(By.id("login-submit")).click();
            loadTimeout.until((Function) ExpectedConditions.visibilityOfAllElementsLocatedBy(By.id("password")));
            d1.findElement(By.id("password")).click();
            d1.findElement(By.id("password")).clear();
            d1.findElement(By.id("password")).sendKeys("Sp515s10#a");
            d1.findElement(By.id("login-submit")).click();
            loadTimeout.until((Function) ExpectedConditions.presenceOfElementLocated(By.cssSelector("[aria-label='Home']")));
            SUM += "atlassian.com/login OK - " + " >> " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec" + "\r\n";
        }
        catch (Exception ex) {
            SUM += "atlassian.com/login Failed" + " > ERROR: " + ex.getMessage();
        }            
        sw1.reset();
            
        List<String> QA = Arrays.asList("QA-5280", "QA-5281", "QA-5282", "QA-5283","QA-5284");
        for (int i = 0; i < QA.size(); i++) {
            JIRA_QA = QA.get(i);
            if(sw1.isRunning()){
                sw1.reset();
            }
            sw1.start();
            try{            
                d1.navigate().to("https://teamideaworks.atlassian.net/browse/" + JIRA_QA);            
                e = d1.findElement(By.xpath("//button[@data-test-id='issue-meatball-menu.ui.dropdown-trigger.button']"));
                e.click();
                loadTimeout.until((Function) ExpectedConditions.presenceOfElementLocated(By.xpath(".//span[text()='Execute']")));
                e = d1.findElement(By.xpath("//span[text()='Execute']"));
                e.click();
                loadTimeout.until((Function) ExpectedConditions.presenceOfElementLocated(By.xpath("//div[@class='ap-iframe-container iframe-init']")));
                Thread.sleep(500);
                d1.switchTo().frame(d1.findElement(By.xpath("//iframe[@class='ap-iframe']"))); 
    //                e = d1.findElement(By.xpath("//div[text()='Execute Ad Hoc']"));
    //                e.click();
                    loadTimeout.until((Function) ExpectedConditions.presenceOfElementLocated(By.xpath("//span[text()='Execute']")));
                    //e = d1.findElement(By.xpath("//span[text()='Cancel']"));
                    e = d1.findElement(By.xpath("//span[text()='Execute']"));
                    e.click();
                d1.switchTo().defaultContent();

                Thread.sleep(500);
                loadTimeout.until((Function) ExpectedConditions.invisibilityOfAllElements(d1.findElements(By.xpath("//*[@class='loader-bar']"))));
                loadTimeout.until((Function) ExpectedConditions.presenceOfElementLocated(By.tagName("iframe")));
                Thread.sleep(500);
                d1.switchTo().frame(d1.findElement(By.tagName("iframe")));     
                    loadTimeout.until((Function) ExpectedConditions.invisibilityOfAllElements(d1.findElements(By.xpath("//div[@class='loader-bar']"))));
    //                Thread.sleep(1000);
    //                e = d1.findElement(By.xpath("//div[@class='ak-field-group comment-group']"));
    //                //e.findElement(By.xpath(".//div[@class='ak-field-flex-grow']")).click(); 
    //                Actions action = new Actions(d1);
    //                action.moveToElement(e.findElement(By.xpath(".//div[@class='ak-field-flex-grow']"))).click().perform();
    //                e.findElement(By.xpath(".//textarea[@placeholder='Enter Value...']")).sendKeys("Automation Ad-hoc execution");

                    Thread.sleep(700);
                    L0 = d1.findElements(By.xpath("//span[@class='trigger-dropDown']"));
                    L0.get(0).click();            
                    d1.findElement(By.id("pass")).click();
                //              d1.findElement(By.id("fail")).click();
                //              d1.findElement(By.id("wip")).click();
                //              d1.findElement(By.id("blocked")).click();
                d1.switchTo().defaultContent();

                SUM += (i+1) + " OK - " + JIRA_QA + " >> " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec" + "\r\n";
            }
            catch (Exception ex) {
                SUM += (i+1)  + " FAIL - " + JIRA_QA + " > " + ex.getMessage() + " >> " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec" + "\r\n";
            }
            sw1.reset();
        }
        txtLog.append("\r\n\r\n=== UPDATE_JIRA" + "\r\n" + SUM);
        txtLog.setCaretPosition(txtLog.getDocument().getLength());  
    }

    private void btnLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogMouseClicked
        String R = Func.SHOW_FILE(txtLog.getText(), "txt");
        if(!R.equals("OK")){
            txtLog.append(R);
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
    }//GEN-LAST:event_btnLogMouseClicked

    private void btnSave_OptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSave_OptMouseClicked
        SAVE_CONFIG();
    }//GEN-LAST:event_btnSave_OptMouseClicked

    private void cmbEnvItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEnvItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            cmbEnv.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            LOAD_ENV();
            cmbEnv.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_cmbEnvItemStateChanged
    private void Load_Form(){
        Load = true;   
        
        cmbBrow.addItem("Chrome");  
        cmbBrow.addItem("Firefox"); 
        cmbBrow.addItem("Edge"); 
        if(WsOS.toLowerCase().contains("windows")){
            cmbBrow.addItem("IE11");             
        }
        if(WsOS.toLowerCase().contains("mac")){
            cmbBrow.addItem("Safari");             
        }
        cmbBrow.setSelectedIndex(0); // Chrome
        
        cmbEnv.addItem("Development");
//        cmbEnv.addItem("Staging");
//        cmbEnv.addItem("Production");         
        cmbEnv.setSelectedIndex(0); // delevopment only for now
        

        LOAD_ENV();
        Load = false;
        CONFIG = false;   
        this.setTitle("JIRA/Zephyr - QA-XXX Execution");
    }

    private boolean Driver() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try {
            String cwd = System.getProperty("user.dir");
            txtLog.append("\r\n\r\n=== CWD: " + cwd);
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            
            if(WsOS.toLowerCase().contains("windows")){
                System.setProperty("webdriver.chrome.driver", cwd + "\\chromedriver.exe");                
                System.setProperty("webdriver.edge.driver", cwd + "\\msedgedriver.exe");  
                System.setProperty("webdriver.gecko.driver", cwd + "\\geckodriver.exe"); 
                System.setProperty("webdriver.ie.driver", cwd + "\\IEDriverServer.exe"); 
            }
            if(WsOS.toLowerCase().contains("mac")){
                System.out.println("******** "+cwd+"/chromedriver.exe");
                //System.setProperty("webdriver.chrome.driver", cwd + "/chromedriver");  
                System.setProperty("webdriver.chrome.driver", "/Users/prathyusha.deshpande/distilr/BrowserDriver/87/chromedriver");            
                System.setProperty("webdriver.edge.driver",  cwd + "/msedgedriver");  
                System.setProperty("webdriver.gecko.driver", cwd + "/geckodriver");
                System.setProperty("webdriver.safari.driver", cwd + "/safaridriver");
            }
            switch (cmbBrow.getSelectedItem().toString()) {
                case "Chrome":
                        ChromeOptions chrome_op = new ChromeOptions();
                        //chrome_op.addExtensions(new File("/path/to/extension.crx"));
                        chrome_op.addArguments("--disable-infobars");
                        chrome_op.addArguments("--start-maximized");
            //            chrome_op.addArguments("--start-minimized");
            //            chrome_op.addArguments("enable-automation");
            //            chrome_op.addArguments("--no-sandbox");
            //            chrome_op.addArguments("--disable-extensions");
            //            chrome_op.addArguments("--dns-prefetch-disable");
            //            chrome_op.addArguments("--disable-gpu");

                        chrome_op.setPageLoadStrategy(PageLoadStrategy.NORMAL);
                        d1 = new ChromeDriver(chrome_op);
                    break;
                case "Edge":
//                    txtLog.append("\r\n\r\n=== Edge Driver:" + System.getProperty("webdriver.edge.driver"));
//                    txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
                        EdgeDriverService edgeServise = EdgeDriverService.createDefaultService();
                        //edgeServise.SuppressInitialDiagnosticInformation = true;
//                        service.seVerboseLogging = false;
//                        service.UseSpecCompliantProtocol = false;
                        EdgeOptions edge_op = new EdgeOptions();
                       //edge_op.setPageLoadStrategy("normal");
                        edge_op.setCapability( "disable-infobars", true);
                        edge_op.setCapability( "disable-gpu", true);
                        edge_op.setCapability("useAutomationExtension", false);
//                                PageLoadStrategy = PageLoadStrategy.Default,
//                                UnhandledPromptBehavior = UnhandledPromptBehavior.Dismiss
                        
                        d1 = new EdgeDriver(edgeServise, edge_op);
                    break;
                case "Firefox":
                        FirefoxProfile profile = new FirefoxProfile();
                        profile.setPreference("network.proxy.no_proxies_on", "localhost");
                        profile.setPreference("javascript.enabled", true);

//                        DesiredCapabilities capabilities = DesiredCapabilities.;
//                        capabilities.setCapability("marionette", true);
//                        capabilities.setCapability(FirefoxDriver.PROFILE, profile);

                        FirefoxOptions ff_op = new FirefoxOptions();
                        //ff_op.merge(capabilities);
                        //ff_op.addPreference("browser.link.open_newwindow", 3);
                        //ff_op.addPreference("browser.link.open_newwindow.restriction", 0);

                        d1 = new FirefoxDriver(ff_op);
                    break;
                case "IE11":
                        InternetExplorerOptions ie_op = new InternetExplorerOptions();
                        ie_op.ignoreZoomSettings(); // Not necessarily in case 100% zoom.
                        ie_op.introduceFlakinessByIgnoringSecurityDomains(); // Necessary to skip protected  mode setup
                        ie_op.elementScrollTo(ElementScrollBehavior.BOTTOM);
                        ie_op.disableNativeEvents();
//                        var options = new InternetExplorerOptions
//                        {
//                                IgnoreZoomLevel = true,
//                                IntroduceInstabilityByIgnoringProtectedModeSettings = true,
//                                RequireWindowFocus = false,
//                                ElementScrollBehavior = InternetExplorerElementScrollBehavior.Top, // with botton click doesn't work
//                                EnsureCleanSession = true,
//                                //AcceptInsecureCertificates = true,
//                                EnablePersistentHover = true,
//                                UnhandledPromptBehavior = UnhandledPromptBehavior.Accept,
//                                EnableNativeEvents = false //  with true > click problem
//                        };
                        d1 = new InternetExplorerDriver(ie_op);
                    break;
                case "Safari":
                        //To do on MAC machine // =====================================
                        d1 = new SafariDriver();     
                    break;
            }

            d1.manage().window().maximize();
            d1.manage().deleteAllCookies(); // =================================
            
            d1.manage().timeouts().pageLoadTimeout((long) LoadTimeOut, TimeUnit.SECONDS);
            d1.manage().timeouts().setScriptTimeout((long) LoadTimeOut, TimeUnit.SECONDS);
            
            d1.manage().timeouts().implicitlyWait(WaitForElement, TimeUnit.MILLISECONDS);
            
            fluentWait = new FluentWait(d1).withTimeout(Duration.ofMillis(WaitForElement))			
			.pollingEvery(Duration.ofMillis(200))  			
			.ignoring(NoSuchElementException.class);     // fluentWait for Visible / Clickable   
            loadTimeout = new WebDriverWait(d1, (long) LoadTimeOut);      // for load > progress 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return true;
        } catch (Exception ex) {
            txtLog.append("\r\n\r\n=== Web Driver > ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return false;
        }   
    }
    private void LOAD_ENV(){
        if(cmbEnv.getSelectedItem().toString().contains("Staging")){
            BaseAPI = "https://api.compassdigital.org/staging";
            env = "ST";
            url = "https://staging.member.distilr.io";
        } else if (cmbEnv.getSelectedItem().toString().contains("Dev")){
            BaseAPI = "https://api.compassdigital.org/dev";
            env = "DE";
            url = "https://dev.member.distilr.io";
        } else{
            BaseAPI = "https://api.compassdigital.org/v1";
            env = "PR";
            url = "https://app.distilr.io/";
        }
        
        LOAD_CONFIG();
        //GET_JIRA_TOKENS();

    }

    private void LOAD_CONFIG(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            SQL = "SELECT [_conf] FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'WEB' AND [app] = 'JIRA' AND [env] = '" + env + "'";
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery(SQL);
            rs.next();
            C = rs.getString(1);
            conn.close();
        } catch (Exception ex) {
            CONFIG = false;
            txtLog.append("\r\n\r\n=== LOAD_CONFIG > ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            return;
        }
            
        try{            
            if (C.contains(": ")) {
                String c;
                c = C.substring(C.indexOf("env:")); c = c.substring(0, c.indexOf("\r\n")).trim(); env = c.substring(c.indexOf(" ")).trim();
                c = C.substring(C.indexOf("url:")); c = c.substring(0, c.indexOf("\r\n")).trim(); url = c.substring(c.indexOf(" ")).trim();

                c = C.substring(C.indexOf("COUNTRY:")); c = c.substring(0, c.indexOf("\r\n")).trim(); COUNTRY = c.substring(c.indexOf(" ")).trim();

                c = C.substring(C.indexOf("txtAdmin_ID:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtAdmin_ID.setText(c.substring(c.indexOf(" ")).trim());
                c = C.substring(C.indexOf("txtAdmin_PW:")); c = c.substring(0, c.indexOf("\r\n")).trim(); txtAdmin_PW.setText(c.substring(c.indexOf(" ")).trim());

                CONFIG = true;
                txtLog.append("\r\n\r\n=== LOAD_CONFIG > OK");
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            } else {
                CONFIG = false;
                txtLog.append("\r\n\r\n=== WEB / JIRA, User: " + UserID + ", Env: " + env + " > No saved Configuration Found");
                txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            }
        } catch (Exception ex) {
            CONFIG = false;
            txtLog.append("\r\n\r\n=== LOAD_CONFIG > ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void SAVE_CONFIG() {
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        try {

            C = "";
            C += "env: " + env + "\r\n";
            C += "app: " + "N/A" + "\r\n";
            C += "url: " + url + "\r\n";
            
            C += "COUNTRY: " + COUNTRY + "\r\n";            
            
            C += "txtAdmin_ID: " + txtAdmin_ID.getText() + "\r\n";
            C += "txtAdmin_PW: " + txtAdmin_PW.getText()  + "\r\n";
            

        } catch (Exception ex)  {
            txtLog.append("\r\n\r\n=== SAVE_CONFIG > ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
            return;
        }
        
        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            SQL = "DELETE FROM [dbo].[a_config] WHERE [user_id] = '" + UserID + "' AND [platform] = 'WEB' AND [app] = 'JIRA' AND [env] = '" + env + "'";
            Statement _del = conn.createStatement();
            _del.execute(SQL);
            PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[a_config]" +
                    "([user_id]" +   // 1
                    ",[env]" +       // 2
                    ",[platform]" +  // 3
                    ",[app]" +       // 4
                    ",[_conf]" +     // 5
                    ") VALUES (" +
                    "?" +
                    ",?" +
                    ",?" +
                    ",?" +
                    ",?" +
                    ")");
            _insert.setString(1, UserID);
            _insert.setString(2, env);
            _insert.setString(3, "WEB");
            _insert.setString(4, "JIRA");
            _insert.setString(5, C);
            int row = _insert.executeUpdate();
            conn.close();
            
            txtLog.append("\r\n\r\n=== SAVE_CONFIG > OK (" + row + " row)");
            txtLog.setCaretPosition(txtLog.getDocument().getLength());            
        } catch (SQLException ex) {
            txtLog.append("\r\n\r\n=== SAVE_CONFIG > SQL ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

    private void LOG_UPDATE(){  
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));

        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            PreparedStatement _update = conn.prepareStatement("UPDATE [dbo].[aw_result] SET " +
                    " [Date] = ?" +       // 1
                    ", [Time] = ?" +      // 2
                    ", [app] = ?" +       // 3
                    ", [url] = ?" +       // 4
                    ", [summary] = ?" +   // 5
                    ", [t_calls] = ?" +   // 6
                    ", [t_min] = ?" +     // 7
                    ", [t_avg] = ?" +     // 8
                    ", [t_max] = ?" +     // 9
                    ", [p_50] = ?" +      // 10
                    ", [p_90] = ?" +      // 11
                    ", [test_type] = ?" +     // 12
                    ", [user_id] = ?" +       // 13
                    ", [user_ws] = ?" +       // 14
                    ", [env] = ?" +       // 15
                    ", [Result] = ?" +    // 16
                    ", [Status] = ?" +    // 17
                    ", [Excel] = ?" +     // 18
                    " WHERE [app] = 'JIRA_" + env + "' AND [Status] = 'Running'");
            _update.setString(1, LocalDateTime.now().format(Date_formatter));
            _update.setString(2, LocalDateTime.now().format(Time_24_formatter));
            _update.setString(3, "JIRA_" + env);
            _update.setString(4, url);
            _update.setString(5, Summary + " (dur: " + DD.toHours() + ":" + (DD.toMinutes() % 60) + ":" + (DD.getSeconds() % 60) + ")");
            _update.setInt(6, t_calls);
            _update.setDouble(7, t_min);
            _update.setDouble(8, t_avg);
            _update.setDouble(9, t_max);
            _update.setDouble(10, p_50);
            _update.setDouble(11, p_90);
            _update.setString(12, r_type);
            _update.setString(13, UserID);
            _update.setString(14, WsID);
            _update.setString(15, cmbBrow.getSelectedItem().toString());
            _update.setString(16, txtLog.getText());
            _update.setString(17, "Scope: " + SCOPE);
            _update.setString(18, EX);
            int row = _update.executeUpdate();
            conn.close();
        } catch (SQLException ex) {
            txtLog.append("\r\n\r\n=== LOG_UPDATE > SQL ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void LOG_START(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));

        try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
            PreparedStatement _insert = conn.prepareStatement("INSERT INTO [dbo].[aw_result] (" +
                    "[Date]" +   // 1
                    ", [Time]" +   // 2
                    ", [app]" +   // 3
                    ", [url]" +   // 4
                    ", [summary]" +   // 5
                    ", [t_calls]" +   // 6
                    ", [t_min]" +   // 7
                    ", [t_avg]" +   // 8
                    ", [t_max]" +   // 9
                    ", [p_50]" +   // 10
                    ", [p_90]" +   // 11
                    ", [test_type]" +   // 12
                    ", [user_id]" +   // 13
                    ", [user_ws]" +   // 14
                    ", [env]" +   // 15
                    ", [Result]" +   // 16
                    ", [Status]" +   // 17
                    ", [Excel]" +     // 18
                    ") VALUES (" +
                    "?" +     // 1
                    ",?" +    // 2
                    ",?" +    // 3
                    ",?" +    // 4
                    ",?" +    // 5
                    ",?" +    // 6
                    ",?" +    // 7
                    ",?" +    // 8
                    ",?" +    // 9
                    ",?" +    // 10
                    ",?" +    // 11
                    ",?" +    // 12
                    ",?" +    // 13
                    ",?" +    // 14
                    ",?" +    // 15
                    ",?" +    // 16
                    ",?" +    // 17
                    ",?" +    // 18
                    ")");
            _insert.setString(1, LocalDateTime.now().format(Date_formatter));
            _insert.setString(2, LocalDateTime.now().format(Time_24_formatter));
            _insert.setString(3, "JIRA_" + env);
            _insert.setString(4, url);
            _insert.setString(5, "Running...");
            _insert.setString(6, "0");
            _insert.setString(7, "0");
            _insert.setString(8, "0");
            _insert.setString(9, "0");
            _insert.setString(10, "0");
            _insert.setString(11, "0");
            _insert.setString(12, r_type);
            _insert.setString(13, UserID);
            _insert.setString(14, WsID);
            _insert.setString(15, cmbBrow.getSelectedItem().toString());
            _insert.setString(16, "=== Job is running... ===\r\n" + "");
            _insert.setString(17, "Running");
            _insert.setString(18, "None");
            int row = _insert.executeUpdate();
            conn.close();
        }  catch (SQLException ex) {
            txtLog.append("\r\n\r\n=== LOG_START > SQL ERROR: " + ex.getMessage());
            txtLog.setCaretPosition(txtLog.getDocument().getLength()); 
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }

     
    // <editor-fold defaultstate="collapsed" desc="Form Variables Declaration - do not modify">
    public static String url = "";
    public static String env = "";
   
    private boolean Load;
    private String Report_Date;
    private String Report_File;
    private static Duration DD;
    private int d1LastRow = -1; 
 
    private boolean CONFIG = false;
    private String C = "";

    public static int T_Index;
    private String Last_EX;    
    private static final Stopwatch sw1 = Stopwatch.createUnstarted();
    private static final DateTimeFormatter Time_12_formatter = DateTimeFormatter.ofPattern("hh:mm:ss a"); 
    private static final DateTimeFormatter Time_24_formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
    private static final DateTimeFormatter Date_formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    private static String SQL = ""; 
    private String SCOPE;
    
    public static String JIRA_UserID = "";    
    public static String JIRA_UserPW = "";

    private static String ID_TKN = "";    
    private static String DL_TKN = ""; 

    private static String BaseAPI = "";
    private static String COUNTRY = "Canada";

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DV1;
    private javax.swing.JCheckBox _JWeb;
    private javax.swing.JCheckBox _ZApi;
    private javax.swing.JButton btnLog;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSave_Opt;
    private javax.swing.JComboBox<String> cmbBrow;
    private javax.swing.JComboBox<String> cmbEnv;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblMetrics;
    private javax.swing.JLabel lblSITES11;
    private javax.swing.JLabel lblSITES13;
    private javax.swing.JLabel lblSITES4;
    private javax.swing.JLabel lblSITES6;
    private javax.swing.JTextField txtAdmin_ID;
    private javax.swing.JTextField txtAdmin_PW;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
