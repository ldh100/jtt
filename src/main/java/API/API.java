/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package API;

import A.Func;
import static A.A.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.Cursor;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.table.DefaultTableModel;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
/**
 *
 * @author Oleg.Spozito
 */
public class API extends javax.swing.JInternalFrame {
    /**
     * Creates new form AP3
     */
    public API() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSITES = new javax.swing.JLabel();
        lblBRANDS = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        btnApp = new javax.swing.JButton();
        btnSite = new javax.swing.JButton();
        btnUnit = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        btnBrand = new javax.swing.JButton();
        btnGroup = new javax.swing.JButton();
        btnCal = new javax.swing.JButton();
        btnLoc_Menus = new javax.swing.JButton();
        btnAn = new javax.swing.JButton();
        btnUser = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        DV1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DV2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLOG = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        btnLog = new javax.swing.JButton();
        lblSITES13 = new javax.swing.JLabel();
        lblSITES14 = new javax.swing.JLabel();
        cmbENV = new javax.swing.JComboBox<>();
        cmbAPP = new javax.swing.JComboBox<>();
        txtAPI = new javax.swing.JTextField();
        txtMobile_PW = new javax.swing.JTextField();
        lblSITES3 = new javax.swing.JLabel();
        lblSITES6 = new javax.swing.JLabel();
        cmbGROUP = new javax.swing.JComboBox<>();
        lblSITES8 = new javax.swing.JLabel();
        cmbMENU = new javax.swing.JComboBox<>();
        lblSITES12 = new javax.swing.JLabel();
        txtMobile_ID = new javax.swing.JTextField();
        btnRun = new javax.swing.JButton();
        lblSITES7 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);
        setIconifiable(true);
        setTitle("Configurations / API(s)");
        setMinimumSize(new java.awt.Dimension(860, 532));
        setName("AP3"); // NOI18N
        setNormalBounds(new java.awt.Rectangle(0, 0, 104, 0));
        setPreferredSize(new java.awt.Dimension(860, 532));
        setVisible(true);
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                AP3_AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSITES.setText("Sites");
        lblSITES.setAlignmentX(0.5F);
        getContentPane().add(lblSITES, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 4, 360, -1));

        lblBRANDS.setText("Selected Site - Brands");
        lblBRANDS.setName("lblBRANDS"); // NOI18N
        getContentPane().add(lblBRANDS, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 4, 268, -1));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Standard Configurations/API (s):", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11))); // NOI18N
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnApp.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnApp.setText("App");
        btnApp.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnApp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAppMouseClicked(evt);
            }
        });
        jPanel5.add(btnApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 20, 112, 22));

        btnSite.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnSite.setText("Site");
        btnSite.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnSite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSiteMouseClicked(evt);
            }
        });
        jPanel5.add(btnSite, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 48, 112, 22));

        btnUnit.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnUnit.setText("Unit");
        btnUnit.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnUnit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUnitMouseClicked(evt);
            }
        });
        jPanel5.add(btnUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 76, 112, 22));

        btnMenu.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnMenu.setText("Companies/Global Menus");
        btnMenu.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMenuMouseClicked(evt);
            }
        });
        jPanel5.add(btnMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(284, 148, 133, 22));

        btnBrand.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnBrand.setText("Brand");
        btnBrand.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnBrand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBrandMouseClicked(evt);
            }
        });
        jPanel5.add(btnBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 104, 112, 22));

        btnGroup.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnGroup.setText("Groups/Sectors");
        btnGroup.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnGroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGroupMouseClicked(evt);
            }
        });
        jPanel5.add(btnGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 148, 140, 22));

        btnCal.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnCal.setText("Calendar");
        btnCal.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCalMouseClicked(evt);
            }
        });
        jPanel5.add(btnCal, new org.netbeans.lib.awtextra.AbsoluteConstraints(284, 104, 133, 22));

        btnLoc_Menus.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnLoc_Menus.setText("Menus");
        btnLoc_Menus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnLoc_Menus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLoc_MenusMouseClicked(evt);
            }
        });
        jPanel5.add(btnLoc_Menus, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 104, 140, 22));

        btnAn.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnAn.setText("Announcements");
        btnAn.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnAn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAnMouseClicked(evt);
            }
        });
        jPanel5.add(btnAn, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 48, 140, 22));

        btnUser.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnUser.setText("User");
        btnUser.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUserMouseClicked(evt);
            }
        });
        jPanel5.add(btnUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 136, 22));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 152, 424, 180));
        jPanel5.getAccessibleContext().setAccessibleName("API(s):");

        DV1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        DV1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV1.setCellSelectionEnabled(true);
        DV1.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV1.setName("DV1"); // NOI18N
        DV1.setRequestFocusEnabled(false);
        DV1.setRowHeight(18);
        DV1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DV1.getTableHeader().setReorderingAllowed(false);
        DV1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(DV1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 22, 428, 312));

        DV2.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        DV2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DV2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        DV2.setGridColor(java.awt.SystemColor.activeCaptionBorder);
        DV2.setName("DV2"); // NOI18N
        DV2.setOpaque(false);
        DV2.setRowHeight(18);
        DV2.getTableHeader().setReorderingAllowed(false);
        DV2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DV2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(DV2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 22, 420, 124));

        txtLOG.setEditable(false);
        txtLOG.setColumns(20);
        txtLOG.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtLOG.setRows(5);
        txtLOG.setText("Start >");
        txtLOG.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtLOG.setMinimumSize(new java.awt.Dimension(50, 19));
        txtLOG.setPreferredSize(null);
        jScrollPane1.setViewportView(txtLOG);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 388, 428, 124));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnLog.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnLog.setText(" < Log");
        btnLog.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogMouseClicked(evt);
            }
        });
        jPanel3.add(btnLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 16, 52, 22));

        lblSITES13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES13.setText("Environment:");
        lblSITES13.setAlignmentX(0.5F);
        jPanel3.add(lblSITES13, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 4, 92, 16));

        lblSITES14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSITES14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES14.setText("Application:");
        lblSITES14.setAlignmentX(0.5F);
        jPanel3.add(lblSITES14, new org.netbeans.lib.awtextra.AbsoluteConstraints(312, 4, 92, 16));

        cmbENV.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbENV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbENVItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbENV, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 20, 116, 20));

        cmbAPP.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmbAPP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAPPItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbAPP, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 20, 108, 20));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 464, 416, 44));

        txtAPI.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtAPI.setText("cdl.test.xtt@gmail.com");
        getContentPane().add(txtAPI, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 360, 844, -1));

        txtMobile_PW.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtMobile_PW.setText("AnnaL0g0");
        getContentPane().add(txtMobile_PW, new org.netbeans.lib.awtextra.AbsoluteConstraints(448, 436, 184, -1));

        lblSITES3.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES3.setText("Mobile User E-mail:");
        lblSITES3.setToolTipText("");
        lblSITES3.setAlignmentX(0.5F);
        getContentPane().add(lblSITES3, new org.netbeans.lib.awtextra.AbsoluteConstraints(448, 384, 120, -1));

        lblSITES6.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES6.setText("Mobile User Password");
        lblSITES6.setAlignmentX(0.5F);
        getContentPane().add(lblSITES6, new org.netbeans.lib.awtextra.AbsoluteConstraints(448, 420, -1, -1));

        cmbGROUP.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        cmbGROUP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGROUPItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbGROUP, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 396, 188, 20));

        lblSITES8.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES8.setText("Group/Sector:");
        lblSITES8.setAlignmentX(0.5F);
        getContentPane().add(lblSITES8, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 380, -1, -1));

        cmbMENU.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        getContentPane().add(cmbMENU, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 436, 188, 20));

        lblSITES12.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES12.setText("Company/Global Menu:");
        lblSITES12.setAlignmentX(0.5F);
        getContentPane().add(lblSITES12, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 420, -1, -1));

        txtMobile_ID.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        txtMobile_ID.setText("cdl.test.xtt@gmail.com");
        getContentPane().add(txtMobile_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(448, 400, 184, -1));

        btnRun.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        btnRun.setText(" < Run Custom API");
        btnRun.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRunMouseClicked(evt);
            }
        });
        getContentPane().add(btnRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(716, 336, 132, 20));

        lblSITES7.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        lblSITES7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSITES7.setText("Custom API URL:");
        lblSITES7.setAlignmentX(0.5F);
        getContentPane().add(lblSITES7, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 344, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DV1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV1MouseClicked
        GetBrands_API();
    }//GEN-LAST:event_DV1MouseClicked


    private void AP3_AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_AP3_AncestorAdded
        Load = true;
        cmbAPP.addItem("Boost");
        cmbAPP.addItem("Canteen");
        cmbAPP.addItem("JJKitchen");
        cmbAPP.addItem("Rogers");
        cmbAPP.addItem("StandardCognition");
        cmbAPP.addItem("Tacit");
        cmbAPP.addItem("Thrive");
        
        cmbENV.addItem("Staging");
        cmbENV.addItem("Production");
        cmbENV.addItem("Development");
     
        
        cmbENV.setSelectedIndex(0);
        cmbAPP.setSelectedIndex(0);
        
        Load = false;
        LOAD_ENV();
        LOAD_DATA();
    }//GEN-LAST:event_AP3_AncestorAdded

    private void cmbENVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbENVItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            LOAD_ENV();
        }
        txtAPI.setText(BaseAPI + "/");
    }//GEN-LAST:event_cmbENVItemStateChanged

    private void cmbAPPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAPPItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            int X = evt.getStateChange();
            app = cmbAPP.getSelectedItem().toString();
            GetSites_API();
        }
    }//GEN-LAST:event_cmbAPPItemStateChanged

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        F_COUNT--;
    }//GEN-LAST:event_formInternalFrameClosed

    private void DV2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DV2MouseClicked
        BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
    }//GEN-LAST:event_DV2MouseClicked

    private void btnAppMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAppMouseClicked
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load " + app + " configurations, API(s)...");
        String J = "Application: " + app + " - configuration API(s):" + "\r\n";
        CloseableHttpClient httpclient = HttpClients.createDefault();
        
        J += "\r\n========= Public Configuration:" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/config/public/" + appId); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/config/public/" + appId + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");     
        }         
        txtLOG.append("\r\n== /config/public/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        J += "\r\n=========  Private Configuration:" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/config/" + appId); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/config/" + appId + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");     
        }         
        txtLOG.append("\r\n== /config/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        J += "\r\n========= Multigroup API" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/multigroup/" + appId); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/location/multigroup/" + appId + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");   
        }         
        txtLOG.append("\r\n== /location/multigroup/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        try {
            httpclient.close();
        } catch (Exception ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }
    }//GEN-LAST:event_btnAppMouseClicked
    private void btnSiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSiteMouseClicked
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load " + SITE + " group API...");
        String J = "Site: " + SITE + " - configuration API(s):" + "\r\n";
        CloseableHttpClient httpclient = HttpClients.createDefault();
        
        J += "\r\n========= Public Configuration:" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/config/public/" + SiteID); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/config/public/" + SiteID + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");     
        }         
        txtLOG.append("\r\n== /config/public/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        J += "\r\n=========  Private Configuration:" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/config/" + SiteID); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/config/" + appId + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");     
        }         
        txtLOG.append("\r\n== /config/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();        

        J += "========= Location/Group API" + "\r\n";
        sw1.start();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + SiteID); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/location/group/" + SiteID + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }   
        
        try {
            httpclient.close();
        } catch (Exception ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        txtLOG.append("\r\n== /location/group/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();

        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }
    }//GEN-LAST:event_btnSiteMouseClicked
    private void btnUnitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUnitMouseClicked
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load " + "Utit" + " location API...");
        String UNIT_ID = DV2.getValueAt(DV2.getSelectedRow(), 3).toString();
        String J = "Unit ID: " + UNIT_ID + " - configuration API(s):" + "\r\n";

        CloseableHttpClient httpclient = HttpClients.createDefault();
        J += "\r\n========= Public Configuration:" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/config/public/" + UNIT_ID); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/config/public/" + appId + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");     
        }         
        txtLOG.append("\r\n== /config/public/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        J += "\r\n=========  Private Configuration:" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/config/" + UNIT_ID); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/config/" + appId + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");     
        }         
        txtLOG.append("\r\n== /config/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();        

        J += "========= Location API" + "\r\n";
        sw1.start();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/" + UNIT_ID + "?extended=true&nocache=1"); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/location/" + UNIT_ID + "?extended=true&nocache=1" + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }   
        
        try {
            httpclient.close();
        } catch (Exception ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        txtLOG.append("\r\n== /location/> " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();

        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }
        
    }//GEN-LAST:event_btnUnitMouseClicked
    private void btnMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuMouseClicked
        int I = cmbGROUP.getSelectedIndex();
        if(I < 0){ // =========== DEBUG
            txtLOG.append("\r\n-Load Sector/Companies(Menus) ERROR: cmbGROUP.getSelectedIndex() < 0");
            return;
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load Sector/Companies(Menus) API..."); 
        String J = "========= Sector/Companies(Menus) API:" + "\r\n";
        CloseableHttpClient httpclient = HttpClients.createDefault();

        sw1.start();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/sector/" + GROUP_IDS.get(I) + "?expanded=false"); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/location/sector/" + GROUP_IDS.get(I) + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }   
        
        try {
            httpclient.close();
        } catch (Exception ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        txtLOG.append("\r\n== /location/sector/<ID> > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();

        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }  
    }//GEN-LAST:event_btnMenuMouseClicked
    private void btnBrandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrandMouseClicked
       this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load " + BRAND + " brand API...");
        String J = "Brand: " + BRAND + " - configuration API(s):" + "\r\n";
        CloseableHttpClient httpclient = HttpClients.createDefault();
        
        J += "\r\n========= Public Configuration:" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/config/public/" + BrandID); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/config/public/" + BrandID + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");     
        }         
        txtLOG.append("\r\n== /config/public/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        J += "\r\n=========  Private Configuration:" + "\r\n";
        sw1.start(); 
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/config/" + BrandID); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(response.getEntity()) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/config/" + BrandID + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            J += "- Exception: " + ex.getMessage() + "\r\n";
            txtLOG.append("\r\n-Exception: " + ex.getMessage() + "\r\n");     
        }         
        txtLOG.append("\r\n== /config/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();        

        J += "========= Group API" + "\r\n";
        sw1.start();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/brand/" + BrandID); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/location/brand/" + BrandID + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }   
        
        try {
            httpclient.close();
        } catch (Exception ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        txtLOG.append("\r\n== /location/brand/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();

        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }
    }//GEN-LAST:event_btnBrandMouseClicked
    private void btnGroupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGroupMouseClicked
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load Group/Sector API..."); 
        String J = "========= Group/Sector API:" + "\r\n";
        CloseableHttpClient httpclient = HttpClients.createDefault();

        sw1.start();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/sector?_provider=cdl"); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/location/sector?_provider=cdl" + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }   
        
        try {
            httpclient.close();
        } catch (Exception ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        txtLOG.append("\r\n== /location/sector?_provider=cdl > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();

        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }
    }//GEN-LAST:event_btnGroupMouseClicked

    private void btnLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogMouseClicked
        if(!Func.SHOW_FILE(txtLOG.getText(), "txt")){
            txtLOG.append("\r\n\r\n=== Cannot show 'txt' output");
        }
    }//GEN-LAST:event_btnLogMouseClicked
    private void btnCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCalMouseClicked
        // /calendar/
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load Group/Sector API..."); 
        String J = "========= Brand " + BRAND + " calendar API:" + "\r\n";
        CloseableHttpClient httpclient = HttpClients.createDefault();

        sw1.start();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/calendar/" + BrandID); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/calendar/"  + BrandID + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }   
        
        try {
            httpclient.close();
        } catch (Exception ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        txtLOG.append("\r\n== /calendar/ > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();

        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }        
    }//GEN-LAST:event_btnCalMouseClicked

    private void btnLoc_MenusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoc_MenusMouseClicked
        // OwrEMjgG5zUeoXRvKoe3cZy8R8WqPBt9rj2dwv5eUazpZOKPNzcyWAyRG10vCWQg9Oz < in assigned
        // eBLlmjy9NwfXNdoqJ6Gyu58ZEOjgWlH4BMjE1G3Ru2r3OjOq9Qtm97024RLzSeyXQrp < in menus
    }//GEN-LAST:event_btnLoc_MenusMouseClicked

    private void btnAnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAnMouseClicked

    private void cmbGROUPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGROUPItemStateChanged
        if(!Load && evt.getStateChange() == 1) {
            GetCompany_API();
        }
    }//GEN-LAST:event_cmbGROUPItemStateChanged

    private void btnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRunMouseClicked
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load Group/Sector API..."); 
        String J = "========= Group/Sector API:" + "\r\n";
        CloseableHttpClient httpclient = HttpClients.createDefault();
        String URL = txtAPI.getText();
        sw1.start();
        try {
            HttpGet httpget = new HttpGet(URL); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += URL + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }   
        
        try {
            httpclient.close();
        } catch (IOException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        txtLOG.append("\r\n== " + URL + " > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();

        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }
    }//GEN-LAST:event_btnRunMouseClicked

    private void btnUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUserMouseClicked
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n\r\n-Load User API..."); 
        String J = "========= User API:" + "\r\n";
        CloseableHttpClient httpclient = HttpClients.createDefault();
        String authAuth = Base64.getEncoder().encodeToString((txtMobile_ID.getText().trim() + ":" + txtMobile_PW.getText().trim()).getBytes());

        sw1.start();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/user/auth" + "?realm=" + appId); 
            httpget.setHeader("Authorization",  "Basic " + authAuth);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 500) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            JSONObject json = new JSONObject(httpclient.execute(httpget, responseHandler));
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            J += BaseAPI + "/user/auth?realm=" + "\r\n" + gson.toJson(json);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }   
        
        try {
            httpclient.close();
        } catch (Exception ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
        }
        txtLOG.append("\r\n== " + "/user/auth?realm=" + " > " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();

        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        if(!Func.SHOW_FILE(J, "json")){
            txtLOG.append("\r\n\r\n=== Cannot show 'json' output");
        }
    }//GEN-LAST:event_btnUserMouseClicked

    private void LOAD_ENV(){
        if(cmbENV.getSelectedItem().toString().contains("Staging")){
            BaseAPI = "https://api.compassdigital.org/staging";
            env = "ST";
            url = "https://staging.adminpanel.compassdigital.org/";
        } else if (cmbENV.getSelectedItem().toString().contains("Dev")){
            BaseAPI = "https://api.compassdigital.org/dev";
            env = "DE";
            url = "https://dev.adminpanel.compassdigital.org/";
        } else{
            BaseAPI = "https://api.compassdigital.org/v1";
            env = "PR";
            url = "https://adminpanel.compassdigital.org/";
        }     
        Get_P2_TKN_and_Slack_IDs();
        GetSites_API();
        GetGroups_API();        
    }
    private void LOAD_DATA(){
        app = cmbAPP.getSelectedItem().toString();
        txtLOG.append("\r\n\r\n=== Ready >");
    }
    private void Get_P2_TKN_and_Slack_IDs(){
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [ap_token] FROM[dbo].[env] WHERE [DESCRIPTION] = '" + cmbENV.getSelectedItem() + "'");
            rs.next();
            P2_TKN = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== P2_TKN > ERROR: " + ex.getMessage());
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetSites_API() {
        d1LastRow = -1;
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Sites from API...");
        sw1.start();
        try {
            ResultSet rs = conn.createStatement().executeQuery("SELECT [id] FROM[dbo].[p2_app] WHERE [app] = '" + cmbAPP.getSelectedItem() + 
                    "' AND [env] LIKE '" + cmbENV.getSelectedItem().toString() + "%'");
            rs.next();
            appId = rs.getString(1);
        } catch (SQLException ex) {
            txtLOG.append("\r\n\r\n=== Get S_OAuth_TKN > ERROR: " + ex.getMessage());
        }
        String[] SitesColumnsName = {"Site","Platform","Country","Id"}; 
        DefaultTableModel SitesModel = new DefaultTableModel();
        SitesModel.setColumnIdentifiers(SitesColumnsName);
        DV1.setModel(SitesModel);
        
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/multigroup/" + appId);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + response.getStatusLine().getStatusCode() + " - " + response.getStatusLine().getReasonPhrase());
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            
            String site;
            String country;
            String id;
            JSONObject addresses;
            JSONObject meta;

            JSONArray Groups = json.getJSONArray("groups");
            for (int i = 0; i < Groups.length(); i++) {
                site = "";
                country = "null";
                id = "null";
                addresses = null;
                meta = null;
                platform = "DH";
                JSONObject object = Groups.getJSONObject(i);
                if(object.has("name")){
                    site = object.getString("name");   
                } 
                if(object.has("id")){
                    id = object.getString("id");
                } 
                if(object.has("meta")){
                    meta = object.getJSONObject("meta");
                    if (meta.has("migrated") && meta.getBoolean("migrated")){
                        platform = "CDL migrated";
                    }
                }              
                if (id.length() > 50) {
                    platform = "CDL";
                } 

                if(object.has("address")){
                    addresses = object.getJSONObject("address");
                }  
                if(addresses != null && addresses.has("country")){
                    country = addresses.getString("country");   
                }
                SitesModel.addRow(new Object[]{site, platform, country, id});
            }
            DV1.setModel(SitesModel);
            DV1.setDefaultEditor(Object.class, null);
            DV1.getColumnModel().getColumn(0).setPreferredWidth(250);
            DV1.getColumnModel().getColumn(1).setPreferredWidth(70);
            DV1.getColumnModel().getColumn(2).setPreferredWidth(50);
            DV1.getColumnModel().getColumn(3).setPreferredWidth(400);
   
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());   
            }
        }
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        
        if (DV1.getRowCount() > 0) {
            DV1.changeSelection(0, 0, false, false);
            DV1.repaint();
            GetBrands_API();
        }
        lblSITES.setText(app + " Sites (" + DV1.getRowCount() + " found)");
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetBrands_API() {
        if (d1LastRow == DV1.getSelectedRow()) {
           return;
        }
        d1LastRow = DV1.getSelectedRow();
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Brands from API...");
        sw1.start();     
        
        String[] BrandsColumnsName = {"Station","Location","Brand Id", "Unit ID"}; 
        DefaultTableModel BrandssModel = new DefaultTableModel();
        BrandssModel.setColumnIdentifiers(BrandsColumnsName);
        DV2.setModel(BrandssModel);
        
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3) + "?extended=true&nocache=1"); 
            //HttpGet httpget = new HttpGet(BaseAPI + "/location/group/" + DV1.getValueAt(DV1.getSelectedRow(), 3)); 
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Location = json.getJSONArray("locations");
            JSONArray brands = null;
            
            String brand;
            String location;
            String id;
            String unit_id;
            if (Location != null) {
                for (Object l : Location) {
                    brand = "";
                    location = "";
                    id = "";
                    unit_id = "";
                    JSONObject loc = (JSONObject) l;
                    if (loc.has("brands")) {
                        brands = loc.getJSONArray("brands");
                        for (Object b : brands) {
                            JSONObject br = (JSONObject) b;
                            brand = br.getString("name");                            
                            if (!br.isNull("location_description")) {
                                location = br.getString("location_description");
                            }
                            id = br.getString("id");
                            unit_id = loc.getString("id");
                            BrandssModel.addRow(new Object[]{brand, location, id, unit_id});
                        }
                    }
                }
            }
            DV2.setModel(BrandssModel);    
            DV2.setDefaultEditor(Object.class, null);
            DV2.getColumnModel().getColumn(0).setPreferredWidth(140);
            DV2.getColumnModel().getColumn(1).setPreferredWidth(140);
            DV2.getColumnModel().getColumn(2).setPreferredWidth(80);
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());     
        }         
        finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLOG.append("\r\n- Exception: " + ex.getMessage());   
            }
        } 
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
   
        if (DV2.getRowCount() > 0) {
            DV2.changeSelection(0, 0, false, false);
            BrandID = String.valueOf(DV2.getValueAt(DV2.getSelectedRow(), 2));
        } else {
            BrandID = "null";
        }

        SiteID = String.valueOf(DV1.getValueAt(DV1.getSelectedRow(), 3));
        lblBRANDS.setText("Selected Site Brands (" + DV2.getRowCount() + " found)");
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
    private void GetGroups_API() {  
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Groups/Sector from API...");
        cmbGROUP.removeAllItems();
        GROUP_IDS = new ArrayList<>();
        
        Load = true;
        sw1.start();     
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            HttpGet httpget = new HttpGet(BaseAPI + "/location/sector?_provider=cdl"); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Sectors = json.getJSONArray("sectors");           
            String S_NAME = "";
            T_Index = -1;
            for (int i = 0; i < Sectors.length(); i++) {
                S_NAME = Sectors.getJSONObject(i).getString("name");
                cmbGROUP.addItem(S_NAME);
                GROUP_IDS.add(Sectors.getJSONObject(i).getString("id"));
                if(S_NAME.equals(GROUP)){
                    T_Index = i;
                }
            }
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());  
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        } finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLOG.append("\r\n- Exception: " + ex.getMessage());   
                this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            }
        } 
        if(T_Index != -1){
            cmbGROUP.setSelectedIndex(T_Index);
        }else{
            if(cmbGROUP.getItemCount() > 0){
                cmbGROUP.setSelectedIndex(0);
            }
        }
        txtLOG.append("\r\n== Group: " + cmbGROUP.getItemAt(T_Index) + ", Id: " + GROUP_IDS.get(T_Index)); 
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        Load = false;   
        GetCompany_API();
    }
    private void GetCompany_API() {  
        int I = cmbGROUP.getSelectedIndex();
        if(I < 0){ // =========== DEBUG
            txtLOG.append("\r\n-Load Sector/Companies(Menus) ERROR: cmbGROUP.getSelectedIndex() < 0");
            return;
        }
        this.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        txtLOG.append("\r\n-Load Sector/Companies(Menus) from API...");
        CloseableHttpClient httpclient = HttpClients.createDefault();
        try {
            
            cmbMENU.removeAllItems();
            sw1.start();     
            HttpGet httpget = new HttpGet(BaseAPI + "/location/sector/" + GROUP_IDS.get(I) + "?expanded=false"); 
            httpget.setHeader("Authorization",  "Bearer " + P2_TKN);
            ResponseHandler<String> responseHandler = (final HttpResponse response) -> {
                int status = response.getStatusLine().getStatusCode();
                String Msg = response.getStatusLine().getReasonPhrase();
                if (status >= 200 && status < 300) {
                    HttpEntity entity = response.getEntity();
                    return entity != null ? EntityUtils.toString(entity) : null;
                } else {
                    throw new ClientProtocolException("Response: " + status + " - " + Msg);
                }
            };
            String responseBody = httpclient.execute(httpget, responseHandler);
            JSONObject json = new JSONObject(responseBody);
            JSONArray Sectors = json.getJSONArray("companies");           
            String S_NAME = "";
            T_Index = -1;
            for (int i = 0; i < Sectors.length(); i++) {
                S_NAME = Sectors.getJSONObject(i).getString("name");
                cmbMENU.addItem(S_NAME);
                if(S_NAME.equals(GL_MENU)){
                    T_Index = i;
                }
            }
        } catch (IOException | JSONException ex) {
            txtLOG.append("\r\n- Exception: " + ex.getMessage());  
            this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
        } finally {
            try {
                httpclient.close();
            } catch (IOException ex) {
                txtLOG.append("\r\n- Exception: " + ex.getMessage());   
                this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            }
        } 
        if(T_Index != -1){
            cmbMENU.setSelectedIndex(T_Index);
        }else{
            if(cmbMENU.getItemCount() > 0){
                cmbMENU.setSelectedIndex(0);
            }
        }
        txtLOG.append("\r\n== " + String.format("%.2f", (double)(sw1.elapsed(TimeUnit.MILLISECONDS)) / (long)(1000)) + " sec ==");
        sw1.reset();
        this.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    }
       

    private boolean Load;
    private int d1LastRow = -1; 
    private List<String> GROUP_IDS;
   
    // <editor-fold defaultstate="collapsed" desc="Form Variables Declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DV1;
    private javax.swing.JTable DV2;
    private javax.swing.JButton btnAn;
    private javax.swing.JButton btnApp;
    private javax.swing.JButton btnBrand;
    private javax.swing.JButton btnCal;
    private javax.swing.JButton btnGroup;
    private javax.swing.JButton btnLoc_Menus;
    private javax.swing.JButton btnLog;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSite;
    private javax.swing.JButton btnUnit;
    private javax.swing.JButton btnUser;
    private javax.swing.JComboBox<String> cmbAPP;
    private javax.swing.JComboBox<String> cmbENV;
    private javax.swing.JComboBox<String> cmbGROUP;
    private javax.swing.JComboBox<String> cmbMENU;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblBRANDS;
    private javax.swing.JLabel lblSITES;
    private javax.swing.JLabel lblSITES12;
    private javax.swing.JLabel lblSITES13;
    private javax.swing.JLabel lblSITES14;
    private javax.swing.JLabel lblSITES3;
    private javax.swing.JLabel lblSITES6;
    private javax.swing.JLabel lblSITES7;
    private javax.swing.JLabel lblSITES8;
    private javax.swing.JTextField txtAPI;
    private javax.swing.JTextArea txtLOG;
    private javax.swing.JTextField txtMobile_ID;
    private javax.swing.JTextField txtMobile_PW;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
