/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package A;
import AP3.AP3;
import API.API;
import Reports.W_Report;
import java.awt.Cursor;
import java.beans.PropertyVetoException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.jar.Attributes;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 * @author Oleg.Spozito
 */

public class A extends javax.swing.JFrame {
    /**
     * Creates new form A
     */
    public A() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DesktopPane = new javax.swing.JDesktopPane();
        MenuBar = new javax.swing.JMenuBar();
        Menu_AP3 = new javax.swing.JMenu();
        Menu_FW = new javax.swing.JMenu();
        MenuWO = new javax.swing.JMenu();
        MenuORDERS = new javax.swing.JMenu();
        Menu_API = new javax.swing.JMenu();
        MenuReports = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JTT");
        setMinimumSize(new java.awt.Dimension(912, 648));
        setSize(new java.awt.Dimension(912, 648));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        DesktopPane.setBackground(new java.awt.Color(204, 204, 204));
        DesktopPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DesktopPane.setName("A"); // NOI18N

        javax.swing.GroupLayout DesktopPaneLayout = new javax.swing.GroupLayout(DesktopPane);
        DesktopPane.setLayout(DesktopPaneLayout);
        DesktopPaneLayout.setHorizontalGroup(
            DesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 996, Short.MAX_VALUE)
        );
        DesktopPaneLayout.setVerticalGroup(
            DesktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 666, Short.MAX_VALUE)
        );

        Menu_AP3.setBorder(null);
        Menu_AP3.setText("AP3");
        Menu_AP3.setName("AP3"); // NOI18N
        Menu_AP3.setVerifyInputWhenFocusTarget(false);
        Menu_AP3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Menu_AP3MouseClicked(evt);
            }
        });
        MenuBar.add(Menu_AP3);

        Menu_FW.setText("FW");
        Menu_FW.setEnabled(false);
        Menu_FW.setName("FW"); // NOI18N
        Menu_FW.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Menu_FWMouseClicked(evt);
            }
        });
        MenuBar.add(Menu_FW);

        MenuWO.setText("WebOrdering");
        MenuWO.setEnabled(false);
        MenuWO.setName("FW"); // NOI18N
        MenuWO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuWOMouseClicked(evt);
            }
        });
        MenuBar.add(MenuWO);

        MenuORDERS.setText("Orders");
        MenuORDERS.setEnabled(false);
        MenuORDERS.setName("FW"); // NOI18N
        MenuORDERS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuORDERSMouseClicked(evt);
            }
        });
        MenuBar.add(MenuORDERS);

        Menu_API.setBorder(null);
        Menu_API.setText("APIs");
        Menu_API.setName("AP3"); // NOI18N
        Menu_API.setVerifyInputWhenFocusTarget(false);
        Menu_API.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Menu_APIMouseClicked(evt);
            }
        });
        MenuBar.add(Menu_API);

        MenuReports.setBorder(null);
        MenuReports.setText("Reports");
        MenuReports.setName("FW"); // NOI18N
        MenuReports.setVerifyInputWhenFocusTarget(false);
        MenuReports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuReportsMouseClicked(evt);
            }
        });
        MenuBar.add(MenuReports);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DesktopPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DesktopPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Menu_AP3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Menu_AP3MouseClicked
        if(Menu_AP3.isVisible()){
            Menu_AP3.setVisible(false);
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            Open_AP3();
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
            Menu_AP3.setVisible(true);
        }
    }//GEN-LAST:event_Menu_AP3MouseClicked
    private void Open_AP3(){
        AP3 ap3 = new AP3();
        this.DesktopPane.add(ap3);
        int Y;
        int X;
        if(F_COUNT > 4) {
            Y = F_COUNT;
            X = F_COUNT - 5;
        }else{
            Y = X = F_COUNT;
        }
        ap3.setLocation(X*20, Y*20);
        //ap3.show();
        try {
            ap3.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(A.class.getName()).log(Level.SEVERE, null, ex);
        } 
        //ap3.show();
        F_COUNT++;     
    }
    private void Open_API(){
        API api = new API();
        this.DesktopPane.add(api);
        int Y;
        int X;
        if(F_COUNT > 4) {
            Y = F_COUNT;
            X = F_COUNT - 5;
        }else{
            Y = X = F_COUNT;
        }
        api.setLocation(X*20, Y*20);
        try {
            api.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(A.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } 
        //api.show();
        F_COUNT++;     
    }    
    private void Menu_FWMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Menu_FWMouseClicked
        if(Menu_FW.isEnabled()){
            Menu_FW.setEnabled(false);
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            //OpenFM();
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
            Menu_FW.setEnabled(true);
        }
    }//GEN-LAST:event_Menu_FWMouseClicked
 
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Get_Version();
        Get_User();
        this.setTitle("JTT v1.0.1" + " - " + "User: " + UserID + ", Machine: " + WsID + ", OS: " + WsOS);
        if (!UserID.toLowerCase().contains("oleg")){
            Register_Login();            
        }

        //Open_AP3();
        //Open_API();
    }//GEN-LAST:event_formWindowOpened

    private void Register_Login() {     
        new Thread(new Runnable() {
            @Override
            public void run() {
                try (Connection conn = DriverManager.getConnection(QA_BD_CON_STRING)) {
                    PreparedStatement _update = conn.prepareStatement("UPDATE users SET " +
                            "LogIN = 'JTT', " +
                            "LastL = '" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MMM-yy hh:mm a")) + "', " +
                            "USER_MACHINE = '" + WsID + "', " +
                            "IP = '" + "Not used" + "' " +
                            "WHERE User_ID = '" + UserID + "'");
                    int row = _update.executeUpdate();
                    //Logger.getLogger(A.class.getName()).log(Level.SEVERE, "=== Register_Login: " + row + " row updated");
                } catch (SQLException ex) {                  
                    Logger.getLogger(A.class.getName()).log(Level.SEVERE, "=== Register_Login > SQL ERROR: " + ex.getMessage(), ex);
                }
            }
        }).start();
    } 

    private void MenuORDERSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuORDERSMouseClicked
        if(MenuORDERS.isEnabled()){
            MenuORDERS.setEnabled(false);
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            //Open_Order();
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
            MenuORDERS.setEnabled(true);
        }
    }//GEN-LAST:event_MenuORDERSMouseClicked
    private void MenuWOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuWOMouseClicked
        if(MenuWO.isEnabled()){
            MenuWO.setEnabled(false);
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            //Open_WO();
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
            MenuWO.setEnabled(true);
        }
    }//GEN-LAST:event_MenuWOMouseClicked
    private void MenuReportsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuReportsMouseClicked
        if(MenuReports.isEnabled()){
            MenuReports.setEnabled(false);
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            Open_REPORT();
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
            MenuReports.setEnabled(true);
        }   
    }//GEN-LAST:event_MenuReportsMouseClicked

    private void Menu_APIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Menu_APIMouseClicked
        if(Menu_API.isEnabled()){
            Menu_API.setEnabled(false);
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
            Open_API();
            DesktopPane.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
            MenuBar.setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR)); 
            Menu_API.setEnabled(true);
        }  
    }//GEN-LAST:event_Menu_APIMouseClicked
    private void Open_REPORT() {                                    
        W_Report wr = new W_Report();
        this.DesktopPane.add(wr);
        int X = this.DesktopPane.getWidth();
        int X1 = wr.getWidth();
        int Y = this.DesktopPane.getHeight();
        int Y1 = wr.getHeight();
        wr.setLocation(X - X1, Y - Y1);
//        try {
//            wr.setSelected(true);
//        } catch (PropertyVetoException ex) {
//            Logger.getLogger(A.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
//        }
        wr.show();                           
    }
    private void Get_Version() {
        setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        Version =  "?"; 
        try {
            String s = "A.A";
            Version = s.getClass().getPackage().getImplementationVersion(); 
            String path = getClass().getResource("").getPath();
            Manifest m = new JarFile(path).getManifest();
            //s = "1";

            Attributes attributes = m.getMainAttributes();
            if (attributes!=null){
                java.util.Iterator it = attributes.keySet().iterator();
                while (it.hasNext()){
                    java.util.jar.Attributes.Name key = (java.util.jar.Attributes.Name) it.next();
                    String keyword = key.toString();
                    if (keyword.equals("Implementation-Version") || keyword.equals("Bundle-Version")){
                        Version = (String) attributes.get(key);
                        break;
                    }
                }
            }
        } catch(Exception ex){
            Version =  ex.getMessage(); 
        }
        setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    } 
    private static void Get_User() {
        //setCursor(Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));
        UserID = System.getProperty("user.name");
        //UserID = "theleepan.sivabalasi";
        WsOS = System.getProperty("os.name");
        try {
            InetAddress addr;
            addr = InetAddress.getLocalHost();
            WsID = addr.getHostName();
        } catch (UnknownHostException ex) { 
            WsID = "Unknown - " + ex.getMessage();
        }
        //setCursor(Cursor.getPredefinedCursor (Cursor.DEFAULT_CURSOR));
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Get_User();
        try {
            for (UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AP3.class.getName()).log(java.util.logging.Level.SEVERE, ex.getMessage(), ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            final A F = new A();
            F.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
//                    try {
//                        if(conn != null && !conn.isClosed()){ conn.close(); }
//                    }
//                    catch (SQLException ex) {
//                        Logger.getLogger(AP3.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
//                    }
                }
            });
            F.setLocationRelativeTo(null);
            F.setVisible(true);
        });
    }
    // <editor-fold defaultstate="collapsed" desc="Public & Private Variables">
    public static final String QA_BD_CON_STRING = "jdbc:sqlserver://dev-digitalhospitality-sql.database.windows.net:1433;database=cdlqadb;user=xttadmin;password=Sp515s10#a;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;";
    public static String API_Response_Body = "";
    public static int T_Index;
    public static WebDriver d1;
    public static WebElement e;
    public static WebElement e1;
    public static WebElement e2;
    public static FluentWait wait;
    public static WebDriverWait wait_msg;
    public static WebDriverWait timeout;
    public static List<WebElement> L0 = null;
    public static List<WebElement> L1 = null;
    public static List<WebElement> L2 = null;
    public static List<WebElement> L3 = null;
    public static List<WebElement> Opens = null;
    public static List<WebElement> Closes = null;
    
    public static double sleep = 0.5;
    public static double Timeout = 15;
    public static double Wait = 3;

    public static String t;
    public static String err;
    public static String F; 
    public static String EX; 
     
    public static int _t = 0; // Total
    public static int _p = 0; // Passed
    public static int _f = 0; // Failed
    public static int _w = 0; // Warn
    public static boolean FAIL = false;
    public static boolean ALL_DATA = false;
    public static boolean NO_DATA = false;
    

    public static String r_time = "";
    public static String Ver = "";
    public static String TZone;      
    public static String Summary;
    public static String r_type;  
    
    public static int t_calls = 0;
    public static double t_min = 0;
    public static double t_max = 0;
    public static double t_avg = 0;
    public static double p_50 = 0;
    public static double p_90 = 0;
    
    public static DateTimeFormatter Time_12_formatter = DateTimeFormatter.ofPattern("hh:mm:ss a"); 
    public static final DateTimeFormatter Time_24_formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
    public static final DateTimeFormatter Date_formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");

    public static int F_COUNT;    
    public static String Version = "";
    public static String UserID = "";
    public static String WsID = "";    
    public static String WsOS = "";  

    public static String SQL = "";  


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane DesktopPane;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu MenuORDERS;
    private javax.swing.JMenu MenuReports;
    private javax.swing.JMenu MenuWO;
    private javax.swing.JMenu Menu_AP3;
    private javax.swing.JMenu Menu_API;
    private javax.swing.JMenu Menu_FW;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>   
}
